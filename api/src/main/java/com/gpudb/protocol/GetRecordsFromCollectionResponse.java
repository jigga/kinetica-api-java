/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.generic.GenericData;

/**
 * A set of results returned by {@link
 * com.gpudb.GPUdb#getRecordsFromCollection(GetRecordsFromCollectionRequest)
 * GPUdb.getRecordsFromCollection}.
 *
 * @param <T>  The type of object being processed.
 *
 */
public class GetRecordsFromCollectionResponse<T> {
    /**
     * A set of string constants for the {@link
     * GetRecordsFromCollectionResponse} parameter {@link #getInfo() info}.
     * <p>
     * Additional information.
     */
    public static final class Info {
        /**
         * Total number of records.
         */
        public static final String TOTAL_NUMBER_OF_RECORDS = "total_number_of_records";

        /**
         * Too many records. Returned a partial set.
         * Supported values:
         * <ul>
         *     <li>{@link Info#TRUE TRUE}
         *     <li>{@link Info#FALSE FALSE}
         * </ul>
         */
        public static final String HAS_MORE_RECORDS = "has_more_records";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private Info() {  }
    }

    private String tableName;
    private List<String> typeNames;
    private List<T> data;
    private List<String> recordIds;
    private Map<String, String> info;

    /**
     * Constructs a GetRecordsFromCollectionResponse object with default
     * parameters.
     */
    public GetRecordsFromCollectionResponse() {
    }

    /**
     * Value of {@link
     * com.gpudb.protocol.GetRecordsFromCollectionRequest#getTableName()
     * tableName}.
     *
     * @return The current value of {@code tableName}.
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * Value of {@link
     * com.gpudb.protocol.GetRecordsFromCollectionRequest#getTableName()
     * tableName}.
     *
     * @param tableName  The new value for {@code tableName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public GetRecordsFromCollectionResponse<T> setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * The type IDs of the corresponding records in {@link #getData() data} or
     * {@code recordsJson}. This is useful when {@link
     * com.gpudb.protocol.GetRecordsFromCollectionRequest#getTableName()
     * tableName} is a heterogeneous collection (collections containing tables
     * of different types).
     *
     * @return The current value of {@code typeNames}.
     */
    public List<String> getTypeNames() {
        return typeNames;
    }

    /**
     * The type IDs of the corresponding records in {@link #getData() data} or
     * {@code recordsJson}. This is useful when {@link
     * com.gpudb.protocol.GetRecordsFromCollectionRequest#getTableName()
     * tableName} is a heterogeneous collection (collections containing tables
     * of different types).
     *
     * @param typeNames  The new value for {@code typeNames}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public GetRecordsFromCollectionResponse<T> setTypeNames(List<String> typeNames) {
        this.typeNames = (typeNames == null) ? new ArrayList<String>() : typeNames;
        return this;
    }

    /**
     * If the encoding parameter of the request was 'binary' then this list
     * contains the binary encoded records retrieved from the table/collection.
     * Otherwise, empty list.
     *
     * @return The current value of {@code data}.
     */
    public List<T> getData() {
        return data;
    }

    /**
     * If the encoding parameter of the request was 'binary' then this list
     * contains the binary encoded records retrieved from the table/collection.
     * Otherwise, empty list.
     *
     * @param data  The new value for {@code data}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public GetRecordsFromCollectionResponse<T> setData(List<T> data) {
        this.data = (data == null) ? new ArrayList<T>() : data;
        return this;
    }

    /**
     * If the 'return_record_ids' option of the request was 'true', then this
     * list contains the internal ID for each object. Otherwise it will be
     * empty.
     *
     * @return The current value of {@code recordIds}.
     */
    public List<String> getRecordIds() {
        return recordIds;
    }

    /**
     * If the 'return_record_ids' option of the request was 'true', then this
     * list contains the internal ID for each object. Otherwise it will be
     * empty.
     *
     * @param recordIds  The new value for {@code recordIds}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public GetRecordsFromCollectionResponse<T> setRecordIds(List<String> recordIds) {
        this.recordIds = (recordIds == null) ? new ArrayList<String>() : recordIds;
        return this;
    }

    /**
     * Additional information.
     * <ul>
     *     <li>{@link Info#TOTAL_NUMBER_OF_RECORDS TOTAL_NUMBER_OF_RECORDS}:
     *         Total number of records.
     *     <li>{@link Info#HAS_MORE_RECORDS HAS_MORE_RECORDS}: Too many
     *         records. Returned a partial set.
     *         Supported values:
     *         <ul>
     *             <li>{@link Info#TRUE TRUE}
     *             <li>{@link Info#FALSE FALSE}
     *         </ul>
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code info}.
     */
    public Map<String, String> getInfo() {
        return info;
    }

    /**
     * Additional information.
     * <ul>
     *     <li>{@link Info#TOTAL_NUMBER_OF_RECORDS TOTAL_NUMBER_OF_RECORDS}:
     *         Total number of records.
     *     <li>{@link Info#HAS_MORE_RECORDS HAS_MORE_RECORDS}: Too many
     *         records. Returned a partial set.
     *         Supported values:
     *         <ul>
     *             <li>{@link Info#TRUE TRUE}
     *             <li>{@link Info#FALSE FALSE}
     *         </ul>
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param info  The new value for {@code info}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public GetRecordsFromCollectionResponse<T> setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }
    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        GetRecordsFromCollectionResponse that = (GetRecordsFromCollectionResponse)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.typeNames.equals( that.typeNames )
                 && this.data.equals( that.data )
                 && this.recordIds.equals( that.recordIds )
                 && this.info.equals( that.info ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "typeNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.typeNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "data" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.data ) );
        builder.append( ", " );
        builder.append( gd.toString( "recordIds" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.recordIds ) );
        builder.append( ", " );
        builder.append( gd.toString( "info" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.info ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.typeNames.hashCode();
        hashCode = (31 * hashCode) + this.data.hashCode();
        hashCode = (31 * hashCode) + this.recordIds.hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }
}
