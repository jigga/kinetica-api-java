/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#alterTableColumns(AlterTableColumnsRequest)
 * GPUdb.alterTableColumns}.
 * <p>
 * Apply various modifications to columns in a table, view.  The available
 * modifications include the following:
 * <p>
 * Create or delete an <a
 * href="../../../../../../concepts/indexes/#column-index"
 * target="_top">index</a> on a particular column. This can speed up certain
 * operations when using expressions containing equality or relational
 * operators on indexed columns. This only applies to tables.
 * <p>
 * Manage a table's columns--a column can be added, removed, or have its <a
 * href="../../../../../../concepts/types/" target="_top">type and
 * properties</a> modified, including whether it is <a
 * href="../../../../../../concepts/dictionary_encoding/"
 * target="_top">dictionary encoded</a> or not.
 */
public class AlterTableColumnsRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AlterTableColumnsRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("columnAlterations").type().array().items().map().values().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    private String tableName;
    private List<Map<String, String>> columnAlterations;
    private Map<String, String> options;

    /**
     * Constructs an AlterTableColumnsRequest object with default parameters.
     */
    public AlterTableColumnsRequest() {
        tableName = "";
        columnAlterations = new ArrayList<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AlterTableColumnsRequest object with the specified
     * parameters.
     *
     * @param tableName  Table on which the operation will be performed. Must
     *                   be an existing table or view, in
     *                   [schema_name.]table_name format, using standard <a
     *                   href="../../../../../../concepts/tables/#table-name-resolution"
     *                   target="_top">name resolution rules</a>.
     * @param columnAlterations  List of alter table add/delete/change column
     *                           requests - all for the same table. Each
     *                           request is a map that includes 'column_name',
     *                           'action' and the options specific for the
     *                           action. Note that the same options as in alter
     *                           table requests but in the same map as the
     *                           column name and the action. For example:
     *                           [{'column_name':'col_1','action':'change_column','rename_column':'col_2'},{'column_name':'col_1','action':'add_column',
     *                           'type':'int','default_value':'1'}]
     * @param options  Optional parameters.
     */
    public AlterTableColumnsRequest(String tableName, List<Map<String, String>> columnAlterations, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.columnAlterations = (columnAlterations == null) ? new ArrayList<Map<String, String>>() : columnAlterations;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Table on which the operation will be performed. Must be an existing
     * table or view, in [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>.
     *
     * @return The current value of {@code tableName}.
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * Table on which the operation will be performed. Must be an existing
     * table or view, in [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>.
     *
     * @param tableName  The new value for {@code tableName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterTableColumnsRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * List of alter table add/delete/change column requests - all for the same
     * table. Each request is a map that includes 'column_name', 'action' and
     * the options specific for the action. Note that the same options as in
     * alter table requests but in the same map as the column name and the
     * action. For example:
     * [{'column_name':'col_1','action':'change_column','rename_column':'col_2'},{'column_name':'col_1','action':'add_column',
     * 'type':'int','default_value':'1'}]
     *
     * @return The current value of {@code columnAlterations}.
     */
    public List<Map<String, String>> getColumnAlterations() {
        return columnAlterations;
    }

    /**
     * List of alter table add/delete/change column requests - all for the same
     * table. Each request is a map that includes 'column_name', 'action' and
     * the options specific for the action. Note that the same options as in
     * alter table requests but in the same map as the column name and the
     * action. For example:
     * [{'column_name':'col_1','action':'change_column','rename_column':'col_2'},{'column_name':'col_1','action':'add_column',
     * 'type':'int','default_value':'1'}]
     *
     * @param columnAlterations  The new value for {@code columnAlterations}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterTableColumnsRequest setColumnAlterations(List<Map<String, String>> columnAlterations) {
        this.columnAlterations = (columnAlterations == null) ? new ArrayList<Map<String, String>>() : columnAlterations;
        return this;
    }

    /**
     * Optional parameters.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterTableColumnsRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.columnAlterations;

            case 2:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.columnAlterations = (List<Map<String, String>>)value;
                break;

            case 2:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AlterTableColumnsRequest that = (AlterTableColumnsRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.columnAlterations.equals( that.columnAlterations )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "columnAlterations" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.columnAlterations ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.columnAlterations.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
