/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#adminAddHost(AdminAddHostRequest) GPUdb.adminAddHost}.
 * <p>
 * Adds a host to an existing cluster.
 */
public class AdminAddHostRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AdminAddHostRequest")
            .namespace("com.gpudb")
            .fields()
                .name("hostAddress").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link AdminAddHostRequest} parameter
     * {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * If set to {@link Options#TRUE TRUE}, only validation checks will be
         * performed. No host is added.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String DRY_RUN = "dry_run";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * If set to {@link Options#TRUE TRUE}, the host will accept processes
         * (ranks, graph server, etc.) in the event of a failover on another
         * node in the cluster.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String ACCEPTS_FAILOVER = "accepts_failover";

        /**
         * The publicly-accessible IP address for the host being added,
         * typically specified for clients using multi-head operations. This
         * setting is required if any other host(s) in the cluster specify a
         * public address.
         */
        public static final String PUBLIC_ADDRESS = "public_address";

        /**
         * The publicly-accessible full path URL to the host manager on the
         * host being added, e.g., 'http://172.123.45.67:9300'. The default
         * host manager port can be found in the <a
         * href="../../../../../../install/shared/ports/" target="_top">list of
         * ports</a> used by Kinetica.
         */
        public static final String HOST_MANAGER_PUBLIC_URL = "host_manager_public_url";

        /**
         * The desired RAM limit for the host being added, i.e.&nbsp;the sum of
         * RAM usage for all processes on the host will not be able to exceed
         * this value. Supported units: K (thousand), KB (kilobytes), M
         * (million), MB (megabytes), G (billion), GB (gigabytes); if no unit
         * is provided, the value is assumed to be in bytes. For example, if
         * {@link Options#RAM_LIMIT RAM_LIMIT} is set to 10M, the resulting RAM
         * limit is 10 million bytes. Set {@link Options#RAM_LIMIT RAM_LIMIT}
         * to -1 to have no RAM limit.
         */
        public static final String RAM_LIMIT = "ram_limit";

        /**
         * Comma-delimited list of GPU indices (starting at 1) that are
         * eligible for running worker processes. If left blank, all GPUs on
         * the host being added will be eligible.
         */
        public static final String GPUS = "gpus";

        private Options() {  }
    }

    private String hostAddress;
    private Map<String, String> options;

    /**
     * Constructs an AdminAddHostRequest object with default parameters.
     */
    public AdminAddHostRequest() {
        hostAddress = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AdminAddHostRequest object with the specified parameters.
     *
     * @param hostAddress  IP address of the host that will be added to the
     *                     cluster. This host must have installed the same
     *                     version of Kinetica as the cluster to which it is
     *                     being added.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#DRY_RUN DRY_RUN}: If set to
     *                         {@link Options#TRUE TRUE}, only validation
     *                         checks will be performed. No host is added.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#ACCEPTS_FAILOVER
     *                         ACCEPTS_FAILOVER}: If set to {@link Options#TRUE
     *                         TRUE}, the host will accept processes (ranks,
     *                         graph server, etc.) in the event of a failover
     *                         on another node in the cluster.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#PUBLIC_ADDRESS PUBLIC_ADDRESS}:
     *                         The publicly-accessible IP address for the host
     *                         being added, typically specified for clients
     *                         using multi-head operations. This setting is
     *                         required if any other host(s) in the cluster
     *                         specify a public address.
     *                     <li>{@link Options#HOST_MANAGER_PUBLIC_URL
     *                         HOST_MANAGER_PUBLIC_URL}: The
     *                         publicly-accessible full path URL to the host
     *                         manager on the host being added, e.g.,
     *                         'http://172.123.45.67:9300'. The default host
     *                         manager port can be found in the <a
     *                         href="../../../../../../install/shared/ports/"
     *                         target="_top">list of ports</a> used by
     *                         Kinetica.
     *                     <li>{@link Options#RAM_LIMIT RAM_LIMIT}: The desired
     *                         RAM limit for the host being added, i.e. the sum
     *                         of RAM usage for all processes on the host will
     *                         not be able to exceed this value. Supported
     *                         units: K (thousand), KB (kilobytes), M
     *                         (million), MB (megabytes), G (billion), GB
     *                         (gigabytes); if no unit is provided, the value
     *                         is assumed to be in bytes. For example, if
     *                         {@link Options#RAM_LIMIT RAM_LIMIT} is set to
     *                         10M, the resulting RAM limit is 10 million
     *                         bytes. Set {@link Options#RAM_LIMIT RAM_LIMIT}
     *                         to -1 to have no RAM limit.
     *                     <li>{@link Options#GPUS GPUS}: Comma-delimited list
     *                         of GPU indices (starting at 1) that are eligible
     *                         for running worker processes. If left blank, all
     *                         GPUs on the host being added will be eligible.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public AdminAddHostRequest(String hostAddress, Map<String, String> options) {
        this.hostAddress = (hostAddress == null) ? "" : hostAddress;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * IP address of the host that will be added to the cluster. This host must
     * have installed the same version of Kinetica as the cluster to which it
     * is being added.
     *
     * @return The current value of {@code hostAddress}.
     */
    public String getHostAddress() {
        return hostAddress;
    }

    /**
     * IP address of the host that will be added to the cluster. This host must
     * have installed the same version of Kinetica as the cluster to which it
     * is being added.
     *
     * @param hostAddress  The new value for {@code hostAddress}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminAddHostRequest setHostAddress(String hostAddress) {
        this.hostAddress = (hostAddress == null) ? "" : hostAddress;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#DRY_RUN DRY_RUN}: If set to {@link Options#TRUE
     *         TRUE}, only validation checks will be performed. No host is
     *         added.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#ACCEPTS_FAILOVER ACCEPTS_FAILOVER}: If set to
     *         {@link Options#TRUE TRUE}, the host will accept processes
     *         (ranks, graph server, etc.) in the event of a failover on
     *         another node in the cluster.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#PUBLIC_ADDRESS PUBLIC_ADDRESS}: The
     *         publicly-accessible IP address for the host being added,
     *         typically specified for clients using multi-head operations.
     *         This setting is required if any other host(s) in the cluster
     *         specify a public address.
     *     <li>{@link Options#HOST_MANAGER_PUBLIC_URL HOST_MANAGER_PUBLIC_URL}:
     *         The publicly-accessible full path URL to the host manager on the
     *         host being added, e.g., 'http://172.123.45.67:9300'. The default
     *         host manager port can be found in the <a
     *         href="../../../../../../install/shared/ports/"
     *         target="_top">list of ports</a> used by Kinetica.
     *     <li>{@link Options#RAM_LIMIT RAM_LIMIT}: The desired RAM limit for
     *         the host being added, i.e. the sum of RAM usage for all
     *         processes on the host will not be able to exceed this value.
     *         Supported units: K (thousand), KB (kilobytes), M (million), MB
     *         (megabytes), G (billion), GB (gigabytes); if no unit is
     *         provided, the value is assumed to be in bytes. For example, if
     *         {@link Options#RAM_LIMIT RAM_LIMIT} is set to 10M, the resulting
     *         RAM limit is 10 million bytes. Set {@link Options#RAM_LIMIT
     *         RAM_LIMIT} to -1 to have no RAM limit.
     *     <li>{@link Options#GPUS GPUS}: Comma-delimited list of GPU indices
     *         (starting at 1) that are eligible for running worker processes.
     *         If left blank, all GPUs on the host being added will be
     *         eligible.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#DRY_RUN DRY_RUN}: If set to {@link Options#TRUE
     *         TRUE}, only validation checks will be performed. No host is
     *         added.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#ACCEPTS_FAILOVER ACCEPTS_FAILOVER}: If set to
     *         {@link Options#TRUE TRUE}, the host will accept processes
     *         (ranks, graph server, etc.) in the event of a failover on
     *         another node in the cluster.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#PUBLIC_ADDRESS PUBLIC_ADDRESS}: The
     *         publicly-accessible IP address for the host being added,
     *         typically specified for clients using multi-head operations.
     *         This setting is required if any other host(s) in the cluster
     *         specify a public address.
     *     <li>{@link Options#HOST_MANAGER_PUBLIC_URL HOST_MANAGER_PUBLIC_URL}:
     *         The publicly-accessible full path URL to the host manager on the
     *         host being added, e.g., 'http://172.123.45.67:9300'. The default
     *         host manager port can be found in the <a
     *         href="../../../../../../install/shared/ports/"
     *         target="_top">list of ports</a> used by Kinetica.
     *     <li>{@link Options#RAM_LIMIT RAM_LIMIT}: The desired RAM limit for
     *         the host being added, i.e. the sum of RAM usage for all
     *         processes on the host will not be able to exceed this value.
     *         Supported units: K (thousand), KB (kilobytes), M (million), MB
     *         (megabytes), G (billion), GB (gigabytes); if no unit is
     *         provided, the value is assumed to be in bytes. For example, if
     *         {@link Options#RAM_LIMIT RAM_LIMIT} is set to 10M, the resulting
     *         RAM limit is 10 million bytes. Set {@link Options#RAM_LIMIT
     *         RAM_LIMIT} to -1 to have no RAM limit.
     *     <li>{@link Options#GPUS GPUS}: Comma-delimited list of GPU indices
     *         (starting at 1) that are eligible for running worker processes.
     *         If left blank, all GPUs on the host being added will be
     *         eligible.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminAddHostRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.hostAddress;

            case 1:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.hostAddress = (String)value;
                break;

            case 1:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AdminAddHostRequest that = (AdminAddHostRequest)obj;

        return ( this.hostAddress.equals( that.hostAddress )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "hostAddress" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.hostAddress ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.hostAddress.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
