/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#mergeRecords(MergeRecordsRequest) GPUdb.mergeRecords}.
 * <p>
 * Create a new empty result table (specified by {@link #getTableName()
 * tableName}), and insert all records from source tables (specified by {@link
 * #getSourceTableNames() sourceTableNames}) based on the field mapping
 * information (specified by {@link #getFieldMaps() fieldMaps}).
 * <p>
 * For merge records details and examples, see <a
 * href="../../../../../../concepts/merge_records/" target="_top">Merge
 * Records</a>.  For limitations, see <a
 * href="../../../../../../concepts/merge_records/#limitations-and-cautions"
 * target="_top">Merge Records Limitations and Cautions</a>.
 * <p>
 * The field map (specified by {@link #getFieldMaps() fieldMaps}) holds the
 * user-specified maps of target table column names to source table columns.
 * The array of {@link #getFieldMaps() fieldMaps} must match one-to-one with
 * the {@link #getSourceTableNames() sourceTableNames}, e.g., there's a map
 * present in {@link #getFieldMaps() fieldMaps} for each table listed in {@link
 * #getSourceTableNames() sourceTableNames}.
 */
public class MergeRecordsRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("MergeRecordsRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("sourceTableNames").type().array().items().stringType().noDefault()
                .name("fieldMaps").type().array().items().map().values().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link MergeRecordsRequest} parameter
     * {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * If {@link Options#TRUE TRUE}, a unique temporary table name will be
         * generated in the sys_temp schema and used in place of {@link
         * #getTableName() tableName}. If {@link Options#PERSIST PERSIST} is
         * {@link Options#FALSE FALSE}, then this is always allowed even if the
         * caller does not have permission to create tables. The generated name
         * is returned in {@link
         * com.gpudb.protocol.MergeRecordsResponse.Info#QUALIFIED_TABLE_NAME
         * QUALIFIED_TABLE_NAME}.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String CREATE_TEMP_TABLE = "create_temp_table";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * [DEPRECATED--please specify the containing schema for the merged
         * table as part of {@link #getTableName() tableName} and use {@link
         * com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
         * GPUdb.createSchema} to create the schema if non-existent]  Name of a
         * schema for the newly created merged table specified by {@link
         * #getTableName() tableName}.
         */
        public static final String COLLECTION_NAME = "collection_name";

        /**
         * Indicates the <a
         * href="../../../../../../concepts/tables/#distribution"
         * target="_top">distribution scheme</a> for the data of the merged
         * table specified in {@link #getTableName() tableName}.  If true, the
         * table will be <a
         * href="../../../../../../concepts/tables/#replication"
         * target="_top">replicated</a>.  If false, the table will be <a
         * href="../../../../../../concepts/tables/#random-sharding"
         * target="_top">randomly sharded</a>.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String IS_REPLICATED = "is_replicated";

        /**
         * Sets the <a href="../../../../../../concepts/ttl/"
         * target="_top">TTL</a> of the merged table specified in {@link
         * #getTableName() tableName}.
         */
        public static final String TTL = "ttl";

        /**
         * If {@link Options#TRUE TRUE}, then the table specified in {@link
         * #getTableName() tableName} will be persisted and will not expire
         * unless a {@link Options#TTL TTL} is specified.   If {@link
         * Options#FALSE FALSE}, then the table will be an in-memory table and
         * will expire unless a {@link Options#TTL TTL} is specified otherwise.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#TRUE TRUE}.
         */
        public static final String PERSIST = "persist";

        /**
         * Indicates the number of records per chunk to be used for the merged
         * table specified in {@link #getTableName() tableName}.
         */
        public static final String CHUNK_SIZE = "chunk_size";

        /**
         * Indicates the target maximum data size for each column in a chunk to
         * be used for the merged table specified in {@link #getTableName()
         * tableName}.
         */
        public static final String CHUNK_COLUMN_MAX_MEMORY = "chunk_column_max_memory";

        /**
         * Indicates the target maximum data size for all columns in a chunk to
         * be used for the merged table specified in {@link #getTableName()
         * tableName}.
         */
        public static final String CHUNK_MAX_MEMORY = "chunk_max_memory";

        /**
         * view this result table is part of. The default value is ''.
         */
        public static final String VIEW_ID = "view_id";

        private Options() {  }
    }

    private String tableName;
    private List<String> sourceTableNames;
    private List<Map<String, String>> fieldMaps;
    private Map<String, String> options;

    /**
     * Constructs a MergeRecordsRequest object with default parameters.
     */
    public MergeRecordsRequest() {
        tableName = "";
        sourceTableNames = new ArrayList<>();
        fieldMaps = new ArrayList<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a MergeRecordsRequest object with the specified parameters.
     *
     * @param tableName  The name of the new result table for the records to be
     *                   merged into, in [schema_name.]table_name format, using
     *                   standard <a
     *                   href="../../../../../../concepts/tables/#table-name-resolution"
     *                   target="_top">name resolution rules</a> and meeting <a
     *                   href="../../../../../../concepts/tables/#table-naming-criteria"
     *                   target="_top">table naming criteria</a>.  Must NOT be
     *                   an existing table.
     * @param sourceTableNames  The list of names of source tables to get the
     *                          records from, each in [schema_name.]table_name
     *                          format, using standard <a
     *                          href="../../../../../../concepts/tables/#table-name-resolution"
     *                          target="_top">name resolution rules</a>.  Must
     *                          be existing table names.
     * @param fieldMaps  Contains a list of source/target column mappings, one
     *                   mapping for each source table listed in {@code
     *                   sourceTableNames} being merged into the target table
     *                   specified by {@code tableName}.  Each mapping contains
     *                   the target column names (as keys) that the data in the
     *                   mapped source columns or column <a
     *                   href="../../../../../../concepts/expressions/"
     *                   target="_top">expressions</a> (as values) will be
     *                   merged into.  All of the source columns being merged
     *                   into a given target column must match in type, as that
     *                   type will determine the type of the new target column.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#CREATE_TEMP_TABLE
     *                         CREATE_TEMP_TABLE}: If {@link Options#TRUE
     *                         TRUE}, a unique temporary table name will be
     *                         generated in the sys_temp schema and used in
     *                         place of {@code tableName}. If {@link
     *                         Options#PERSIST PERSIST} is {@link Options#FALSE
     *                         FALSE}, then this is always allowed even if the
     *                         caller does not have permission to create
     *                         tables. The generated name is returned in {@link
     *                         com.gpudb.protocol.MergeRecordsResponse.Info#QUALIFIED_TABLE_NAME
     *                         QUALIFIED_TABLE_NAME}.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#COLLECTION_NAME COLLECTION_NAME}:
     *                         [DEPRECATED--please specify the containing
     *                         schema for the merged table as part of {@code
     *                         tableName} and use {@link
     *                         com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *                         GPUdb.createSchema} to create the schema if
     *                         non-existent]  Name of a schema for the newly
     *                         created merged table specified by {@code
     *                         tableName}.
     *                     <li>{@link Options#IS_REPLICATED IS_REPLICATED}:
     *                         Indicates the <a
     *                         href="../../../../../../concepts/tables/#distribution"
     *                         target="_top">distribution scheme</a> for the
     *                         data of the merged table specified in {@code
     *                         tableName}.  If true, the table will be <a
     *                         href="../../../../../../concepts/tables/#replication"
     *                         target="_top">replicated</a>.  If false, the
     *                         table will be <a
     *                         href="../../../../../../concepts/tables/#random-sharding"
     *                         target="_top">randomly sharded</a>.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#TTL TTL}: Sets the <a
     *                         href="../../../../../../concepts/ttl/"
     *                         target="_top">TTL</a> of the merged table
     *                         specified in {@code tableName}.
     *                     <li>{@link Options#PERSIST PERSIST}: If {@link
     *                         Options#TRUE TRUE}, then the table specified in
     *                         {@code tableName} will be persisted and will not
     *                         expire unless a {@link Options#TTL TTL} is
     *                         specified.   If {@link Options#FALSE FALSE},
     *                         then the table will be an in-memory table and
     *                         will expire unless a {@link Options#TTL TTL} is
     *                         specified otherwise.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#CHUNK_SIZE CHUNK_SIZE}: Indicates
     *                         the number of records per chunk to be used for
     *                         the merged table specified in {@code tableName}.
     *                     <li>{@link Options#CHUNK_COLUMN_MAX_MEMORY
     *                         CHUNK_COLUMN_MAX_MEMORY}: Indicates the target
     *                         maximum data size for each column in a chunk to
     *                         be used for the merged table specified in {@code
     *                         tableName}.
     *                     <li>{@link Options#CHUNK_MAX_MEMORY
     *                         CHUNK_MAX_MEMORY}: Indicates the target maximum
     *                         data size for all columns in a chunk to be used
     *                         for the merged table specified in {@code
     *                         tableName}.
     *                     <li>{@link Options#VIEW_ID VIEW_ID}: view this
     *                         result table is part of. The default value is
     *                         ''.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public MergeRecordsRequest(String tableName, List<String> sourceTableNames, List<Map<String, String>> fieldMaps, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.sourceTableNames = (sourceTableNames == null) ? new ArrayList<String>() : sourceTableNames;
        this.fieldMaps = (fieldMaps == null) ? new ArrayList<Map<String, String>>() : fieldMaps;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * The name of the new result table for the records to be merged into, in
     * [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a> and meeting <a
     * href="../../../../../../concepts/tables/#table-naming-criteria"
     * target="_top">table naming criteria</a>.  Must NOT be an existing table.
     *
     * @return The current value of {@code tableName}.
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * The name of the new result table for the records to be merged into, in
     * [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a> and meeting <a
     * href="../../../../../../concepts/tables/#table-naming-criteria"
     * target="_top">table naming criteria</a>.  Must NOT be an existing table.
     *
     * @param tableName  The new value for {@code tableName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public MergeRecordsRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * The list of names of source tables to get the records from, each in
     * [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>.  Must be existing table names.
     *
     * @return The current value of {@code sourceTableNames}.
     */
    public List<String> getSourceTableNames() {
        return sourceTableNames;
    }

    /**
     * The list of names of source tables to get the records from, each in
     * [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>.  Must be existing table names.
     *
     * @param sourceTableNames  The new value for {@code sourceTableNames}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public MergeRecordsRequest setSourceTableNames(List<String> sourceTableNames) {
        this.sourceTableNames = (sourceTableNames == null) ? new ArrayList<String>() : sourceTableNames;
        return this;
    }

    /**
     * Contains a list of source/target column mappings, one mapping for each
     * source table listed in {@link #getSourceTableNames() sourceTableNames}
     * being merged into the target table specified by {@link #getTableName()
     * tableName}.  Each mapping contains the target column names (as keys)
     * that the data in the mapped source columns or column <a
     * href="../../../../../../concepts/expressions/"
     * target="_top">expressions</a> (as values) will be merged into.  All of
     * the source columns being merged into a given target column must match in
     * type, as that type will determine the type of the new target column.
     *
     * @return The current value of {@code fieldMaps}.
     */
    public List<Map<String, String>> getFieldMaps() {
        return fieldMaps;
    }

    /**
     * Contains a list of source/target column mappings, one mapping for each
     * source table listed in {@link #getSourceTableNames() sourceTableNames}
     * being merged into the target table specified by {@link #getTableName()
     * tableName}.  Each mapping contains the target column names (as keys)
     * that the data in the mapped source columns or column <a
     * href="../../../../../../concepts/expressions/"
     * target="_top">expressions</a> (as values) will be merged into.  All of
     * the source columns being merged into a given target column must match in
     * type, as that type will determine the type of the new target column.
     *
     * @param fieldMaps  The new value for {@code fieldMaps}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public MergeRecordsRequest setFieldMaps(List<Map<String, String>> fieldMaps) {
        this.fieldMaps = (fieldMaps == null) ? new ArrayList<Map<String, String>>() : fieldMaps;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#CREATE_TEMP_TABLE CREATE_TEMP_TABLE}: If {@link
     *         Options#TRUE TRUE}, a unique temporary table name will be
     *         generated in the sys_temp schema and used in place of {@link
     *         #getTableName() tableName}. If {@link Options#PERSIST PERSIST}
     *         is {@link Options#FALSE FALSE}, then this is always allowed even
     *         if the caller does not have permission to create tables. The
     *         generated name is returned in {@link
     *         com.gpudb.protocol.MergeRecordsResponse.Info#QUALIFIED_TABLE_NAME
     *         QUALIFIED_TABLE_NAME}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#COLLECTION_NAME COLLECTION_NAME}:
     *         [DEPRECATED--please specify the containing schema for the merged
     *         table as part of {@link #getTableName() tableName} and use
     *         {@link com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *         GPUdb.createSchema} to create the schema if non-existent]  Name
     *         of a schema for the newly created merged table specified by
     *         {@link #getTableName() tableName}.
     *     <li>{@link Options#IS_REPLICATED IS_REPLICATED}: Indicates the <a
     *         href="../../../../../../concepts/tables/#distribution"
     *         target="_top">distribution scheme</a> for the data of the merged
     *         table specified in {@link #getTableName() tableName}.  If true,
     *         the table will be <a
     *         href="../../../../../../concepts/tables/#replication"
     *         target="_top">replicated</a>.  If false, the table will be <a
     *         href="../../../../../../concepts/tables/#random-sharding"
     *         target="_top">randomly sharded</a>.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#TTL TTL}: Sets the <a
     *         href="../../../../../../concepts/ttl/" target="_top">TTL</a> of
     *         the merged table specified in {@link #getTableName() tableName}.
     *     <li>{@link Options#PERSIST PERSIST}: If {@link Options#TRUE TRUE},
     *         then the table specified in {@link #getTableName() tableName}
     *         will be persisted and will not expire unless a {@link
     *         Options#TTL TTL} is specified.   If {@link Options#FALSE FALSE},
     *         then the table will be an in-memory table and will expire unless
     *         a {@link Options#TTL TTL} is specified otherwise.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#CHUNK_SIZE CHUNK_SIZE}: Indicates the number of
     *         records per chunk to be used for the merged table specified in
     *         {@link #getTableName() tableName}.
     *     <li>{@link Options#CHUNK_COLUMN_MAX_MEMORY CHUNK_COLUMN_MAX_MEMORY}:
     *         Indicates the target maximum data size for each column in a
     *         chunk to be used for the merged table specified in {@link
     *         #getTableName() tableName}.
     *     <li>{@link Options#CHUNK_MAX_MEMORY CHUNK_MAX_MEMORY}: Indicates the
     *         target maximum data size for all columns in a chunk to be used
     *         for the merged table specified in {@link #getTableName()
     *         tableName}.
     *     <li>{@link Options#VIEW_ID VIEW_ID}: view this result table is part
     *         of. The default value is ''.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#CREATE_TEMP_TABLE CREATE_TEMP_TABLE}: If {@link
     *         Options#TRUE TRUE}, a unique temporary table name will be
     *         generated in the sys_temp schema and used in place of {@link
     *         #getTableName() tableName}. If {@link Options#PERSIST PERSIST}
     *         is {@link Options#FALSE FALSE}, then this is always allowed even
     *         if the caller does not have permission to create tables. The
     *         generated name is returned in {@link
     *         com.gpudb.protocol.MergeRecordsResponse.Info#QUALIFIED_TABLE_NAME
     *         QUALIFIED_TABLE_NAME}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#COLLECTION_NAME COLLECTION_NAME}:
     *         [DEPRECATED--please specify the containing schema for the merged
     *         table as part of {@link #getTableName() tableName} and use
     *         {@link com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *         GPUdb.createSchema} to create the schema if non-existent]  Name
     *         of a schema for the newly created merged table specified by
     *         {@link #getTableName() tableName}.
     *     <li>{@link Options#IS_REPLICATED IS_REPLICATED}: Indicates the <a
     *         href="../../../../../../concepts/tables/#distribution"
     *         target="_top">distribution scheme</a> for the data of the merged
     *         table specified in {@link #getTableName() tableName}.  If true,
     *         the table will be <a
     *         href="../../../../../../concepts/tables/#replication"
     *         target="_top">replicated</a>.  If false, the table will be <a
     *         href="../../../../../../concepts/tables/#random-sharding"
     *         target="_top">randomly sharded</a>.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#TTL TTL}: Sets the <a
     *         href="../../../../../../concepts/ttl/" target="_top">TTL</a> of
     *         the merged table specified in {@link #getTableName() tableName}.
     *     <li>{@link Options#PERSIST PERSIST}: If {@link Options#TRUE TRUE},
     *         then the table specified in {@link #getTableName() tableName}
     *         will be persisted and will not expire unless a {@link
     *         Options#TTL TTL} is specified.   If {@link Options#FALSE FALSE},
     *         then the table will be an in-memory table and will expire unless
     *         a {@link Options#TTL TTL} is specified otherwise.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#CHUNK_SIZE CHUNK_SIZE}: Indicates the number of
     *         records per chunk to be used for the merged table specified in
     *         {@link #getTableName() tableName}.
     *     <li>{@link Options#CHUNK_COLUMN_MAX_MEMORY CHUNK_COLUMN_MAX_MEMORY}:
     *         Indicates the target maximum data size for each column in a
     *         chunk to be used for the merged table specified in {@link
     *         #getTableName() tableName}.
     *     <li>{@link Options#CHUNK_MAX_MEMORY CHUNK_MAX_MEMORY}: Indicates the
     *         target maximum data size for all columns in a chunk to be used
     *         for the merged table specified in {@link #getTableName()
     *         tableName}.
     *     <li>{@link Options#VIEW_ID VIEW_ID}: view this result table is part
     *         of. The default value is ''.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public MergeRecordsRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.sourceTableNames;

            case 2:
                return this.fieldMaps;

            case 3:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.sourceTableNames = (List<String>)value;
                break;

            case 2:
                this.fieldMaps = (List<Map<String, String>>)value;
                break;

            case 3:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        MergeRecordsRequest that = (MergeRecordsRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.sourceTableNames.equals( that.sourceTableNames )
                 && this.fieldMaps.equals( that.fieldMaps )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "sourceTableNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.sourceTableNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "fieldMaps" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.fieldMaps ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.sourceTableNames.hashCode();
        hashCode = (31 * hashCode) + this.fieldMaps.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
