/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#adminRemoveRanks(AdminRemoveRanksRequest)
 * GPUdb.adminRemoveRanks}.
 * <p>
 * Remove one or more ranks from an existing Kinetica cluster. All data will be
 * rebalanced to other ranks before the rank(s) is removed unless the {@link
 * Options#REBALANCE_SHARDED_DATA REBALANCE_SHARDED_DATA} or {@link
 * Options#REBALANCE_UNSHARDED_DATA REBALANCE_UNSHARDED_DATA} parameters are
 * set to {@link Options#FALSE FALSE} in the {@link #getOptions() options}, in
 * which case the corresponding <a
 * href="../../../../../../concepts/tables/#sharding" target="_top">sharded
 * data</a> and/or unsharded data (a.k.a. <a
 * href="../../../../../../concepts/tables/#random-sharding"
 * target="_top">randomly-sharded</a>) will be deleted.
 * <p>
 * The database must be offline for this operation, see {@link
 * com.gpudb.GPUdb#adminOffline(AdminOfflineRequest) GPUdb.adminOffline}
 * <p>
 * This endpoint's processing time depends on the amount of data in the system,
 * thus the API call may time out if run directly.  It is recommended to run
 * this endpoint asynchronously via {@link
 * com.gpudb.GPUdb#createJob(CreateJobRequest) GPUdb.createJob}.
 */
public class AdminRemoveRanksRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AdminRemoveRanksRequest")
            .namespace("com.gpudb")
            .fields()
                .name("ranks").type().array().items().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link AdminRemoveRanksRequest}
     * parameter {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * If {@link Options#TRUE TRUE}, <a
         * href="../../../../../../concepts/tables/#sharding"
         * target="_top">sharded data</a> will be rebalanced approximately
         * equally across the cluster. Note that for clusters with large
         * amounts of sharded data, this data transfer could be time consuming
         * and result in delayed query responses.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#TRUE TRUE}.
         */
        public static final String REBALANCE_SHARDED_DATA = "rebalance_sharded_data";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * If {@link Options#TRUE TRUE}, unsharded data (a.k.a. <a
         * href="../../../../../../concepts/tables/#random-sharding"
         * target="_top">randomly-sharded</a>) will be rebalanced approximately
         * equally across the cluster. Note that for clusters with large
         * amounts of unsharded data, this data transfer could be time
         * consuming and result in delayed query responses.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#TRUE TRUE}.
         */
        public static final String REBALANCE_UNSHARDED_DATA = "rebalance_unsharded_data";

        /**
         * Influences how much data is moved at a time during rebalance.  A
         * higher {@link Options#AGGRESSIVENESS AGGRESSIVENESS} will complete
         * the rebalance faster.  A lower {@link Options#AGGRESSIVENESS
         * AGGRESSIVENESS} will take longer but allow for better interleaving
         * between the rebalance and other queries. Valid values are constants
         * from 1 (lowest) to 10 (highest). The default value is '10'.
         */
        public static final String AGGRESSIVENESS = "aggressiveness";

        private Options() {  }
    }

    private List<String> ranks;
    private Map<String, String> options;

    /**
     * Constructs an AdminRemoveRanksRequest object with default parameters.
     */
    public AdminRemoveRanksRequest() {
        ranks = new ArrayList<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AdminRemoveRanksRequest object with the specified
     * parameters.
     *
     * @param ranks  Each array value designates one or more ranks to remove
     *               from the cluster. Values can be formatted as 'rankN' for a
     *               specific rank, 'hostN' (from the gpudb.conf file) to
     *               remove all ranks on that host, or the host IP address
     *               (hostN.address from the gpub.conf file) which also removes
     *               all ranks on that host. Rank 0 (the head rank) cannot be
     *               removed (but can be moved to another host using {@link
     *               com.gpudb.GPUdb#adminSwitchover(AdminSwitchoverRequest)
     *               GPUdb.adminSwitchover}). At least one worker rank must be
     *               left in the cluster after the operation.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#REBALANCE_SHARDED_DATA
     *                         REBALANCE_SHARDED_DATA}: If {@link Options#TRUE
     *                         TRUE}, <a
     *                         href="../../../../../../concepts/tables/#sharding"
     *                         target="_top">sharded data</a> will be
     *                         rebalanced approximately equally across the
     *                         cluster. Note that for clusters with large
     *                         amounts of sharded data, this data transfer
     *                         could be time consuming and result in delayed
     *                         query responses.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#REBALANCE_UNSHARDED_DATA
     *                         REBALANCE_UNSHARDED_DATA}: If {@link
     *                         Options#TRUE TRUE}, unsharded data (a.k.a. <a
     *                         href="../../../../../../concepts/tables/#random-sharding"
     *                         target="_top">randomly-sharded</a>) will be
     *                         rebalanced approximately equally across the
     *                         cluster. Note that for clusters with large
     *                         amounts of unsharded data, this data transfer
     *                         could be time consuming and result in delayed
     *                         query responses.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#AGGRESSIVENESS AGGRESSIVENESS}:
     *                         Influences how much data is moved at a time
     *                         during rebalance.  A higher {@link
     *                         Options#AGGRESSIVENESS AGGRESSIVENESS} will
     *                         complete the rebalance faster.  A lower {@link
     *                         Options#AGGRESSIVENESS AGGRESSIVENESS} will take
     *                         longer but allow for better interleaving between
     *                         the rebalance and other queries. Valid values
     *                         are constants from 1 (lowest) to 10 (highest).
     *                         The default value is '10'.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public AdminRemoveRanksRequest(List<String> ranks, Map<String, String> options) {
        this.ranks = (ranks == null) ? new ArrayList<String>() : ranks;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Each array value designates one or more ranks to remove from the
     * cluster. Values can be formatted as 'rankN' for a specific rank, 'hostN'
     * (from the gpudb.conf file) to remove all ranks on that host, or the host
     * IP address (hostN.address from the gpub.conf file) which also removes
     * all ranks on that host. Rank 0 (the head rank) cannot be removed (but
     * can be moved to another host using {@link
     * com.gpudb.GPUdb#adminSwitchover(AdminSwitchoverRequest)
     * GPUdb.adminSwitchover}). At least one worker rank must be left in the
     * cluster after the operation.
     *
     * @return The current value of {@code ranks}.
     */
    public List<String> getRanks() {
        return ranks;
    }

    /**
     * Each array value designates one or more ranks to remove from the
     * cluster. Values can be formatted as 'rankN' for a specific rank, 'hostN'
     * (from the gpudb.conf file) to remove all ranks on that host, or the host
     * IP address (hostN.address from the gpub.conf file) which also removes
     * all ranks on that host. Rank 0 (the head rank) cannot be removed (but
     * can be moved to another host using {@link
     * com.gpudb.GPUdb#adminSwitchover(AdminSwitchoverRequest)
     * GPUdb.adminSwitchover}). At least one worker rank must be left in the
     * cluster after the operation.
     *
     * @param ranks  The new value for {@code ranks}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminRemoveRanksRequest setRanks(List<String> ranks) {
        this.ranks = (ranks == null) ? new ArrayList<String>() : ranks;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#REBALANCE_SHARDED_DATA REBALANCE_SHARDED_DATA}:
     *         If {@link Options#TRUE TRUE}, <a
     *         href="../../../../../../concepts/tables/#sharding"
     *         target="_top">sharded data</a> will be rebalanced approximately
     *         equally across the cluster. Note that for clusters with large
     *         amounts of sharded data, this data transfer could be time
     *         consuming and result in delayed query responses.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#REBALANCE_UNSHARDED_DATA
     *         REBALANCE_UNSHARDED_DATA}: If {@link Options#TRUE TRUE},
     *         unsharded data (a.k.a. <a
     *         href="../../../../../../concepts/tables/#random-sharding"
     *         target="_top">randomly-sharded</a>) will be rebalanced
     *         approximately equally across the cluster. Note that for clusters
     *         with large amounts of unsharded data, this data transfer could
     *         be time consuming and result in delayed query responses.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#AGGRESSIVENESS AGGRESSIVENESS}: Influences how
     *         much data is moved at a time during rebalance.  A higher {@link
     *         Options#AGGRESSIVENESS AGGRESSIVENESS} will complete the
     *         rebalance faster.  A lower {@link Options#AGGRESSIVENESS
     *         AGGRESSIVENESS} will take longer but allow for better
     *         interleaving between the rebalance and other queries. Valid
     *         values are constants from 1 (lowest) to 10 (highest). The
     *         default value is '10'.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#REBALANCE_SHARDED_DATA REBALANCE_SHARDED_DATA}:
     *         If {@link Options#TRUE TRUE}, <a
     *         href="../../../../../../concepts/tables/#sharding"
     *         target="_top">sharded data</a> will be rebalanced approximately
     *         equally across the cluster. Note that for clusters with large
     *         amounts of sharded data, this data transfer could be time
     *         consuming and result in delayed query responses.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#REBALANCE_UNSHARDED_DATA
     *         REBALANCE_UNSHARDED_DATA}: If {@link Options#TRUE TRUE},
     *         unsharded data (a.k.a. <a
     *         href="../../../../../../concepts/tables/#random-sharding"
     *         target="_top">randomly-sharded</a>) will be rebalanced
     *         approximately equally across the cluster. Note that for clusters
     *         with large amounts of unsharded data, this data transfer could
     *         be time consuming and result in delayed query responses.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#AGGRESSIVENESS AGGRESSIVENESS}: Influences how
     *         much data is moved at a time during rebalance.  A higher {@link
     *         Options#AGGRESSIVENESS AGGRESSIVENESS} will complete the
     *         rebalance faster.  A lower {@link Options#AGGRESSIVENESS
     *         AGGRESSIVENESS} will take longer but allow for better
     *         interleaving between the rebalance and other queries. Valid
     *         values are constants from 1 (lowest) to 10 (highest). The
     *         default value is '10'.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminRemoveRanksRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.ranks;

            case 1:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.ranks = (List<String>)value;
                break;

            case 1:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AdminRemoveRanksRequest that = (AdminRemoveRanksRequest)obj;

        return ( this.ranks.equals( that.ranks )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "ranks" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.ranks ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.ranks.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
