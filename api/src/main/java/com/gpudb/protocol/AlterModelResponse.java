/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

public class AlterModelResponse implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AlterModelResponse")
            .namespace("com.gpudb")
            .fields()
                .name("modelName").type().stringType().noDefault()
                .name("action").type().stringType().noDefault()
                .name("value").type().stringType().noDefault()
                .name("info").type().map().values().stringType().noDefault()
            .endRecord();

    public static Schema getClassSchema() {
        return schema$;
    }

    private String modelName;
    private String action;
    private String value;
    private Map<String, String> info;

    public AlterModelResponse() {
    }

    public String getModelName() {
        return modelName;
    }

    public AlterModelResponse setModelName(String modelName) {
        this.modelName = (modelName == null) ? "" : modelName;
        return this;
    }

    public String getAction() {
        return action;
    }

    public AlterModelResponse setAction(String action) {
        this.action = (action == null) ? "" : action;
        return this;
    }

    public String getValue() {
        return value;
    }

    public AlterModelResponse setValue(String value) {
        this.value = (value == null) ? "" : value;
        return this;
    }

    public Map<String, String> getInfo() {
        return info;
    }

    public AlterModelResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    @Override
    public Schema getSchema() {
        return schema$;
    }

    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.modelName;

            case 1:
                return this.action;

            case 2:
                return this.value;

            case 3:
                return this.info;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.modelName = (String)value;
                break;

            case 1:
                this.action = (String)value;
                break;

            case 2:
                this.value = (String)value;
                break;

            case 3:
                this.info = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AlterModelResponse that = (AlterModelResponse)obj;

        return ( this.modelName.equals( that.modelName )
                 && this.action.equals( that.action )
                 && this.value.equals( that.value )
                 && this.info.equals( that.info ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "modelName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.modelName ) );
        builder.append( ", " );
        builder.append( gd.toString( "action" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.action ) );
        builder.append( ", " );
        builder.append( gd.toString( "value" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.value ) );
        builder.append( ", " );
        builder.append( gd.toString( "info" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.info ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.modelName.hashCode();
        hashCode = (31 * hashCode) + this.action.hashCode();
        hashCode = (31 * hashCode) + this.value.hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }
}
