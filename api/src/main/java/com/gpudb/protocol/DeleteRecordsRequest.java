/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#deleteRecords(DeleteRecordsRequest) GPUdb.deleteRecords}.
 * <p>
 * Deletes record(s) matching the provided criteria from the given table. The
 * record selection criteria can either be one or more  {@link
 * #getExpressions() expressions} (matching multiple records), a single record
 * identified by {@link Options#RECORD_ID RECORD_ID} options, or all records
 * when using {@link Options#DELETE_ALL_RECORDS DELETE_ALL_RECORDS}.  Note that
 * the three selection criteria are mutually exclusive.  This operation cannot
 * be run on a view.  The operation is synchronous meaning that a response will
 * not be available until the request is completely processed and all the
 * matching records are deleted.
 */
public class DeleteRecordsRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("DeleteRecordsRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("expressions").type().array().items().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link DeleteRecordsRequest} parameter
     * {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * An optional global expression to reduce the search space of the
         * {@link #getExpressions() expressions}. The default value is ''.
         */
        public static final String GLOBAL_EXPRESSION = "global_expression";

        /**
         * A record ID identifying a single record, obtained at the time of
         * {@link com.gpudb.GPUdb#insertRecords(InsertRecordsRequest) insertion
         * of the record} or by calling {@link
         * com.gpudb.GPUdb#getRecordsFromCollection(GetRecordsFromCollectionRequest)
         * GPUdb.getRecordsFromCollection} with the *return_record_ids* option.
         * This option cannot be used to delete records from <a
         * href="../../../../../../concepts/tables/#replication"
         * target="_top">replicated</a> tables.
         */
        public static final String RECORD_ID = "record_id";

        /**
         * If set to {@link Options#TRUE TRUE}, all records in the table will
         * be deleted. If set to {@link Options#FALSE FALSE}, then the option
         * is effectively ignored.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String DELETE_ALL_RECORDS = "delete_all_records";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private Options() {  }
    }

    private String tableName;
    private List<String> expressions;
    private Map<String, String> options;

    /**
     * Constructs a DeleteRecordsRequest object with default parameters.
     */
    public DeleteRecordsRequest() {
        tableName = "";
        expressions = new ArrayList<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a DeleteRecordsRequest object with the specified parameters.
     *
     * @param tableName  Name of the table from which to delete records, in
     *                   [schema_name.]table_name format, using standard <a
     *                   href="../../../../../../concepts/tables/#table-name-resolution"
     *                   target="_top">name resolution rules</a>. Must contain
     *                   the name of an existing table; not applicable to
     *                   views.
     * @param expressions  A list of the actual predicates, one for each
     *                     select; format should follow the guidelines provided
     *                     <a href="../../../../../../concepts/expressions/"
     *                     target="_top">here</a>. Specifying one or more
     *                     {@code expressions} is mutually exclusive to
     *                     specifying {@link Options#RECORD_ID RECORD_ID} in
     *                     the {@code options}.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#GLOBAL_EXPRESSION
     *                         GLOBAL_EXPRESSION}: An optional global
     *                         expression to reduce the search space of the
     *                         {@code expressions}. The default value is ''.
     *                     <li>{@link Options#RECORD_ID RECORD_ID}: A record ID
     *                         identifying a single record, obtained at the
     *                         time of {@link
     *                         com.gpudb.GPUdb#insertRecords(InsertRecordsRequest)
     *                         insertion of the record} or by calling {@link
     *                         com.gpudb.GPUdb#getRecordsFromCollection(GetRecordsFromCollectionRequest)
     *                         GPUdb.getRecordsFromCollection} with the
     *                         *return_record_ids* option. This option cannot
     *                         be used to delete records from <a
     *                         href="../../../../../../concepts/tables/#replication"
     *                         target="_top">replicated</a> tables.
     *                     <li>{@link Options#DELETE_ALL_RECORDS
     *                         DELETE_ALL_RECORDS}: If set to {@link
     *                         Options#TRUE TRUE}, all records in the table
     *                         will be deleted. If set to {@link Options#FALSE
     *                         FALSE}, then the option is effectively ignored.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public DeleteRecordsRequest(String tableName, List<String> expressions, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.expressions = (expressions == null) ? new ArrayList<String>() : expressions;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of the table from which to delete records, in
     * [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>. Must contain the name of an
     * existing table; not applicable to views.
     *
     * @return The current value of {@code tableName}.
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * Name of the table from which to delete records, in
     * [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>. Must contain the name of an
     * existing table; not applicable to views.
     *
     * @param tableName  The new value for {@code tableName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public DeleteRecordsRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * A list of the actual predicates, one for each select; format should
     * follow the guidelines provided <a
     * href="../../../../../../concepts/expressions/" target="_top">here</a>.
     * Specifying one or more {@link #getExpressions() expressions} is mutually
     * exclusive to specifying {@link Options#RECORD_ID RECORD_ID} in the
     * {@link #getOptions() options}.
     *
     * @return The current value of {@code expressions}.
     */
    public List<String> getExpressions() {
        return expressions;
    }

    /**
     * A list of the actual predicates, one for each select; format should
     * follow the guidelines provided <a
     * href="../../../../../../concepts/expressions/" target="_top">here</a>.
     * Specifying one or more {@link #getExpressions() expressions} is mutually
     * exclusive to specifying {@link Options#RECORD_ID RECORD_ID} in the
     * {@link #getOptions() options}.
     *
     * @param expressions  The new value for {@code expressions}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public DeleteRecordsRequest setExpressions(List<String> expressions) {
        this.expressions = (expressions == null) ? new ArrayList<String>() : expressions;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#GLOBAL_EXPRESSION GLOBAL_EXPRESSION}: An optional
     *         global expression to reduce the search space of the {@link
     *         #getExpressions() expressions}. The default value is ''.
     *     <li>{@link Options#RECORD_ID RECORD_ID}: A record ID identifying a
     *         single record, obtained at the time of {@link
     *         com.gpudb.GPUdb#insertRecords(InsertRecordsRequest) insertion of
     *         the record} or by calling {@link
     *         com.gpudb.GPUdb#getRecordsFromCollection(GetRecordsFromCollectionRequest)
     *         GPUdb.getRecordsFromCollection} with the *return_record_ids*
     *         option. This option cannot be used to delete records from <a
     *         href="../../../../../../concepts/tables/#replication"
     *         target="_top">replicated</a> tables.
     *     <li>{@link Options#DELETE_ALL_RECORDS DELETE_ALL_RECORDS}: If set to
     *         {@link Options#TRUE TRUE}, all records in the table will be
     *         deleted. If set to {@link Options#FALSE FALSE}, then the option
     *         is effectively ignored.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#GLOBAL_EXPRESSION GLOBAL_EXPRESSION}: An optional
     *         global expression to reduce the search space of the {@link
     *         #getExpressions() expressions}. The default value is ''.
     *     <li>{@link Options#RECORD_ID RECORD_ID}: A record ID identifying a
     *         single record, obtained at the time of {@link
     *         com.gpudb.GPUdb#insertRecords(InsertRecordsRequest) insertion of
     *         the record} or by calling {@link
     *         com.gpudb.GPUdb#getRecordsFromCollection(GetRecordsFromCollectionRequest)
     *         GPUdb.getRecordsFromCollection} with the *return_record_ids*
     *         option. This option cannot be used to delete records from <a
     *         href="../../../../../../concepts/tables/#replication"
     *         target="_top">replicated</a> tables.
     *     <li>{@link Options#DELETE_ALL_RECORDS DELETE_ALL_RECORDS}: If set to
     *         {@link Options#TRUE TRUE}, all records in the table will be
     *         deleted. If set to {@link Options#FALSE FALSE}, then the option
     *         is effectively ignored.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public DeleteRecordsRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.expressions;

            case 2:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.expressions = (List<String>)value;
                break;

            case 2:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        DeleteRecordsRequest that = (DeleteRecordsRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.expressions.equals( that.expressions )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "expressions" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.expressions ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.expressions.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
