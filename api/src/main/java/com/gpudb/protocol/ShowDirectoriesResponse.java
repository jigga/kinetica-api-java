/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of results returned by {@link
 * com.gpudb.GPUdb#showDirectories(ShowDirectoriesRequest)
 * GPUdb.showDirectories}.
 */
public class ShowDirectoriesResponse implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("ShowDirectoriesResponse")
            .namespace("com.gpudb")
            .fields()
                .name("directories").type().array().items().stringType().noDefault()
                .name("users").type().array().items().stringType().noDefault()
                .name("creationTimes").type().array().items().longType().noDefault()
                .name("dataUsages").type().array().items().longType().noDefault()
                .name("dataLimits").type().array().items().longType().noDefault()
                .name("permissions").type().array().items().stringType().noDefault()
                .name("info").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    private List<String> directories;
    private List<String> users;
    private List<Long> creationTimes;
    private List<Long> dataUsages;
    private List<Long> dataLimits;
    private List<String> permissions;
    private Map<String, String> info;

    /**
     * Constructs a ShowDirectoriesResponse object with default parameters.
     */
    public ShowDirectoriesResponse() {
    }

    /**
     * KiFS directory names
     *
     * @return The current value of {@code directories}.
     */
    public List<String> getDirectories() {
        return directories;
    }

    /**
     * KiFS directory names
     *
     * @param directories  The new value for {@code directories}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowDirectoriesResponse setDirectories(List<String> directories) {
        this.directories = (directories == null) ? new ArrayList<String>() : directories;
        return this;
    }

    /**
     * User that created each directory for the respective directories in
     * {@link #getDirectories() directories}
     *
     * @return The current value of {@code users}.
     */
    public List<String> getUsers() {
        return users;
    }

    /**
     * User that created each directory for the respective directories in
     * {@link #getDirectories() directories}
     *
     * @param users  The new value for {@code users}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowDirectoriesResponse setUsers(List<String> users) {
        this.users = (users == null) ? new ArrayList<String>() : users;
        return this;
    }

    /**
     * The creation time for each directory in milliseconds since epoch, for
     * the respective directories in {@link #getDirectories() directories}
     *
     * @return The current value of {@code creationTimes}.
     */
    public List<Long> getCreationTimes() {
        return creationTimes;
    }

    /**
     * The creation time for each directory in milliseconds since epoch, for
     * the respective directories in {@link #getDirectories() directories}
     *
     * @param creationTimes  The new value for {@code creationTimes}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowDirectoriesResponse setCreationTimes(List<Long> creationTimes) {
        this.creationTimes = (creationTimes == null) ? new ArrayList<Long>() : creationTimes;
        return this;
    }

    /**
     * The data usage each directory in bytes, for the respective directories
     * in {@link #getDirectories() directories}
     *
     * @return The current value of {@code dataUsages}.
     */
    public List<Long> getDataUsages() {
        return dataUsages;
    }

    /**
     * The data usage each directory in bytes, for the respective directories
     * in {@link #getDirectories() directories}
     *
     * @param dataUsages  The new value for {@code dataUsages}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowDirectoriesResponse setDataUsages(List<Long> dataUsages) {
        this.dataUsages = (dataUsages == null) ? new ArrayList<Long>() : dataUsages;
        return this;
    }

    /**
     * The data limit for each directory in bytes, for the respective
     * directories in {@link #getDirectories() directories}
     *
     * @return The current value of {@code dataLimits}.
     */
    public List<Long> getDataLimits() {
        return dataLimits;
    }

    /**
     * The data limit for each directory in bytes, for the respective
     * directories in {@link #getDirectories() directories}
     *
     * @param dataLimits  The new value for {@code dataLimits}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowDirectoriesResponse setDataLimits(List<Long> dataLimits) {
        this.dataLimits = (dataLimits == null) ? new ArrayList<Long>() : dataLimits;
        return this;
    }

    /**
     * Highest level of permission the calling user has for the respective
     * directories in {@link #getDirectories() directories}. Will be empty if
     * no permissions. If a user has been granted both read and write
     * permissions, 'directory_write' will be listed.
     *
     * @return The current value of {@code permissions}.
     */
    public List<String> getPermissions() {
        return permissions;
    }

    /**
     * Highest level of permission the calling user has for the respective
     * directories in {@link #getDirectories() directories}. Will be empty if
     * no permissions. If a user has been granted both read and write
     * permissions, 'directory_write' will be listed.
     *
     * @param permissions  The new value for {@code permissions}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowDirectoriesResponse setPermissions(List<String> permissions) {
        this.permissions = (permissions == null) ? new ArrayList<String>() : permissions;
        return this;
    }

    /**
     * Additional information.
     *
     * @return The current value of {@code info}.
     */
    public Map<String, String> getInfo() {
        return info;
    }

    /**
     * Additional information.
     *
     * @param info  The new value for {@code info}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowDirectoriesResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.directories;

            case 1:
                return this.users;

            case 2:
                return this.creationTimes;

            case 3:
                return this.dataUsages;

            case 4:
                return this.dataLimits;

            case 5:
                return this.permissions;

            case 6:
                return this.info;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.directories = (List<String>)value;
                break;

            case 1:
                this.users = (List<String>)value;
                break;

            case 2:
                this.creationTimes = (List<Long>)value;
                break;

            case 3:
                this.dataUsages = (List<Long>)value;
                break;

            case 4:
                this.dataLimits = (List<Long>)value;
                break;

            case 5:
                this.permissions = (List<String>)value;
                break;

            case 6:
                this.info = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        ShowDirectoriesResponse that = (ShowDirectoriesResponse)obj;

        return ( this.directories.equals( that.directories )
                 && this.users.equals( that.users )
                 && this.creationTimes.equals( that.creationTimes )
                 && this.dataUsages.equals( that.dataUsages )
                 && this.dataLimits.equals( that.dataLimits )
                 && this.permissions.equals( that.permissions )
                 && this.info.equals( that.info ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "directories" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.directories ) );
        builder.append( ", " );
        builder.append( gd.toString( "users" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.users ) );
        builder.append( ", " );
        builder.append( gd.toString( "creationTimes" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.creationTimes ) );
        builder.append( ", " );
        builder.append( gd.toString( "dataUsages" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.dataUsages ) );
        builder.append( ", " );
        builder.append( gd.toString( "dataLimits" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.dataLimits ) );
        builder.append( ", " );
        builder.append( gd.toString( "permissions" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.permissions ) );
        builder.append( ", " );
        builder.append( gd.toString( "info" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.info ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.directories.hashCode();
        hashCode = (31 * hashCode) + this.users.hashCode();
        hashCode = (31 * hashCode) + this.creationTimes.hashCode();
        hashCode = (31 * hashCode) + this.dataUsages.hashCode();
        hashCode = (31 * hashCode) + this.dataLimits.hashCode();
        hashCode = (31 * hashCode) + this.permissions.hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }
}
