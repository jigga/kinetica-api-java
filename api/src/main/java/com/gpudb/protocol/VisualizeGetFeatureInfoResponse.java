
/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;


import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


public class VisualizeGetFeatureInfoResponse implements IndexedRecord {

    private static final Schema schema$ = SchemaBuilder
            .record("VisualizeGetFeatureInfoResponse")
            .namespace("com.gpudb")
            .fields()
                .name("tableNames").type().array().items().stringType().noDefault()
                .name("typeSchemas").type().array().items().stringType().noDefault()
                .name("recordsBinary").type().array().items().bytesType().noDefault()
                .name("recordsJson").type().array().items().stringType().noDefault()
                .name("geojsonEncodedResponse").type().stringType().noDefault()
                .name("textEncodedResponse").type().stringType().noDefault()
                .name("info").type().map().values().stringType().noDefault()
            .endRecord();


    public static Schema getClassSchema() {
        return schema$;
    }


    private List<String> tableNames;
    private List<String> typeSchemas;
    private List<ByteBuffer> recordsBinary;
    private List<String> recordsJson;
    private String geojsonEncodedResponse;
    private String textEncodedResponse;
    private Map<String, String> info;


    public VisualizeGetFeatureInfoResponse() {
    }

    public List<String> getTableNames() {
        return tableNames;
    }

    public VisualizeGetFeatureInfoResponse setTableNames(List<String> tableNames) {
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        return this;
    }

    public List<String> getTypeSchemas() {
        return typeSchemas;
    }

    public VisualizeGetFeatureInfoResponse setTypeSchemas(List<String> typeSchemas) {
        this.typeSchemas = (typeSchemas == null) ? new ArrayList<String>() : typeSchemas;
        return this;
    }

    public List<ByteBuffer> getRecordsBinary() {
        return recordsBinary;
    }

    public VisualizeGetFeatureInfoResponse setRecordsBinary(List<ByteBuffer> recordsBinary) {
        this.recordsBinary = (recordsBinary == null) ? new ArrayList<ByteBuffer>() : recordsBinary;
        return this;
    }

    public List<String> getRecordsJson() {
        return recordsJson;
    }

    public VisualizeGetFeatureInfoResponse setRecordsJson(List<String> recordsJson) {
        this.recordsJson = (recordsJson == null) ? new ArrayList<String>() : recordsJson;
        return this;
    }

    public String getGeojsonEncodedResponse() {
        return geojsonEncodedResponse;
    }

    public VisualizeGetFeatureInfoResponse setGeojsonEncodedResponse(String geojsonEncodedResponse) {
        this.geojsonEncodedResponse = (geojsonEncodedResponse == null) ? "" : geojsonEncodedResponse;
        return this;
    }

    public String getTextEncodedResponse() {
        return textEncodedResponse;
    }

    public VisualizeGetFeatureInfoResponse setTextEncodedResponse(String textEncodedResponse) {
        this.textEncodedResponse = (textEncodedResponse == null) ? "" : textEncodedResponse;
        return this;
    }

    public Map<String, String> getInfo() {
        return info;
    }

    public VisualizeGetFeatureInfoResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    @Override
    public Schema getSchema() {
        return schema$;
    }

    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableNames;

            case 1:
                return this.typeSchemas;

            case 2:
                return this.recordsBinary;

            case 3:
                return this.recordsJson;

            case 4:
                return this.geojsonEncodedResponse;

            case 5:
                return this.textEncodedResponse;

            case 6:
                return this.info;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableNames = (List<String>)value;
                break;

            case 1:
                this.typeSchemas = (List<String>)value;
                break;

            case 2:
                this.recordsBinary = (List<ByteBuffer>)value;
                break;

            case 3:
                this.recordsJson = (List<String>)value;
                break;

            case 4:
                this.geojsonEncodedResponse = (String)value;
                break;

            case 5:
                this.textEncodedResponse = (String)value;
                break;

            case 6:
                this.info = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }


    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        VisualizeGetFeatureInfoResponse that = (VisualizeGetFeatureInfoResponse)obj;

        return ( this.tableNames.equals( that.tableNames )
                 && this.typeSchemas.equals( that.typeSchemas )
                 && this.recordsBinary.equals( that.recordsBinary )
                 && this.recordsJson.equals( that.recordsJson )
                 && this.geojsonEncodedResponse.equals( that.geojsonEncodedResponse )
                 && this.textEncodedResponse.equals( that.textEncodedResponse )
                 && this.info.equals( that.info ) );
    }


    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "typeSchemas" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.typeSchemas ) );
        builder.append( ", " );
        builder.append( gd.toString( "recordsBinary" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.recordsBinary ) );
        builder.append( ", " );
        builder.append( gd.toString( "recordsJson" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.recordsJson ) );
        builder.append( ", " );
        builder.append( gd.toString( "geojsonEncodedResponse" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.geojsonEncodedResponse ) );
        builder.append( ", " );
        builder.append( gd.toString( "textEncodedResponse" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.textEncodedResponse ) );
        builder.append( ", " );
        builder.append( gd.toString( "info" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.info ) );
        builder.append( "}" );

        return builder.toString();
    }


    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableNames.hashCode();
        hashCode = (31 * hashCode) + this.typeSchemas.hashCode();
        hashCode = (31 * hashCode) + this.recordsBinary.hashCode();
        hashCode = (31 * hashCode) + this.recordsJson.hashCode();
        hashCode = (31 * hashCode) + this.geojsonEncodedResponse.hashCode();
        hashCode = (31 * hashCode) + this.textEncodedResponse.hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }


}
