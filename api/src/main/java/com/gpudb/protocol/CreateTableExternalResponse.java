/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of results returned by {@link
 * com.gpudb.GPUdb#createTableExternal(CreateTableExternalRequest)
 * GPUdb.createTableExternal}.
 */
public class CreateTableExternalResponse implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("CreateTableExternalResponse")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("typeId").type().stringType().noDefault()
                .name("typeDefinition").type().stringType().noDefault()
                .name("typeLabel").type().stringType().noDefault()
                .name("typeProperties").type().map().values().array().items().stringType().noDefault()
                .name("countInserted").type().longType().noDefault()
                .name("countSkipped").type().longType().noDefault()
                .name("countUpdated").type().longType().noDefault()
                .name("info").type().map().values().stringType().noDefault()
                .name("files").type().array().items().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    private String tableName;
    private String typeId;
    private String typeDefinition;
    private String typeLabel;
    private Map<String, List<String>> typeProperties;
    private long countInserted;
    private long countSkipped;
    private long countUpdated;
    private Map<String, String> info;
    private List<String> files;

    /**
     * Constructs a CreateTableExternalResponse object with default parameters.
     */
    public CreateTableExternalResponse() {
    }

    /**
     * Value of {@link
     * com.gpudb.protocol.CreateTableExternalRequest#getTableName() tableName}.
     *
     * @return The current value of {@code tableName}.
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * Value of {@link
     * com.gpudb.protocol.CreateTableExternalRequest#getTableName() tableName}.
     *
     * @param tableName  The new value for {@code tableName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTableExternalResponse setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * ID of the currently registered table structure <a
     * href="../../../../../../concepts/types/" target="_top">type</a> for this
     * external table
     *
     * @return The current value of {@code typeId}.
     */
    public String getTypeId() {
        return typeId;
    }

    /**
     * ID of the currently registered table structure <a
     * href="../../../../../../concepts/types/" target="_top">type</a> for this
     * external table
     *
     * @param typeId  The new value for {@code typeId}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTableExternalResponse setTypeId(String typeId) {
        this.typeId = (typeId == null) ? "" : typeId;
        return this;
    }

    /**
     * A JSON string describing the columns of the created external table
     *
     * @return The current value of {@code typeDefinition}.
     */
    public String getTypeDefinition() {
        return typeDefinition;
    }

    /**
     * A JSON string describing the columns of the created external table
     *
     * @param typeDefinition  The new value for {@code typeDefinition}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTableExternalResponse setTypeDefinition(String typeDefinition) {
        this.typeDefinition = (typeDefinition == null) ? "" : typeDefinition;
        return this;
    }

    /**
     * The user-defined description associated with the table's structure
     *
     * @return The current value of {@code typeLabel}.
     */
    public String getTypeLabel() {
        return typeLabel;
    }

    /**
     * The user-defined description associated with the table's structure
     *
     * @param typeLabel  The new value for {@code typeLabel}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTableExternalResponse setTypeLabel(String typeLabel) {
        this.typeLabel = (typeLabel == null) ? "" : typeLabel;
        return this;
    }

    /**
     * A mapping of each external table column name to an array of column
     * properties associated with that column
     *
     * @return The current value of {@code typeProperties}.
     */
    public Map<String, List<String>> getTypeProperties() {
        return typeProperties;
    }

    /**
     * A mapping of each external table column name to an array of column
     * properties associated with that column
     *
     * @param typeProperties  The new value for {@code typeProperties}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTableExternalResponse setTypeProperties(Map<String, List<String>> typeProperties) {
        this.typeProperties = (typeProperties == null) ? new LinkedHashMap<String, List<String>>() : typeProperties;
        return this;
    }

    /**
     * Number of records inserted into the external table.
     *
     * @return The current value of {@code countInserted}.
     */
    public long getCountInserted() {
        return countInserted;
    }

    /**
     * Number of records inserted into the external table.
     *
     * @param countInserted  The new value for {@code countInserted}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTableExternalResponse setCountInserted(long countInserted) {
        this.countInserted = countInserted;
        return this;
    }

    /**
     * Number of records skipped, when not running in {@link
     * com.gpudb.protocol.CreateTableExternalRequest.Options#ABORT ABORT} error
     * handling mode.
     *
     * @return The current value of {@code countSkipped}.
     */
    public long getCountSkipped() {
        return countSkipped;
    }

    /**
     * Number of records skipped, when not running in {@link
     * com.gpudb.protocol.CreateTableExternalRequest.Options#ABORT ABORT} error
     * handling mode.
     *
     * @param countSkipped  The new value for {@code countSkipped}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTableExternalResponse setCountSkipped(long countSkipped) {
        this.countSkipped = countSkipped;
        return this;
    }

    /**
     * [Not yet implemented]  Number of records updated within the external
     * table.
     *
     * @return The current value of {@code countUpdated}.
     */
    public long getCountUpdated() {
        return countUpdated;
    }

    /**
     * [Not yet implemented]  Number of records updated within the external
     * table.
     *
     * @param countUpdated  The new value for {@code countUpdated}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTableExternalResponse setCountUpdated(long countUpdated) {
        this.countUpdated = countUpdated;
        return this;
    }

    /**
     * Additional information.
     *
     * @return The current value of {@code info}.
     */
    public Map<String, String> getInfo() {
        return info;
    }

    /**
     * Additional information.
     *
     * @param info  The new value for {@code info}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTableExternalResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    /**
     * @return The current value of {@code files}.
     */
    public List<String> getFiles() {
        return files;
    }

    /**
     * @param files  The new value for {@code files}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateTableExternalResponse setFiles(List<String> files) {
        this.files = (files == null) ? new ArrayList<String>() : files;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.typeId;

            case 2:
                return this.typeDefinition;

            case 3:
                return this.typeLabel;

            case 4:
                return this.typeProperties;

            case 5:
                return this.countInserted;

            case 6:
                return this.countSkipped;

            case 7:
                return this.countUpdated;

            case 8:
                return this.info;

            case 9:
                return this.files;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.typeId = (String)value;
                break;

            case 2:
                this.typeDefinition = (String)value;
                break;

            case 3:
                this.typeLabel = (String)value;
                break;

            case 4:
                this.typeProperties = (Map<String, List<String>>)value;
                break;

            case 5:
                this.countInserted = (Long)value;
                break;

            case 6:
                this.countSkipped = (Long)value;
                break;

            case 7:
                this.countUpdated = (Long)value;
                break;

            case 8:
                this.info = (Map<String, String>)value;
                break;

            case 9:
                this.files = (List<String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        CreateTableExternalResponse that = (CreateTableExternalResponse)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.typeId.equals( that.typeId )
                 && this.typeDefinition.equals( that.typeDefinition )
                 && this.typeLabel.equals( that.typeLabel )
                 && this.typeProperties.equals( that.typeProperties )
                 && ( this.countInserted == that.countInserted )
                 && ( this.countSkipped == that.countSkipped )
                 && ( this.countUpdated == that.countUpdated )
                 && this.info.equals( that.info )
                 && this.files.equals( that.files ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "typeId" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.typeId ) );
        builder.append( ", " );
        builder.append( gd.toString( "typeDefinition" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.typeDefinition ) );
        builder.append( ", " );
        builder.append( gd.toString( "typeLabel" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.typeLabel ) );
        builder.append( ", " );
        builder.append( gd.toString( "typeProperties" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.typeProperties ) );
        builder.append( ", " );
        builder.append( gd.toString( "countInserted" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.countInserted ) );
        builder.append( ", " );
        builder.append( gd.toString( "countSkipped" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.countSkipped ) );
        builder.append( ", " );
        builder.append( gd.toString( "countUpdated" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.countUpdated ) );
        builder.append( ", " );
        builder.append( gd.toString( "info" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.info ) );
        builder.append( ", " );
        builder.append( gd.toString( "files" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.files ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.typeId.hashCode();
        hashCode = (31 * hashCode) + this.typeDefinition.hashCode();
        hashCode = (31 * hashCode) + this.typeLabel.hashCode();
        hashCode = (31 * hashCode) + this.typeProperties.hashCode();
        hashCode = (31 * hashCode) + ((Long)this.countInserted).hashCode();
        hashCode = (31 * hashCode) + ((Long)this.countSkipped).hashCode();
        hashCode = (31 * hashCode) + ((Long)this.countUpdated).hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        hashCode = (31 * hashCode) + this.files.hashCode();
        return hashCode;
    }
}
