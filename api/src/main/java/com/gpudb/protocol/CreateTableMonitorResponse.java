/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of results returned by {@link
 * com.gpudb.GPUdb#createTableMonitor(CreateTableMonitorRequest)}.
 */
public class CreateTableMonitorResponse implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("CreateTableMonitorResponse")
            .namespace("com.gpudb")
            .fields()
                .name("topicId").type().stringType().noDefault()
                .name("tableName").type().stringType().noDefault()
                .name("typeSchema").type().stringType().noDefault()
                .name("info").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Additional information.
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.CreateTableMonitorResponse.Info#INSERT_TOPIC_ID
     * INSERT_TOPIC_ID}: The topic id for 'insert' {@code event} in {@code
     * options}
     *         <li> {@link
     * com.gpudb.protocol.CreateTableMonitorResponse.Info#UPDATE_TOPIC_ID
     * UPDATE_TOPIC_ID}: The topic id for 'update' {@code event} in {@code
     * options}
     *         <li> {@link
     * com.gpudb.protocol.CreateTableMonitorResponse.Info#DELETE_TOPIC_ID
     * DELETE_TOPIC_ID}: The topic id for 'delete' {@code event} in {@code
     * options}
     *         <li> {@link
     * com.gpudb.protocol.CreateTableMonitorResponse.Info#INSERT_TYPE_SCHEMA
     * INSERT_TYPE_SCHEMA}: The JSON Avro schema of the table in {@code
     * tableName}
     *         <li> {@link
     * com.gpudb.protocol.CreateTableMonitorResponse.Info#UPDATE_TYPE_SCHEMA
     * UPDATE_TYPE_SCHEMA}: The JSON Avro schema for 'update' events
     *         <li> {@link
     * com.gpudb.protocol.CreateTableMonitorResponse.Info#DELETE_TYPE_SCHEMA
     * DELETE_TYPE_SCHEMA}: The JSON Avro schema for 'delete' events
     * </ul>
     * The default value is an empty {@link Map}.
     * A set of string constants for the parameter {@code info}.
     */
    public static final class Info {

        /**
         * The topic id for 'insert' {@code event} in {@code options}
         */
        public static final String INSERT_TOPIC_ID = "insert_topic_id";

        /**
         * The topic id for 'update' {@code event} in {@code options}
         */
        public static final String UPDATE_TOPIC_ID = "update_topic_id";

        /**
         * The topic id for 'delete' {@code event} in {@code options}
         */
        public static final String DELETE_TOPIC_ID = "delete_topic_id";

        /**
         * The JSON Avro schema of the table in {@code tableName}
         */
        public static final String INSERT_TYPE_SCHEMA = "insert_type_schema";

        /**
         * The JSON Avro schema for 'update' events
         */
        public static final String UPDATE_TYPE_SCHEMA = "update_type_schema";

        /**
         * The JSON Avro schema for 'delete' events
         */
        public static final String DELETE_TYPE_SCHEMA = "delete_type_schema";

        private Info() {  }
    }

    private String topicId;
    private String tableName;
    private String typeSchema;
    private Map<String, String> info;


    /**
     * Constructs a CreateTableMonitorResponse object with default parameters.
     */
    public CreateTableMonitorResponse() {
    }

    /**
     * 
     * @return The ZMQ topic ID to subscribe to for table events.
     * 
     */
    public String getTopicId() {
        return topicId;
    }

    /**
     * 
     * @param topicId  The ZMQ topic ID to subscribe to for table events.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateTableMonitorResponse setTopicId(String topicId) {
        this.topicId = (topicId == null) ? "" : topicId;
        return this;
    }

    /**
     * 
     * @return Value of {@code tableName}.
     * 
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * 
     * @param tableName  Value of {@code tableName}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateTableMonitorResponse setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * 
     * @return JSON Avro schema of the table, for use in decoding published
     *         records.
     * 
     */
    public String getTypeSchema() {
        return typeSchema;
    }

    /**
     * 
     * @param typeSchema  JSON Avro schema of the table, for use in decoding
     *                    published records.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateTableMonitorResponse setTypeSchema(String typeSchema) {
        this.typeSchema = (typeSchema == null) ? "" : typeSchema;
        return this;
    }

    /**
     * 
     * @return Additional information.
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.CreateTableMonitorResponse.Info#INSERT_TOPIC_ID
     *         INSERT_TOPIC_ID}: The topic id for 'insert' {@code event} in
     *         {@code options}
     *                 <li> {@link
     *         com.gpudb.protocol.CreateTableMonitorResponse.Info#UPDATE_TOPIC_ID
     *         UPDATE_TOPIC_ID}: The topic id for 'update' {@code event} in
     *         {@code options}
     *                 <li> {@link
     *         com.gpudb.protocol.CreateTableMonitorResponse.Info#DELETE_TOPIC_ID
     *         DELETE_TOPIC_ID}: The topic id for 'delete' {@code event} in
     *         {@code options}
     *                 <li> {@link
     *         com.gpudb.protocol.CreateTableMonitorResponse.Info#INSERT_TYPE_SCHEMA
     *         INSERT_TYPE_SCHEMA}: The JSON Avro schema of the table in {@code
     *         tableName}
     *                 <li> {@link
     *         com.gpudb.protocol.CreateTableMonitorResponse.Info#UPDATE_TYPE_SCHEMA
     *         UPDATE_TYPE_SCHEMA}: The JSON Avro schema for 'update' events
     *                 <li> {@link
     *         com.gpudb.protocol.CreateTableMonitorResponse.Info#DELETE_TYPE_SCHEMA
     *         DELETE_TYPE_SCHEMA}: The JSON Avro schema for 'delete' events
     *         </ul>
     *         The default value is an empty {@link Map}.
     * 
     */
    public Map<String, String> getInfo() {
        return info;
    }

    /**
     * 
     * @param info  Additional information.
     *              <ul>
     *                      <li> {@link
     *              com.gpudb.protocol.CreateTableMonitorResponse.Info#INSERT_TOPIC_ID
     *              INSERT_TOPIC_ID}: The topic id for 'insert' {@code event}
     *              in {@code options}
     *                      <li> {@link
     *              com.gpudb.protocol.CreateTableMonitorResponse.Info#UPDATE_TOPIC_ID
     *              UPDATE_TOPIC_ID}: The topic id for 'update' {@code event}
     *              in {@code options}
     *                      <li> {@link
     *              com.gpudb.protocol.CreateTableMonitorResponse.Info#DELETE_TOPIC_ID
     *              DELETE_TOPIC_ID}: The topic id for 'delete' {@code event}
     *              in {@code options}
     *                      <li> {@link
     *              com.gpudb.protocol.CreateTableMonitorResponse.Info#INSERT_TYPE_SCHEMA
     *              INSERT_TYPE_SCHEMA}: The JSON Avro schema of the table in
     *              {@code tableName}
     *                      <li> {@link
     *              com.gpudb.protocol.CreateTableMonitorResponse.Info#UPDATE_TYPE_SCHEMA
     *              UPDATE_TYPE_SCHEMA}: The JSON Avro schema for 'update'
     *              events
     *                      <li> {@link
     *              com.gpudb.protocol.CreateTableMonitorResponse.Info#DELETE_TYPE_SCHEMA
     *              DELETE_TYPE_SCHEMA}: The JSON Avro schema for 'delete'
     *              events
     *              </ul>
     *              The default value is an empty {@link Map}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public CreateTableMonitorResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.topicId;

            case 1:
                return this.tableName;

            case 2:
                return this.typeSchema;

            case 3:
                return this.info;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.topicId = (String)value;
                break;

            case 1:
                this.tableName = (String)value;
                break;

            case 2:
                this.typeSchema = (String)value;
                break;

            case 3:
                this.info = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        CreateTableMonitorResponse that = (CreateTableMonitorResponse)obj;

        return ( this.topicId.equals( that.topicId )
                 && this.tableName.equals( that.tableName )
                 && this.typeSchema.equals( that.typeSchema )
                 && this.info.equals( that.info ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "topicId" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.topicId ) );
        builder.append( ", " );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "typeSchema" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.typeSchema ) );
        builder.append( ", " );
        builder.append( gd.toString( "info" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.info ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.topicId.hashCode();
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.typeSchema.hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }

}
