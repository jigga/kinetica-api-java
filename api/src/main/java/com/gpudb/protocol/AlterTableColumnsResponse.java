/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of results returned by {@link
 * com.gpudb.GPUdb#alterTableColumns(AlterTableColumnsRequest)
 * GPUdb.alterTableColumns}.
 */
public class AlterTableColumnsResponse implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AlterTableColumnsResponse")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("typeId").type().stringType().noDefault()
                .name("typeDefinition").type().stringType().noDefault()
                .name("properties").type().map().values().array().items().stringType().noDefault()
                .name("label").type().stringType().noDefault()
                .name("columnAlterations").type().array().items().map().values().stringType().noDefault()
                .name("info").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    private String tableName;
    private String typeId;
    private String typeDefinition;
    private Map<String, List<String>> properties;
    private String label;
    private List<Map<String, String>> columnAlterations;
    private Map<String, String> info;

    /**
     * Constructs an AlterTableColumnsResponse object with default parameters.
     */
    public AlterTableColumnsResponse() {
    }

    /**
     * Table on which the operation was performed.
     *
     * @return The current value of {@code tableName}.
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * Table on which the operation was performed.
     *
     * @param tableName  The new value for {@code tableName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterTableColumnsResponse setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * return the type_id (when changing a table, a new type may be created)
     *
     * @return The current value of {@code typeId}.
     */
    public String getTypeId() {
        return typeId;
    }

    /**
     * return the type_id (when changing a table, a new type may be created)
     *
     * @param typeId  The new value for {@code typeId}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterTableColumnsResponse setTypeId(String typeId) {
        this.typeId = (typeId == null) ? "" : typeId;
        return this;
    }

    /**
     * return the type_definition  (when changing a table, a new type may be
     * created)
     *
     * @return The current value of {@code typeDefinition}.
     */
    public String getTypeDefinition() {
        return typeDefinition;
    }

    /**
     * return the type_definition  (when changing a table, a new type may be
     * created)
     *
     * @param typeDefinition  The new value for {@code typeDefinition}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterTableColumnsResponse setTypeDefinition(String typeDefinition) {
        this.typeDefinition = (typeDefinition == null) ? "" : typeDefinition;
        return this;
    }

    /**
     * return the type properties  (when changing a table, a new type may be
     * created)
     *
     * @return The current value of {@code properties}.
     */
    public Map<String, List<String>> getProperties() {
        return properties;
    }

    /**
     * return the type properties  (when changing a table, a new type may be
     * created)
     *
     * @param properties  The new value for {@code properties}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterTableColumnsResponse setProperties(Map<String, List<String>> properties) {
        this.properties = (properties == null) ? new LinkedHashMap<String, List<String>>() : properties;
        return this;
    }

    /**
     * return the type label  (when changing a table, a new type may be
     * created)
     *
     * @return The current value of {@code label}.
     */
    public String getLabel() {
        return label;
    }

    /**
     * return the type label  (when changing a table, a new type may be
     * created)
     *
     * @param label  The new value for {@code label}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterTableColumnsResponse setLabel(String label) {
        this.label = (label == null) ? "" : label;
        return this;
    }

    /**
     * List of alter table add/delete/change column requests - all for the same
     * table. Each request is a map that includes 'column_name', 'action' and
     * the options specific for the action. Note that the same options as in
     * alter table requests but in the same map as the column name and the
     * action. For example:
     * [{'column_name':'col_1','action':'change_column','rename_column':'col_2'},{'column_name':'col_1','action':'add_column',
     * 'type':'int','default_value':'1'}]
     *
     * @return The current value of {@code columnAlterations}.
     */
    public List<Map<String, String>> getColumnAlterations() {
        return columnAlterations;
    }

    /**
     * List of alter table add/delete/change column requests - all for the same
     * table. Each request is a map that includes 'column_name', 'action' and
     * the options specific for the action. Note that the same options as in
     * alter table requests but in the same map as the column name and the
     * action. For example:
     * [{'column_name':'col_1','action':'change_column','rename_column':'col_2'},{'column_name':'col_1','action':'add_column',
     * 'type':'int','default_value':'1'}]
     *
     * @param columnAlterations  The new value for {@code columnAlterations}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterTableColumnsResponse setColumnAlterations(List<Map<String, String>> columnAlterations) {
        this.columnAlterations = (columnAlterations == null) ? new ArrayList<Map<String, String>>() : columnAlterations;
        return this;
    }

    /**
     * Additional information.
     *
     * @return The current value of {@code info}.
     */
    public Map<String, String> getInfo() {
        return info;
    }

    /**
     * Additional information.
     *
     * @param info  The new value for {@code info}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AlterTableColumnsResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.typeId;

            case 2:
                return this.typeDefinition;

            case 3:
                return this.properties;

            case 4:
                return this.label;

            case 5:
                return this.columnAlterations;

            case 6:
                return this.info;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.typeId = (String)value;
                break;

            case 2:
                this.typeDefinition = (String)value;
                break;

            case 3:
                this.properties = (Map<String, List<String>>)value;
                break;

            case 4:
                this.label = (String)value;
                break;

            case 5:
                this.columnAlterations = (List<Map<String, String>>)value;
                break;

            case 6:
                this.info = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AlterTableColumnsResponse that = (AlterTableColumnsResponse)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.typeId.equals( that.typeId )
                 && this.typeDefinition.equals( that.typeDefinition )
                 && this.properties.equals( that.properties )
                 && this.label.equals( that.label )
                 && this.columnAlterations.equals( that.columnAlterations )
                 && this.info.equals( that.info ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "typeId" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.typeId ) );
        builder.append( ", " );
        builder.append( gd.toString( "typeDefinition" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.typeDefinition ) );
        builder.append( ", " );
        builder.append( gd.toString( "properties" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.properties ) );
        builder.append( ", " );
        builder.append( gd.toString( "label" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.label ) );
        builder.append( ", " );
        builder.append( gd.toString( "columnAlterations" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.columnAlterations ) );
        builder.append( ", " );
        builder.append( gd.toString( "info" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.info ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.typeId.hashCode();
        hashCode = (31 * hashCode) + this.typeDefinition.hashCode();
        hashCode = (31 * hashCode) + this.properties.hashCode();
        hashCode = (31 * hashCode) + this.label.hashCode();
        hashCode = (31 * hashCode) + this.columnAlterations.hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }
}
