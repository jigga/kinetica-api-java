/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link com.gpudb.GPUdb#showGraph(ShowGraphRequest)
 * GPUdb.showGraph}.
 * <p>
 * Shows information and characteristics of graphs that exist on the graph
 * server.
 */
public class ShowGraphRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("ShowGraphRequest")
            .namespace("com.gpudb")
            .fields()
                .name("graphName").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link ShowGraphRequest} parameter
     * {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * If set to {@link Options#TRUE TRUE}, the request that was originally
         * used to create the graph is also returned as JSON.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#TRUE TRUE}.
         */
        public static final String SHOW_ORIGINAL_REQUEST = "show_original_request";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * Indicates which graph server(s) to send the request to. Default is
         * to send to get information about all the servers.
         */
        public static final String SERVER_ID = "server_id";

        private Options() {  }
    }

    private String graphName;
    private Map<String, String> options;

    /**
     * Constructs a ShowGraphRequest object with default parameters.
     */
    public ShowGraphRequest() {
        graphName = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a ShowGraphRequest object with the specified parameters.
     *
     * @param graphName  Name of the graph on which to retrieve information. If
     *                   left as the default value, information about all
     *                   graphs is returned. The default value is ''.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#SHOW_ORIGINAL_REQUEST
     *                         SHOW_ORIGINAL_REQUEST}: If set to {@link
     *                         Options#TRUE TRUE}, the request that was
     *                         originally used to create the graph is also
     *                         returned as JSON.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#SERVER_ID SERVER_ID}: Indicates
     *                         which graph server(s) to send the request to.
     *                         Default is to send to get information about all
     *                         the servers.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public ShowGraphRequest(String graphName, Map<String, String> options) {
        this.graphName = (graphName == null) ? "" : graphName;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of the graph on which to retrieve information. If left as the
     * default value, information about all graphs is returned. The default
     * value is ''.
     *
     * @return The current value of {@code graphName}.
     */
    public String getGraphName() {
        return graphName;
    }

    /**
     * Name of the graph on which to retrieve information. If left as the
     * default value, information about all graphs is returned. The default
     * value is ''.
     *
     * @param graphName  The new value for {@code graphName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphRequest setGraphName(String graphName) {
        this.graphName = (graphName == null) ? "" : graphName;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#SHOW_ORIGINAL_REQUEST SHOW_ORIGINAL_REQUEST}: If
     *         set to {@link Options#TRUE TRUE}, the request that was
     *         originally used to create the graph is also returned as JSON.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#SERVER_ID SERVER_ID}: Indicates which graph
     *         server(s) to send the request to. Default is to send to get
     *         information about all the servers.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#SHOW_ORIGINAL_REQUEST SHOW_ORIGINAL_REQUEST}: If
     *         set to {@link Options#TRUE TRUE}, the request that was
     *         originally used to create the graph is also returned as JSON.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#SERVER_ID SERVER_ID}: Indicates which graph
     *         server(s) to send the request to. Default is to send to get
     *         information about all the servers.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.graphName;

            case 1:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.graphName = (String)value;
                break;

            case 1:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        ShowGraphRequest that = (ShowGraphRequest)obj;

        return ( this.graphName.equals( that.graphName )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "graphName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.graphName ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.graphName.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
