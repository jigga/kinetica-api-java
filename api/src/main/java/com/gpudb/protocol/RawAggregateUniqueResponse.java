/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.nio.ByteBuffer;
import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of results returned by {@link
 * com.gpudb.GPUdb#aggregateUniqueRaw(AggregateUniqueRequest)
 * GPUdb.aggregateUniqueRaw}.
 */
public class RawAggregateUniqueResponse implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("RawAggregateUniqueResponse")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("responseSchemaStr").type().stringType().noDefault()
                .name("binaryEncodedResponse").type().bytesType().noDefault()
                .name("jsonEncodedResponse").type().stringType().noDefault()
                .name("hasMoreRecords").type().booleanType().noDefault()
                .name("info").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link RawAggregateUniqueResponse}
     * parameter {@link #getInfo() info}.
     * <p>
     * Additional information.
     */
    public static final class Info {
        /**
         * The fully qualified name of the table (i.e.&nbsp;including the
         * schema) used to store the results.
         */
        public static final String QUALIFIED_RESULT_TABLE_NAME = "qualified_result_table_name";

        private Info() {  }
    }

    private String tableName;
    private String responseSchemaStr;
    private ByteBuffer binaryEncodedResponse;
    private String jsonEncodedResponse;
    private boolean hasMoreRecords;
    private Map<String, String> info;

    /**
     * Constructs a RawAggregateUniqueResponse object with default parameters.
     */
    public RawAggregateUniqueResponse() {
    }

    /**
     * The same table name as was passed in the parameter list.
     *
     * @return The current value of {@code tableName}.
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * The same table name as was passed in the parameter list.
     *
     * @param tableName  The new value for {@code tableName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public RawAggregateUniqueResponse setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * Avro schema of {@link #getBinaryEncodedResponse() binaryEncodedResponse}
     * or {@link #getJsonEncodedResponse() jsonEncodedResponse}.
     *
     * @return The current value of {@code responseSchemaStr}.
     */
    public String getResponseSchemaStr() {
        return responseSchemaStr;
    }

    /**
     * Avro schema of {@link #getBinaryEncodedResponse() binaryEncodedResponse}
     * or {@link #getJsonEncodedResponse() jsonEncodedResponse}.
     *
     * @param responseSchemaStr  The new value for {@code responseSchemaStr}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public RawAggregateUniqueResponse setResponseSchemaStr(String responseSchemaStr) {
        this.responseSchemaStr = (responseSchemaStr == null) ? "" : responseSchemaStr;
        return this;
    }

    /**
     * Avro binary encoded response.
     *
     * @return The current value of {@code binaryEncodedResponse}.
     */
    public ByteBuffer getBinaryEncodedResponse() {
        return binaryEncodedResponse;
    }

    /**
     * Avro binary encoded response.
     *
     * @param binaryEncodedResponse  The new value for {@code
     *                               binaryEncodedResponse}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public RawAggregateUniqueResponse setBinaryEncodedResponse(ByteBuffer binaryEncodedResponse) {
        this.binaryEncodedResponse = (binaryEncodedResponse == null) ? ByteBuffer.wrap( new byte[0] ) : binaryEncodedResponse;
        return this;
    }

    /**
     * Avro JSON encoded response.
     *
     * @return The current value of {@code jsonEncodedResponse}.
     */
    public String getJsonEncodedResponse() {
        return jsonEncodedResponse;
    }

    /**
     * Avro JSON encoded response.
     *
     * @param jsonEncodedResponse  The new value for {@code
     *                             jsonEncodedResponse}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public RawAggregateUniqueResponse setJsonEncodedResponse(String jsonEncodedResponse) {
        this.jsonEncodedResponse = (jsonEncodedResponse == null) ? "" : jsonEncodedResponse;
        return this;
    }

    /**
     * Too many records. Returned a partial set.
     *
     * @return The current value of {@code hasMoreRecords}.
     */
    public boolean getHasMoreRecords() {
        return hasMoreRecords;
    }

    /**
     * Too many records. Returned a partial set.
     *
     * @param hasMoreRecords  The new value for {@code hasMoreRecords}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public RawAggregateUniqueResponse setHasMoreRecords(boolean hasMoreRecords) {
        this.hasMoreRecords = hasMoreRecords;
        return this;
    }

    /**
     * Additional information.
     * <ul>
     *     <li>{@link Info#QUALIFIED_RESULT_TABLE_NAME
     *         QUALIFIED_RESULT_TABLE_NAME}: The fully qualified name of the
     *         table (i.e. including the schema) used to store the results.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code info}.
     */
    public Map<String, String> getInfo() {
        return info;
    }

    /**
     * Additional information.
     * <ul>
     *     <li>{@link Info#QUALIFIED_RESULT_TABLE_NAME
     *         QUALIFIED_RESULT_TABLE_NAME}: The fully qualified name of the
     *         table (i.e. including the schema) used to store the results.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param info  The new value for {@code info}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public RawAggregateUniqueResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.responseSchemaStr;

            case 2:
                return this.binaryEncodedResponse;

            case 3:
                return this.jsonEncodedResponse;

            case 4:
                return this.hasMoreRecords;

            case 5:
                return this.info;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.responseSchemaStr = (String)value;
                break;

            case 2:
                this.binaryEncodedResponse = (ByteBuffer)value;
                break;

            case 3:
                this.jsonEncodedResponse = (String)value;
                break;

            case 4:
                this.hasMoreRecords = (Boolean)value;
                break;

            case 5:
                this.info = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        RawAggregateUniqueResponse that = (RawAggregateUniqueResponse)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.responseSchemaStr.equals( that.responseSchemaStr )
                 && this.binaryEncodedResponse.equals( that.binaryEncodedResponse )
                 && this.jsonEncodedResponse.equals( that.jsonEncodedResponse )
                 && ( this.hasMoreRecords == that.hasMoreRecords )
                 && this.info.equals( that.info ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "responseSchemaStr" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.responseSchemaStr ) );
        builder.append( ", " );
        builder.append( gd.toString( "binaryEncodedResponse" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.binaryEncodedResponse ) );
        builder.append( ", " );
        builder.append( gd.toString( "jsonEncodedResponse" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.jsonEncodedResponse ) );
        builder.append( ", " );
        builder.append( gd.toString( "hasMoreRecords" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.hasMoreRecords ) );
        builder.append( ", " );
        builder.append( gd.toString( "info" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.info ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.responseSchemaStr.hashCode();
        hashCode = (31 * hashCode) + this.binaryEncodedResponse.hashCode();
        hashCode = (31 * hashCode) + this.jsonEncodedResponse.hashCode();
        hashCode = (31 * hashCode) + ((Boolean)this.hasMoreRecords).hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }
}
