/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of results returned by {@link
 * com.gpudb.GPUdb#createGraph(CreateGraphRequest) GPUdb.createGraph}.
 */
public class CreateGraphResponse implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("CreateGraphResponse")
            .namespace("com.gpudb")
            .fields()
                .name("result").type().booleanType().noDefault()
                .name("numNodes").type().longType().noDefault()
                .name("numEdges").type().longType().noDefault()
                .name("edgesIds").type().array().items().longType().noDefault()
                .name("info").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    private boolean result;
    private long numNodes;
    private long numEdges;
    private List<Long> edgesIds;
    private Map<String, String> info;

    /**
     * Constructs a CreateGraphResponse object with default parameters.
     */
    public CreateGraphResponse() {
    }

    /**
     * Indicates a successful creation on all servers.
     *
     * @return The current value of {@code result}.
     */
    public boolean getResult() {
        return result;
    }

    /**
     * Indicates a successful creation on all servers.
     *
     * @param result  The new value for {@code result}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateGraphResponse setResult(boolean result) {
        this.result = result;
        return this;
    }

    /**
     * Total number of nodes created.
     *
     * @return The current value of {@code numNodes}.
     */
    public long getNumNodes() {
        return numNodes;
    }

    /**
     * Total number of nodes created.
     *
     * @param numNodes  The new value for {@code numNodes}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateGraphResponse setNumNodes(long numNodes) {
        this.numNodes = numNodes;
        return this;
    }

    /**
     * Total number of edges created.
     *
     * @return The current value of {@code numEdges}.
     */
    public long getNumEdges() {
        return numEdges;
    }

    /**
     * Total number of edges created.
     *
     * @param numEdges  The new value for {@code numEdges}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateGraphResponse setNumEdges(long numEdges) {
        this.numEdges = numEdges;
        return this;
    }

    /**
     * [Deprecated] Edges given as pairs of node indices. Only populated if
     * export_create_results internal option is set to true.
     *
     * @return The current value of {@code edgesIds}.
     */
    public List<Long> getEdgesIds() {
        return edgesIds;
    }

    /**
     * [Deprecated] Edges given as pairs of node indices. Only populated if
     * export_create_results internal option is set to true.
     *
     * @param edgesIds  The new value for {@code edgesIds}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateGraphResponse setEdgesIds(List<Long> edgesIds) {
        this.edgesIds = (edgesIds == null) ? new ArrayList<Long>() : edgesIds;
        return this;
    }

    /**
     * Additional information.
     *
     * @return The current value of {@code info}.
     */
    public Map<String, String> getInfo() {
        return info;
    }

    /**
     * Additional information.
     *
     * @param info  The new value for {@code info}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateGraphResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.result;

            case 1:
                return this.numNodes;

            case 2:
                return this.numEdges;

            case 3:
                return this.edgesIds;

            case 4:
                return this.info;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.result = (Boolean)value;
                break;

            case 1:
                this.numNodes = (Long)value;
                break;

            case 2:
                this.numEdges = (Long)value;
                break;

            case 3:
                this.edgesIds = (List<Long>)value;
                break;

            case 4:
                this.info = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        CreateGraphResponse that = (CreateGraphResponse)obj;

        return ( ( this.result == that.result )
                 && ( this.numNodes == that.numNodes )
                 && ( this.numEdges == that.numEdges )
                 && this.edgesIds.equals( that.edgesIds )
                 && this.info.equals( that.info ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "result" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.result ) );
        builder.append( ", " );
        builder.append( gd.toString( "numNodes" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.numNodes ) );
        builder.append( ", " );
        builder.append( gd.toString( "numEdges" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.numEdges ) );
        builder.append( ", " );
        builder.append( gd.toString( "edgesIds" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.edgesIds ) );
        builder.append( ", " );
        builder.append( gd.toString( "info" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.info ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + ((Boolean)this.result).hashCode();
        hashCode = (31 * hashCode) + ((Long)this.numNodes).hashCode();
        hashCode = (31 * hashCode) + ((Long)this.numEdges).hashCode();
        hashCode = (31 * hashCode) + this.edgesIds.hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }
}
