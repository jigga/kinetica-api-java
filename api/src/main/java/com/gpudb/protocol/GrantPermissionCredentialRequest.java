/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#grantPermissionCredential(GrantPermissionCredentialRequest)
 * GPUdb.grantPermissionCredential}.
 * <p>
 * Grants a <a
 * href="../../../../../../security/sec_concepts/#security-concepts-permissions-credential"
 * target="_top">credential-level permission</a> to a user or role.
 */
public class GrantPermissionCredentialRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("GrantPermissionCredentialRequest")
            .namespace("com.gpudb")
            .fields()
                .name("name").type().stringType().noDefault()
                .name("permission").type().stringType().noDefault()
                .name("credentialName").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link
     * GrantPermissionCredentialRequest} parameter {@link #getPermission()
     * permission}.
     * <p>
     * Permission to grant to the user or role.
     */
    public static final class Permission {
        /**
         * Full read/write and administrative access on the credential.
         */
        public static final String CREDENTIAL_ADMIN = "credential_admin";

        /**
         * Ability to read and use the credential.
         */
        public static final String CREDENTIAL_READ = "credential_read";

        private Permission() {  }
    }

    private String name;
    private String permission;
    private String credentialName;
    private Map<String, String> options;

    /**
     * Constructs a GrantPermissionCredentialRequest object with default
     * parameters.
     */
    public GrantPermissionCredentialRequest() {
        name = "";
        permission = "";
        credentialName = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a GrantPermissionCredentialRequest object with the specified
     * parameters.
     *
     * @param name  Name of the user or role to which the permission will be
     *              granted. Must be an existing user or role.
     * @param permission  Permission to grant to the user or role.
     *                    Supported values:
     *                    <ul>
     *                        <li>{@link Permission#CREDENTIAL_ADMIN
     *                            CREDENTIAL_ADMIN}: Full read/write and
     *                            administrative access on the credential.
     *                        <li>{@link Permission#CREDENTIAL_READ
     *                            CREDENTIAL_READ}: Ability to read and use the
     *                            credential.
     *                    </ul>
     * @param credentialName  Name of the credential on which the permission
     *                        will be granted. Must be an existing credential,
     *                        or an empty string to grant access on all
     *                        credentials.
     * @param options  Optional parameters. The default value is an empty
     *                 {@link Map}.
     */
    public GrantPermissionCredentialRequest(String name, String permission, String credentialName, Map<String, String> options) {
        this.name = (name == null) ? "" : name;
        this.permission = (permission == null) ? "" : permission;
        this.credentialName = (credentialName == null) ? "" : credentialName;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of the user or role to which the permission will be granted. Must
     * be an existing user or role.
     *
     * @return The current value of {@code name}.
     */
    public String getName() {
        return name;
    }

    /**
     * Name of the user or role to which the permission will be granted. Must
     * be an existing user or role.
     *
     * @param name  The new value for {@code name}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public GrantPermissionCredentialRequest setName(String name) {
        this.name = (name == null) ? "" : name;
        return this;
    }

    /**
     * Permission to grant to the user or role.
     * Supported values:
     * <ul>
     *     <li>{@link Permission#CREDENTIAL_ADMIN CREDENTIAL_ADMIN}: Full
     *         read/write and administrative access on the credential.
     *     <li>{@link Permission#CREDENTIAL_READ CREDENTIAL_READ}: Ability to
     *         read and use the credential.
     * </ul>
     *
     * @return The current value of {@code permission}.
     */
    public String getPermission() {
        return permission;
    }

    /**
     * Permission to grant to the user or role.
     * Supported values:
     * <ul>
     *     <li>{@link Permission#CREDENTIAL_ADMIN CREDENTIAL_ADMIN}: Full
     *         read/write and administrative access on the credential.
     *     <li>{@link Permission#CREDENTIAL_READ CREDENTIAL_READ}: Ability to
     *         read and use the credential.
     * </ul>
     *
     * @param permission  The new value for {@code permission}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public GrantPermissionCredentialRequest setPermission(String permission) {
        this.permission = (permission == null) ? "" : permission;
        return this;
    }

    /**
     * Name of the credential on which the permission will be granted. Must be
     * an existing credential, or an empty string to grant access on all
     * credentials.
     *
     * @return The current value of {@code credentialName}.
     */
    public String getCredentialName() {
        return credentialName;
    }

    /**
     * Name of the credential on which the permission will be granted. Must be
     * an existing credential, or an empty string to grant access on all
     * credentials.
     *
     * @param credentialName  The new value for {@code credentialName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public GrantPermissionCredentialRequest setCredentialName(String credentialName) {
        this.credentialName = (credentialName == null) ? "" : credentialName;
        return this;
    }

    /**
     * Optional parameters. The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters. The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public GrantPermissionCredentialRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.name;

            case 1:
                return this.permission;

            case 2:
                return this.credentialName;

            case 3:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.name = (String)value;
                break;

            case 1:
                this.permission = (String)value;
                break;

            case 2:
                this.credentialName = (String)value;
                break;

            case 3:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        GrantPermissionCredentialRequest that = (GrantPermissionCredentialRequest)obj;

        return ( this.name.equals( that.name )
                 && this.permission.equals( that.permission )
                 && this.credentialName.equals( that.credentialName )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "name" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.name ) );
        builder.append( ", " );
        builder.append( gd.toString( "permission" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.permission ) );
        builder.append( ", " );
        builder.append( gd.toString( "credentialName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.credentialName ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.name.hashCode();
        hashCode = (31 * hashCode) + this.permission.hashCode();
        hashCode = (31 * hashCode) + this.credentialName.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
