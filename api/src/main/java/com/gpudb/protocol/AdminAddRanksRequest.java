/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#adminAddRanks(AdminAddRanksRequest) GPUdb.adminAddRanks}.
 * <p>
 * Add one or more ranks to an existing Kinetica cluster. The new ranks will
 * not contain any data initially (other than replicated tables) and will not
 * be assigned any shards. To rebalance data and shards across the cluster, use
 * {@link com.gpudb.GPUdb#adminRebalance(AdminRebalanceRequest)
 * GPUdb.adminRebalance}.
 * <p>
 * The database must be offline for this operation, see {@link
 * com.gpudb.GPUdb#adminOffline(AdminOfflineRequest) GPUdb.adminOffline}
 * <p>
 * For example, if attempting to add three new ranks (two ranks on host
 * 172.123.45.67 and one rank on host 172.123.45.68) to a Kinetica cluster with
 * additional configuration parameters:
 * <p>
 * * {@link #getHosts() hosts} would be an array including 172.123.45.67 in the
 * first two indices (signifying two ranks being added to host 172.123.45.67)
 * and 172.123.45.68 in the last index (signifying one rank being added to host
 * 172.123.45.67)
 * <p>
 * * {@link #getConfigParams() configParams} would be an array of maps, with
 * each map corresponding to the ranks being added in {@link #getHosts()
 * hosts}. The key of each map would be the configuration parameter name and
 * the value would be the parameter's value, e.g. '{"rank.gpu":"1"}'
 * <p>
 * This endpoint's processing includes copying all replicated table data to the
 * new rank(s) and therefore could take a long time. The API call may time out
 * if run directly.  It is recommended to run this endpoint asynchronously via
 * {@link com.gpudb.GPUdb#createJob(CreateJobRequest) GPUdb.createJob}.
 */
public class AdminAddRanksRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AdminAddRanksRequest")
            .namespace("com.gpudb")
            .fields()
                .name("hosts").type().array().items().stringType().noDefault()
                .name("configParams").type().array().items().map().values().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link AdminAddRanksRequest} parameter
     * {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * If {@link Options#TRUE TRUE}, only validation checks will be
         * performed. No ranks are added.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String DRY_RUN = "dry_run";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private Options() {  }
    }

    private List<String> hosts;
    private List<Map<String, String>> configParams;
    private Map<String, String> options;

    /**
     * Constructs an AdminAddRanksRequest object with default parameters.
     */
    public AdminAddRanksRequest() {
        hosts = new ArrayList<>();
        configParams = new ArrayList<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AdminAddRanksRequest object with the specified parameters.
     *
     * @param hosts  Array of host IP addresses (matching a hostN.address from
     *               the gpudb.conf file), or host identifiers (e.g. 'host0'
     *               from the gpudb.conf file), on which to add ranks to the
     *               cluster. The hosts must already be in the cluster. If
     *               needed beforehand, to add a new host to the cluster use
     *               {@link com.gpudb.GPUdb#adminAddHost(AdminAddHostRequest)
     *               GPUdb.adminAddHost}. Include the same entry as many times
     *               as there are ranks to add to the cluster, e.g., if two
     *               ranks on host 172.123.45.67 should be added, {@code hosts}
     *               could look like '["172.123.45.67", "172.123.45.67"]'. All
     *               ranks will be added simultaneously, i.e. they're not added
     *               in the order of this array. Each entry in this array
     *               corresponds to the entry at the same index in the {@code
     *               configParams}.
     * @param configParams  Array of maps containing configuration parameters
     *                      to apply to the new ranks found in {@code hosts}.
     *                      For example, '{"rank.gpu":"2",
     *                      "tier.ram.rank.limit":"10000000000"}'. Currently,
     *                      the available parameters are rank-specific
     *                      parameters in the <a
     *                      href="../../../../../../config/#config-main-network"
     *                      target="_top">Network</a>, <a
     *                      href="../../../../../../config/#config-main-hardware"
     *                      target="_top">Hardware</a>, <a
     *                      href="../../../../../../config/#config-main-text-search"
     *                      target="_top">Text Search</a>, and <a
     *                      href="../../../../../../config/#config-main-ram-tier"
     *                      target="_top">RAM Tiered Storage</a> sections in
     *                      the gpudb.conf file, with the key exception of the
     *                      'rankN.host' settings in the Network section that
     *                      will be determined by {@code hosts} instead. Though
     *                      many of these configuration parameters typically
     *                      are affixed with 'rankN' in the gpudb.conf file
     *                      (where N is the rank number), the 'N' should be
     *                      omitted in {@code configParams} as the new rank
     *                      number(s) are not allocated until the ranks have
     *                      been added to the cluster. Each entry in this array
     *                      corresponds to the entry at the same index in the
     *                      {@code hosts}. This array must either be completely
     *                      empty or have the same number of elements as the
     *                      {@code hosts}.  An empty {@code configParams} array
     *                      will result in the new ranks being set with default
     *                      parameters.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#DRY_RUN DRY_RUN}: If {@link
     *                         Options#TRUE TRUE}, only validation checks will
     *                         be performed. No ranks are added.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public AdminAddRanksRequest(List<String> hosts, List<Map<String, String>> configParams, Map<String, String> options) {
        this.hosts = (hosts == null) ? new ArrayList<String>() : hosts;
        this.configParams = (configParams == null) ? new ArrayList<Map<String, String>>() : configParams;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Array of host IP addresses (matching a hostN.address from the gpudb.conf
     * file), or host identifiers (e.g.&nbsp;'host0' from the gpudb.conf file),
     * on which to add ranks to the cluster. The hosts must already be in the
     * cluster. If needed beforehand, to add a new host to the cluster use
     * {@link com.gpudb.GPUdb#adminAddHost(AdminAddHostRequest)
     * GPUdb.adminAddHost}. Include the same entry as many times as there are
     * ranks to add to the cluster, e.g., if two ranks on host 172.123.45.67
     * should be added, {@link #getHosts() hosts} could look like
     * '["172.123.45.67", "172.123.45.67"]'. All ranks will be added
     * simultaneously, i.e.&nbsp;they're not added in the order of this array.
     * Each entry in this array corresponds to the entry at the same index in
     * the {@link #getConfigParams() configParams}.
     *
     * @return The current value of {@code hosts}.
     */
    public List<String> getHosts() {
        return hosts;
    }

    /**
     * Array of host IP addresses (matching a hostN.address from the gpudb.conf
     * file), or host identifiers (e.g.&nbsp;'host0' from the gpudb.conf file),
     * on which to add ranks to the cluster. The hosts must already be in the
     * cluster. If needed beforehand, to add a new host to the cluster use
     * {@link com.gpudb.GPUdb#adminAddHost(AdminAddHostRequest)
     * GPUdb.adminAddHost}. Include the same entry as many times as there are
     * ranks to add to the cluster, e.g., if two ranks on host 172.123.45.67
     * should be added, {@link #getHosts() hosts} could look like
     * '["172.123.45.67", "172.123.45.67"]'. All ranks will be added
     * simultaneously, i.e.&nbsp;they're not added in the order of this array.
     * Each entry in this array corresponds to the entry at the same index in
     * the {@link #getConfigParams() configParams}.
     *
     * @param hosts  The new value for {@code hosts}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminAddRanksRequest setHosts(List<String> hosts) {
        this.hosts = (hosts == null) ? new ArrayList<String>() : hosts;
        return this;
    }

    /**
     * Array of maps containing configuration parameters to apply to the new
     * ranks found in {@link #getHosts() hosts}. For example, '{"rank.gpu":"2",
     * "tier.ram.rank.limit":"10000000000"}'. Currently, the available
     * parameters are rank-specific parameters in the <a
     * href="../../../../../../config/#config-main-network"
     * target="_top">Network</a>, <a
     * href="../../../../../../config/#config-main-hardware"
     * target="_top">Hardware</a>, <a
     * href="../../../../../../config/#config-main-text-search"
     * target="_top">Text Search</a>, and <a
     * href="../../../../../../config/#config-main-ram-tier" target="_top">RAM
     * Tiered Storage</a> sections in the gpudb.conf file, with the key
     * exception of the 'rankN.host' settings in the Network section that will
     * be determined by {@link #getHosts() hosts} instead. Though many of these
     * configuration parameters typically are affixed with 'rankN' in the
     * gpudb.conf file (where N is the rank number), the 'N' should be omitted
     * in {@link #getConfigParams() configParams} as the new rank number(s) are
     * not allocated until the ranks have been added to the cluster. Each entry
     * in this array corresponds to the entry at the same index in the {@link
     * #getHosts() hosts}. This array must either be completely empty or have
     * the same number of elements as the {@link #getHosts() hosts}.  An empty
     * {@link #getConfigParams() configParams} array will result in the new
     * ranks being set with default parameters.
     *
     * @return The current value of {@code configParams}.
     */
    public List<Map<String, String>> getConfigParams() {
        return configParams;
    }

    /**
     * Array of maps containing configuration parameters to apply to the new
     * ranks found in {@link #getHosts() hosts}. For example, '{"rank.gpu":"2",
     * "tier.ram.rank.limit":"10000000000"}'. Currently, the available
     * parameters are rank-specific parameters in the <a
     * href="../../../../../../config/#config-main-network"
     * target="_top">Network</a>, <a
     * href="../../../../../../config/#config-main-hardware"
     * target="_top">Hardware</a>, <a
     * href="../../../../../../config/#config-main-text-search"
     * target="_top">Text Search</a>, and <a
     * href="../../../../../../config/#config-main-ram-tier" target="_top">RAM
     * Tiered Storage</a> sections in the gpudb.conf file, with the key
     * exception of the 'rankN.host' settings in the Network section that will
     * be determined by {@link #getHosts() hosts} instead. Though many of these
     * configuration parameters typically are affixed with 'rankN' in the
     * gpudb.conf file (where N is the rank number), the 'N' should be omitted
     * in {@link #getConfigParams() configParams} as the new rank number(s) are
     * not allocated until the ranks have been added to the cluster. Each entry
     * in this array corresponds to the entry at the same index in the {@link
     * #getHosts() hosts}. This array must either be completely empty or have
     * the same number of elements as the {@link #getHosts() hosts}.  An empty
     * {@link #getConfigParams() configParams} array will result in the new
     * ranks being set with default parameters.
     *
     * @param configParams  The new value for {@code configParams}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminAddRanksRequest setConfigParams(List<Map<String, String>> configParams) {
        this.configParams = (configParams == null) ? new ArrayList<Map<String, String>>() : configParams;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#DRY_RUN DRY_RUN}: If {@link Options#TRUE TRUE},
     *         only validation checks will be performed. No ranks are added.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#DRY_RUN DRY_RUN}: If {@link Options#TRUE TRUE},
     *         only validation checks will be performed. No ranks are added.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminAddRanksRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.hosts;

            case 1:
                return this.configParams;

            case 2:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.hosts = (List<String>)value;
                break;

            case 1:
                this.configParams = (List<Map<String, String>>)value;
                break;

            case 2:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AdminAddRanksRequest that = (AdminAddRanksRequest)obj;

        return ( this.hosts.equals( that.hosts )
                 && this.configParams.equals( that.configParams )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "hosts" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.hosts ) );
        builder.append( ", " );
        builder.append( gd.toString( "configParams" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.configParams ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.hosts.hashCode();
        hashCode = (31 * hashCode) + this.configParams.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
