/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of results returned by {@link
 * com.gpudb.GPUdb#adminShowClusterOperations(AdminShowClusterOperationsRequest)
 * GPUdb.adminShowClusterOperations}.
 */
public class AdminShowClusterOperationsResponse implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AdminShowClusterOperationsResponse")
            .namespace("com.gpudb")
            .fields()
                .name("historyIndex").type().intType().noDefault()
                .name("historySize").type().intType().noDefault()
                .name("inProgress").type().booleanType().noDefault()
                .name("startTime").type().stringType().noDefault()
                .name("endTime").type().stringType().noDefault()
                .name("endpoint").type().stringType().noDefault()
                .name("endpointSchema").type().stringType().noDefault()
                .name("overallStatus").type().stringType().noDefault()
                .name("userStopped").type().booleanType().noDefault()
                .name("percentComplete").type().intType().noDefault()
                .name("dryRun").type().booleanType().noDefault()
                .name("messages").type().array().items().stringType().noDefault()
                .name("addRanks").type().booleanType().noDefault()
                .name("addRanksStatus").type().stringType().noDefault()
                .name("ranksBeingAdded").type().array().items().intType().noDefault()
                .name("rankHosts").type().array().items().stringType().noDefault()
                .name("addRanksPercentComplete").type().intType().noDefault()
                .name("removeRanks").type().booleanType().noDefault()
                .name("removeRanksStatus").type().stringType().noDefault()
                .name("ranksBeingRemoved").type().array().items().intType().noDefault()
                .name("removeRanksPercentComplete").type().intType().noDefault()
                .name("rebalance").type().booleanType().noDefault()
                .name("rebalanceUnshardedData").type().booleanType().noDefault()
                .name("rebalanceUnshardedDataStatus").type().stringType().noDefault()
                .name("unshardedRebalancePercentComplete").type().intType().noDefault()
                .name("rebalanceShardedData").type().booleanType().noDefault()
                .name("shardArrayVersion").type().longType().noDefault()
                .name("rebalanceShardedDataStatus").type().stringType().noDefault()
                .name("numShardsChanging").type().intType().noDefault()
                .name("shardedRebalancePercentComplete").type().intType().noDefault()
                .name("info").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link
     * AdminShowClusterOperationsResponse} parameter {@link #getInProgress()
     * inProgress}.
     * <p>
     * Whether this cluster operation is currently in progress or not.
     */
    public static final class InProgress {
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private InProgress() {  }
    }

    /**
     * A set of string constants for the {@link
     * AdminShowClusterOperationsResponse} parameter {@link #getOverallStatus()
     * overallStatus}.
     * <p>
     * Overall success status of the operation.
     */
    public static final class OverallStatus {
        /**
         * The operation was successful, or, if still in progress, the
         * operation is successful so far.
         */
        public static final String OK = "OK";

        /**
         * An error occurred executing the operation.
         */
        public static final String ERROR = "ERROR";

        private OverallStatus() {  }
    }

    /**
     * A set of string constants for the {@link
     * AdminShowClusterOperationsResponse} parameter {@link #getUserStopped()
     * userStopped}.
     * <p>
     * Whether a user stopped this operation at any point while in progress.
     */
    public static final class UserStopped {
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private UserStopped() {  }
    }

    /**
     * A set of string constants for the {@link
     * AdminShowClusterOperationsResponse} parameter {@link #getDryRun()
     * dryRun}.
     * <p>
     * Whether this operation was a dry run.
     */
    public static final class DryRun {
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private DryRun() {  }
    }

    /**
     * A set of string constants for the {@link
     * AdminShowClusterOperationsResponse} parameter {@link #getAddRanks()
     * addRanks}.
     * <p>
     * Whether adding ranks is (or was) part of this operation.
     */
    public static final class AddRanks {
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private AddRanks() {  }
    }

    /**
     * A set of string constants for the {@link
     * AdminShowClusterOperationsResponse} parameter {@link
     * #getAddRanksStatus() addRanksStatus}.
     * <p>
     * If this was a rank-adding operation, the add-specific status of the
     * operation.
     */
    public static final class AddRanksStatus {
        public static final String NOT_STARTED = "NOT_STARTED";
        public static final String IN_PROGRESS = "IN_PROGRESS";
        public static final String INTERRUPTED = "INTERRUPTED";
        public static final String COMPLETED_OK = "COMPLETED_OK";
        public static final String ERROR = "ERROR";

        private AddRanksStatus() {  }
    }

    /**
     * A set of string constants for the {@link
     * AdminShowClusterOperationsResponse} parameter {@link #getRemoveRanks()
     * removeRanks}.
     * <p>
     * Whether removing ranks is (or was) part of this operation.
     */
    public static final class RemoveRanks {
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private RemoveRanks() {  }
    }

    /**
     * A set of string constants for the {@link
     * AdminShowClusterOperationsResponse} parameter {@link
     * #getRemoveRanksStatus() removeRanksStatus}.
     * <p>
     * If this was a rank-removing operation, the removal-specific status of
     * the operation.
     */
    public static final class RemoveRanksStatus {
        public static final String NOT_STARTED = "NOT_STARTED";
        public static final String IN_PROGRESS = "IN_PROGRESS";
        public static final String INTERRUPTED = "INTERRUPTED";
        public static final String COMPLETED_OK = "COMPLETED_OK";
        public static final String ERROR = "ERROR";

        private RemoveRanksStatus() {  }
    }

    /**
     * A set of string constants for the {@link
     * AdminShowClusterOperationsResponse} parameter {@link #getRebalance()
     * rebalance}.
     * <p>
     * Whether data and/or shard rebalancing is (or was) part of this
     * operation.
     */
    public static final class Rebalance {
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private Rebalance() {  }
    }

    /**
     * A set of string constants for the {@link
     * AdminShowClusterOperationsResponse} parameter {@link
     * #getRebalanceUnshardedData() rebalanceUnshardedData}.
     * <p>
     * Whether rebalancing of unsharded data is (or was) part of this
     * operation.
     */
    public static final class RebalanceUnshardedData {
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private RebalanceUnshardedData() {  }
    }

    /**
     * A set of string constants for the {@link
     * AdminShowClusterOperationsResponse} parameter {@link
     * #getRebalanceUnshardedDataStatus() rebalanceUnshardedDataStatus}.
     * <p>
     * If this was an operation that included rebalancing unsharded data, the
     * rebalancing-specific status of the operation.
     */
    public static final class RebalanceUnshardedDataStatus {
        public static final String NOT_STARTED = "NOT_STARTED";
        public static final String IN_PROGRESS = "IN_PROGRESS";
        public static final String INTERRUPTED = "INTERRUPTED";
        public static final String COMPLETED_OK = "COMPLETED_OK";
        public static final String ERROR = "ERROR";

        private RebalanceUnshardedDataStatus() {  }
    }

    /**
     * A set of string constants for the {@link
     * AdminShowClusterOperationsResponse} parameter {@link
     * #getRebalanceShardedData() rebalanceShardedData}.
     * <p>
     * Whether rebalancing of sharded data is (or was) part of this operation.
     */
    public static final class RebalanceShardedData {
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private RebalanceShardedData() {  }
    }

    /**
     * A set of string constants for the {@link
     * AdminShowClusterOperationsResponse} parameter {@link
     * #getRebalanceShardedDataStatus() rebalanceShardedDataStatus}.
     * <p>
     * If this was an operation that included rebalancing sharded data, the
     * rebalancing-specific status of the operation.
     */
    public static final class RebalanceShardedDataStatus {
        public static final String NOT_STARTED = "NOT_STARTED";
        public static final String IN_PROGRESS = "IN_PROGRESS";
        public static final String INTERRUPTED = "INTERRUPTED";
        public static final String COMPLETED_OK = "COMPLETED_OK";
        public static final String ERROR = "ERROR";

        private RebalanceShardedDataStatus() {  }
    }

    private int historyIndex;
    private int historySize;
    private boolean inProgress;
    private String startTime;
    private String endTime;
    private String endpoint;
    private String endpointSchema;
    private String overallStatus;
    private boolean userStopped;
    private int percentComplete;
    private boolean dryRun;
    private List<String> messages;
    private boolean addRanks;
    private String addRanksStatus;
    private List<Integer> ranksBeingAdded;
    private List<String> rankHosts;
    private int addRanksPercentComplete;
    private boolean removeRanks;
    private String removeRanksStatus;
    private List<Integer> ranksBeingRemoved;
    private int removeRanksPercentComplete;
    private boolean rebalance;
    private boolean rebalanceUnshardedData;
    private String rebalanceUnshardedDataStatus;
    private int unshardedRebalancePercentComplete;
    private boolean rebalanceShardedData;
    private long shardArrayVersion;
    private String rebalanceShardedDataStatus;
    private int numShardsChanging;
    private int shardedRebalancePercentComplete;
    private Map<String, String> info;

    /**
     * Constructs an AdminShowClusterOperationsResponse object with default
     * parameters.
     */
    public AdminShowClusterOperationsResponse() {
    }

    /**
     * The index of this cluster operation in the reverse-chronologically
     * sorted list of operations, where 0 is the most recent operation.
     *
     * @return The current value of {@code historyIndex}.
     */
    public int getHistoryIndex() {
        return historyIndex;
    }

    /**
     * The index of this cluster operation in the reverse-chronologically
     * sorted list of operations, where 0 is the most recent operation.
     *
     * @param historyIndex  The new value for {@code historyIndex}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setHistoryIndex(int historyIndex) {
        this.historyIndex = historyIndex;
        return this;
    }

    /**
     * Number of cluster operations executed to date.
     *
     * @return The current value of {@code historySize}.
     */
    public int getHistorySize() {
        return historySize;
    }

    /**
     * Number of cluster operations executed to date.
     *
     * @param historySize  The new value for {@code historySize}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setHistorySize(int historySize) {
        this.historySize = historySize;
        return this;
    }

    /**
     * Whether this cluster operation is currently in progress or not.
     * Supported values:
     * <ul>
     *     <li>{@link InProgress#TRUE TRUE}
     *     <li>{@link InProgress#FALSE FALSE}
     * </ul>
     *
     * @return The current value of {@code inProgress}.
     */
    public boolean getInProgress() {
        return inProgress;
    }

    /**
     * Whether this cluster operation is currently in progress or not.
     * Supported values:
     * <ul>
     *     <li>{@link InProgress#TRUE TRUE}
     *     <li>{@link InProgress#FALSE FALSE}
     * </ul>
     *
     * @param inProgress  The new value for {@code inProgress}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setInProgress(boolean inProgress) {
        this.inProgress = inProgress;
        return this;
    }

    /**
     * The start time of the cluster operation.
     *
     * @return The current value of {@code startTime}.
     */
    public String getStartTime() {
        return startTime;
    }

    /**
     * The start time of the cluster operation.
     *
     * @param startTime  The new value for {@code startTime}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setStartTime(String startTime) {
        this.startTime = (startTime == null) ? "" : startTime;
        return this;
    }

    /**
     * The end time of the cluster operation, if completed.
     *
     * @return The current value of {@code endTime}.
     */
    public String getEndTime() {
        return endTime;
    }

    /**
     * The end time of the cluster operation, if completed.
     *
     * @param endTime  The new value for {@code endTime}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setEndTime(String endTime) {
        this.endTime = (endTime == null) ? "" : endTime;
        return this;
    }

    /**
     * The endpoint that initiated the cluster operation.
     *
     * @return The current value of {@code endpoint}.
     */
    public String getEndpoint() {
        return endpoint;
    }

    /**
     * The endpoint that initiated the cluster operation.
     *
     * @param endpoint  The new value for {@code endpoint}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setEndpoint(String endpoint) {
        this.endpoint = (endpoint == null) ? "" : endpoint;
        return this;
    }

    /**
     * The schema for the original request.
     *
     * @return The current value of {@code endpointSchema}.
     */
    public String getEndpointSchema() {
        return endpointSchema;
    }

    /**
     * The schema for the original request.
     *
     * @param endpointSchema  The new value for {@code endpointSchema}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setEndpointSchema(String endpointSchema) {
        this.endpointSchema = (endpointSchema == null) ? "" : endpointSchema;
        return this;
    }

    /**
     * Overall success status of the operation.
     * Supported values:
     * <ul>
     *     <li>{@link OverallStatus#OK OK}: The operation was successful, or,
     *         if still in progress, the operation is successful so far.
     *     <li>{@link OverallStatus#ERROR ERROR}: An error occurred executing
     *         the operation.
     * </ul>
     *
     * @return The current value of {@code overallStatus}.
     */
    public String getOverallStatus() {
        return overallStatus;
    }

    /**
     * Overall success status of the operation.
     * Supported values:
     * <ul>
     *     <li>{@link OverallStatus#OK OK}: The operation was successful, or,
     *         if still in progress, the operation is successful so far.
     *     <li>{@link OverallStatus#ERROR ERROR}: An error occurred executing
     *         the operation.
     * </ul>
     *
     * @param overallStatus  The new value for {@code overallStatus}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setOverallStatus(String overallStatus) {
        this.overallStatus = (overallStatus == null) ? "" : overallStatus;
        return this;
    }

    /**
     * Whether a user stopped this operation at any point while in progress.
     * Supported values:
     * <ul>
     *     <li>{@link UserStopped#TRUE TRUE}
     *     <li>{@link UserStopped#FALSE FALSE}
     * </ul>
     *
     * @return The current value of {@code userStopped}.
     */
    public boolean getUserStopped() {
        return userStopped;
    }

    /**
     * Whether a user stopped this operation at any point while in progress.
     * Supported values:
     * <ul>
     *     <li>{@link UserStopped#TRUE TRUE}
     *     <li>{@link UserStopped#FALSE FALSE}
     * </ul>
     *
     * @param userStopped  The new value for {@code userStopped}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setUserStopped(boolean userStopped) {
        this.userStopped = userStopped;
        return this;
    }

    /**
     * Percent complete of this entire operation.
     *
     * @return The current value of {@code percentComplete}.
     */
    public int getPercentComplete() {
        return percentComplete;
    }

    /**
     * Percent complete of this entire operation.
     *
     * @param percentComplete  The new value for {@code percentComplete}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setPercentComplete(int percentComplete) {
        this.percentComplete = percentComplete;
        return this;
    }

    /**
     * Whether this operation was a dry run.
     * Supported values:
     * <ul>
     *     <li>{@link DryRun#TRUE TRUE}
     *     <li>{@link DryRun#FALSE FALSE}
     * </ul>
     *
     * @return The current value of {@code dryRun}.
     */
    public boolean getDryRun() {
        return dryRun;
    }

    /**
     * Whether this operation was a dry run.
     * Supported values:
     * <ul>
     *     <li>{@link DryRun#TRUE TRUE}
     *     <li>{@link DryRun#FALSE FALSE}
     * </ul>
     *
     * @param dryRun  The new value for {@code dryRun}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setDryRun(boolean dryRun) {
        this.dryRun = dryRun;
        return this;
    }

    /**
     * Updates and error messages if any.
     *
     * @return The current value of {@code messages}.
     */
    public List<String> getMessages() {
        return messages;
    }

    /**
     * Updates and error messages if any.
     *
     * @param messages  The new value for {@code messages}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setMessages(List<String> messages) {
        this.messages = (messages == null) ? new ArrayList<String>() : messages;
        return this;
    }

    /**
     * Whether adding ranks is (or was) part of this operation.
     * Supported values:
     * <ul>
     *     <li>{@link AddRanks#TRUE TRUE}
     *     <li>{@link AddRanks#FALSE FALSE}
     * </ul>
     *
     * @return The current value of {@code addRanks}.
     */
    public boolean getAddRanks() {
        return addRanks;
    }

    /**
     * Whether adding ranks is (or was) part of this operation.
     * Supported values:
     * <ul>
     *     <li>{@link AddRanks#TRUE TRUE}
     *     <li>{@link AddRanks#FALSE FALSE}
     * </ul>
     *
     * @param addRanks  The new value for {@code addRanks}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setAddRanks(boolean addRanks) {
        this.addRanks = addRanks;
        return this;
    }

    /**
     * If this was a rank-adding operation, the add-specific status of the
     * operation.
     * Valid values are:
     * <ul>
     *     <li>{@link AddRanksStatus#NOT_STARTED NOT_STARTED}
     *     <li>{@link AddRanksStatus#IN_PROGRESS IN_PROGRESS}
     *     <li>{@link AddRanksStatus#INTERRUPTED INTERRUPTED}
     *     <li>{@link AddRanksStatus#COMPLETED_OK COMPLETED_OK}
     *     <li>{@link AddRanksStatus#ERROR ERROR}
     * </ul>
     *
     * @return The current value of {@code addRanksStatus}.
     */
    public String getAddRanksStatus() {
        return addRanksStatus;
    }

    /**
     * If this was a rank-adding operation, the add-specific status of the
     * operation.
     * Valid values are:
     * <ul>
     *     <li>{@link AddRanksStatus#NOT_STARTED NOT_STARTED}
     *     <li>{@link AddRanksStatus#IN_PROGRESS IN_PROGRESS}
     *     <li>{@link AddRanksStatus#INTERRUPTED INTERRUPTED}
     *     <li>{@link AddRanksStatus#COMPLETED_OK COMPLETED_OK}
     *     <li>{@link AddRanksStatus#ERROR ERROR}
     * </ul>
     *
     * @param addRanksStatus  The new value for {@code addRanksStatus}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setAddRanksStatus(String addRanksStatus) {
        this.addRanksStatus = (addRanksStatus == null) ? "" : addRanksStatus;
        return this;
    }

    /**
     * The rank numbers of the ranks currently being added, or the rank numbers
     * that were added if the operation is complete.
     *
     * @return The current value of {@code ranksBeingAdded}.
     */
    public List<Integer> getRanksBeingAdded() {
        return ranksBeingAdded;
    }

    /**
     * The rank numbers of the ranks currently being added, or the rank numbers
     * that were added if the operation is complete.
     *
     * @param ranksBeingAdded  The new value for {@code ranksBeingAdded}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setRanksBeingAdded(List<Integer> ranksBeingAdded) {
        this.ranksBeingAdded = (ranksBeingAdded == null) ? new ArrayList<Integer>() : ranksBeingAdded;
        return this;
    }

    /**
     * The host IP addresses of the ranks being added, in the same order as the
     * {@link #getRanksBeingAdded() ranksBeingAdded} list.
     *
     * @return The current value of {@code rankHosts}.
     */
    public List<String> getRankHosts() {
        return rankHosts;
    }

    /**
     * The host IP addresses of the ranks being added, in the same order as the
     * {@link #getRanksBeingAdded() ranksBeingAdded} list.
     *
     * @param rankHosts  The new value for {@code rankHosts}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setRankHosts(List<String> rankHosts) {
        this.rankHosts = (rankHosts == null) ? new ArrayList<String>() : rankHosts;
        return this;
    }

    /**
     * Current percent complete of the add ranks operation.
     *
     * @return The current value of {@code addRanksPercentComplete}.
     */
    public int getAddRanksPercentComplete() {
        return addRanksPercentComplete;
    }

    /**
     * Current percent complete of the add ranks operation.
     *
     * @param addRanksPercentComplete  The new value for {@code
     *                                 addRanksPercentComplete}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setAddRanksPercentComplete(int addRanksPercentComplete) {
        this.addRanksPercentComplete = addRanksPercentComplete;
        return this;
    }

    /**
     * Whether removing ranks is (or was) part of this operation.
     * Supported values:
     * <ul>
     *     <li>{@link RemoveRanks#TRUE TRUE}
     *     <li>{@link RemoveRanks#FALSE FALSE}
     * </ul>
     *
     * @return The current value of {@code removeRanks}.
     */
    public boolean getRemoveRanks() {
        return removeRanks;
    }

    /**
     * Whether removing ranks is (or was) part of this operation.
     * Supported values:
     * <ul>
     *     <li>{@link RemoveRanks#TRUE TRUE}
     *     <li>{@link RemoveRanks#FALSE FALSE}
     * </ul>
     *
     * @param removeRanks  The new value for {@code removeRanks}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setRemoveRanks(boolean removeRanks) {
        this.removeRanks = removeRanks;
        return this;
    }

    /**
     * If this was a rank-removing operation, the removal-specific status of
     * the operation.
     * Valid values are:
     * <ul>
     *     <li>{@link RemoveRanksStatus#NOT_STARTED NOT_STARTED}
     *     <li>{@link RemoveRanksStatus#IN_PROGRESS IN_PROGRESS}
     *     <li>{@link RemoveRanksStatus#INTERRUPTED INTERRUPTED}
     *     <li>{@link RemoveRanksStatus#COMPLETED_OK COMPLETED_OK}
     *     <li>{@link RemoveRanksStatus#ERROR ERROR}
     * </ul>
     *
     * @return The current value of {@code removeRanksStatus}.
     */
    public String getRemoveRanksStatus() {
        return removeRanksStatus;
    }

    /**
     * If this was a rank-removing operation, the removal-specific status of
     * the operation.
     * Valid values are:
     * <ul>
     *     <li>{@link RemoveRanksStatus#NOT_STARTED NOT_STARTED}
     *     <li>{@link RemoveRanksStatus#IN_PROGRESS IN_PROGRESS}
     *     <li>{@link RemoveRanksStatus#INTERRUPTED INTERRUPTED}
     *     <li>{@link RemoveRanksStatus#COMPLETED_OK COMPLETED_OK}
     *     <li>{@link RemoveRanksStatus#ERROR ERROR}
     * </ul>
     *
     * @param removeRanksStatus  The new value for {@code removeRanksStatus}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setRemoveRanksStatus(String removeRanksStatus) {
        this.removeRanksStatus = (removeRanksStatus == null) ? "" : removeRanksStatus;
        return this;
    }

    /**
     * The ranks being removed, or that have been removed if the operation is
     * completed.
     *
     * @return The current value of {@code ranksBeingRemoved}.
     */
    public List<Integer> getRanksBeingRemoved() {
        return ranksBeingRemoved;
    }

    /**
     * The ranks being removed, or that have been removed if the operation is
     * completed.
     *
     * @param ranksBeingRemoved  The new value for {@code ranksBeingRemoved}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setRanksBeingRemoved(List<Integer> ranksBeingRemoved) {
        this.ranksBeingRemoved = (ranksBeingRemoved == null) ? new ArrayList<Integer>() : ranksBeingRemoved;
        return this;
    }

    /**
     * Current percent complete of the remove ranks operation.
     *
     * @return The current value of {@code removeRanksPercentComplete}.
     */
    public int getRemoveRanksPercentComplete() {
        return removeRanksPercentComplete;
    }

    /**
     * Current percent complete of the remove ranks operation.
     *
     * @param removeRanksPercentComplete  The new value for {@code
     *                                    removeRanksPercentComplete}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setRemoveRanksPercentComplete(int removeRanksPercentComplete) {
        this.removeRanksPercentComplete = removeRanksPercentComplete;
        return this;
    }

    /**
     * Whether data and/or shard rebalancing is (or was) part of this
     * operation.
     * Supported values:
     * <ul>
     *     <li>{@link Rebalance#TRUE TRUE}
     *     <li>{@link Rebalance#FALSE FALSE}
     * </ul>
     *
     * @return The current value of {@code rebalance}.
     */
    public boolean getRebalance() {
        return rebalance;
    }

    /**
     * Whether data and/or shard rebalancing is (or was) part of this
     * operation.
     * Supported values:
     * <ul>
     *     <li>{@link Rebalance#TRUE TRUE}
     *     <li>{@link Rebalance#FALSE FALSE}
     * </ul>
     *
     * @param rebalance  The new value for {@code rebalance}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setRebalance(boolean rebalance) {
        this.rebalance = rebalance;
        return this;
    }

    /**
     * Whether rebalancing of unsharded data is (or was) part of this
     * operation.
     * Supported values:
     * <ul>
     *     <li>{@link RebalanceUnshardedData#TRUE TRUE}
     *     <li>{@link RebalanceUnshardedData#FALSE FALSE}
     * </ul>
     *
     * @return The current value of {@code rebalanceUnshardedData}.
     */
    public boolean getRebalanceUnshardedData() {
        return rebalanceUnshardedData;
    }

    /**
     * Whether rebalancing of unsharded data is (or was) part of this
     * operation.
     * Supported values:
     * <ul>
     *     <li>{@link RebalanceUnshardedData#TRUE TRUE}
     *     <li>{@link RebalanceUnshardedData#FALSE FALSE}
     * </ul>
     *
     * @param rebalanceUnshardedData  The new value for {@code
     *                                rebalanceUnshardedData}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setRebalanceUnshardedData(boolean rebalanceUnshardedData) {
        this.rebalanceUnshardedData = rebalanceUnshardedData;
        return this;
    }

    /**
     * If this was an operation that included rebalancing unsharded data, the
     * rebalancing-specific status of the operation.
     * Valid values are:
     * <ul>
     *     <li>{@link RebalanceUnshardedDataStatus#NOT_STARTED NOT_STARTED}
     *     <li>{@link RebalanceUnshardedDataStatus#IN_PROGRESS IN_PROGRESS}
     *     <li>{@link RebalanceUnshardedDataStatus#INTERRUPTED INTERRUPTED}
     *     <li>{@link RebalanceUnshardedDataStatus#COMPLETED_OK COMPLETED_OK}
     *     <li>{@link RebalanceUnshardedDataStatus#ERROR ERROR}
     * </ul>
     *
     * @return The current value of {@code rebalanceUnshardedDataStatus}.
     */
    public String getRebalanceUnshardedDataStatus() {
        return rebalanceUnshardedDataStatus;
    }

    /**
     * If this was an operation that included rebalancing unsharded data, the
     * rebalancing-specific status of the operation.
     * Valid values are:
     * <ul>
     *     <li>{@link RebalanceUnshardedDataStatus#NOT_STARTED NOT_STARTED}
     *     <li>{@link RebalanceUnshardedDataStatus#IN_PROGRESS IN_PROGRESS}
     *     <li>{@link RebalanceUnshardedDataStatus#INTERRUPTED INTERRUPTED}
     *     <li>{@link RebalanceUnshardedDataStatus#COMPLETED_OK COMPLETED_OK}
     *     <li>{@link RebalanceUnshardedDataStatus#ERROR ERROR}
     * </ul>
     *
     * @param rebalanceUnshardedDataStatus  The new value for {@code
     *                                      rebalanceUnshardedDataStatus}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setRebalanceUnshardedDataStatus(String rebalanceUnshardedDataStatus) {
        this.rebalanceUnshardedDataStatus = (rebalanceUnshardedDataStatus == null) ? "" : rebalanceUnshardedDataStatus;
        return this;
    }

    /**
     * Percentage of unsharded tables that completed rebalancing, out of all
     * unsharded tables to rebalance.
     *
     * @return The current value of {@code unshardedRebalancePercentComplete}.
     */
    public int getUnshardedRebalancePercentComplete() {
        return unshardedRebalancePercentComplete;
    }

    /**
     * Percentage of unsharded tables that completed rebalancing, out of all
     * unsharded tables to rebalance.
     *
     * @param unshardedRebalancePercentComplete  The new value for {@code
     *                                           unshardedRebalancePercentComplete}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setUnshardedRebalancePercentComplete(int unshardedRebalancePercentComplete) {
        this.unshardedRebalancePercentComplete = unshardedRebalancePercentComplete;
        return this;
    }

    /**
     * Whether rebalancing of sharded data is (or was) part of this operation.
     * Supported values:
     * <ul>
     *     <li>{@link RebalanceShardedData#TRUE TRUE}
     *     <li>{@link RebalanceShardedData#FALSE FALSE}
     * </ul>
     *
     * @return The current value of {@code rebalanceShardedData}.
     */
    public boolean getRebalanceShardedData() {
        return rebalanceShardedData;
    }

    /**
     * Whether rebalancing of sharded data is (or was) part of this operation.
     * Supported values:
     * <ul>
     *     <li>{@link RebalanceShardedData#TRUE TRUE}
     *     <li>{@link RebalanceShardedData#FALSE FALSE}
     * </ul>
     *
     * @param rebalanceShardedData  The new value for {@code
     *                              rebalanceShardedData}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setRebalanceShardedData(boolean rebalanceShardedData) {
        this.rebalanceShardedData = rebalanceShardedData;
        return this;
    }

    /**
     * Version of the shard array that is (or was) being rebalanced to. Each
     * change to the shard array results in the version number incrementing.
     *
     * @return The current value of {@code shardArrayVersion}.
     */
    public long getShardArrayVersion() {
        return shardArrayVersion;
    }

    /**
     * Version of the shard array that is (or was) being rebalanced to. Each
     * change to the shard array results in the version number incrementing.
     *
     * @param shardArrayVersion  The new value for {@code shardArrayVersion}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setShardArrayVersion(long shardArrayVersion) {
        this.shardArrayVersion = shardArrayVersion;
        return this;
    }

    /**
     * If this was an operation that included rebalancing sharded data, the
     * rebalancing-specific status of the operation.
     * Valid values are:
     * <ul>
     *     <li>{@link RebalanceShardedDataStatus#NOT_STARTED NOT_STARTED}
     *     <li>{@link RebalanceShardedDataStatus#IN_PROGRESS IN_PROGRESS}
     *     <li>{@link RebalanceShardedDataStatus#INTERRUPTED INTERRUPTED}
     *     <li>{@link RebalanceShardedDataStatus#COMPLETED_OK COMPLETED_OK}
     *     <li>{@link RebalanceShardedDataStatus#ERROR ERROR}
     * </ul>
     *
     * @return The current value of {@code rebalanceShardedDataStatus}.
     */
    public String getRebalanceShardedDataStatus() {
        return rebalanceShardedDataStatus;
    }

    /**
     * If this was an operation that included rebalancing sharded data, the
     * rebalancing-specific status of the operation.
     * Valid values are:
     * <ul>
     *     <li>{@link RebalanceShardedDataStatus#NOT_STARTED NOT_STARTED}
     *     <li>{@link RebalanceShardedDataStatus#IN_PROGRESS IN_PROGRESS}
     *     <li>{@link RebalanceShardedDataStatus#INTERRUPTED INTERRUPTED}
     *     <li>{@link RebalanceShardedDataStatus#COMPLETED_OK COMPLETED_OK}
     *     <li>{@link RebalanceShardedDataStatus#ERROR ERROR}
     * </ul>
     *
     * @param rebalanceShardedDataStatus  The new value for {@code
     *                                    rebalanceShardedDataStatus}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setRebalanceShardedDataStatus(String rebalanceShardedDataStatus) {
        this.rebalanceShardedDataStatus = (rebalanceShardedDataStatus == null) ? "" : rebalanceShardedDataStatus;
        return this;
    }

    /**
     * Number of shards that will change as part of rebalance.
     *
     * @return The current value of {@code numShardsChanging}.
     */
    public int getNumShardsChanging() {
        return numShardsChanging;
    }

    /**
     * Number of shards that will change as part of rebalance.
     *
     * @param numShardsChanging  The new value for {@code numShardsChanging}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setNumShardsChanging(int numShardsChanging) {
        this.numShardsChanging = numShardsChanging;
        return this;
    }

    /**
     * Percentage of shard keys, and their associated data if applicable, that
     * have completed rebalancing.
     *
     * @return The current value of {@code shardedRebalancePercentComplete}.
     */
    public int getShardedRebalancePercentComplete() {
        return shardedRebalancePercentComplete;
    }

    /**
     * Percentage of shard keys, and their associated data if applicable, that
     * have completed rebalancing.
     *
     * @param shardedRebalancePercentComplete  The new value for {@code
     *                                         shardedRebalancePercentComplete}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setShardedRebalancePercentComplete(int shardedRebalancePercentComplete) {
        this.shardedRebalancePercentComplete = shardedRebalancePercentComplete;
        return this;
    }

    /**
     * Additional information.
     *
     * @return The current value of {@code info}.
     */
    public Map<String, String> getInfo() {
        return info;
    }

    /**
     * Additional information.
     *
     * @param info  The new value for {@code info}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminShowClusterOperationsResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.historyIndex;

            case 1:
                return this.historySize;

            case 2:
                return this.inProgress;

            case 3:
                return this.startTime;

            case 4:
                return this.endTime;

            case 5:
                return this.endpoint;

            case 6:
                return this.endpointSchema;

            case 7:
                return this.overallStatus;

            case 8:
                return this.userStopped;

            case 9:
                return this.percentComplete;

            case 10:
                return this.dryRun;

            case 11:
                return this.messages;

            case 12:
                return this.addRanks;

            case 13:
                return this.addRanksStatus;

            case 14:
                return this.ranksBeingAdded;

            case 15:
                return this.rankHosts;

            case 16:
                return this.addRanksPercentComplete;

            case 17:
                return this.removeRanks;

            case 18:
                return this.removeRanksStatus;

            case 19:
                return this.ranksBeingRemoved;

            case 20:
                return this.removeRanksPercentComplete;

            case 21:
                return this.rebalance;

            case 22:
                return this.rebalanceUnshardedData;

            case 23:
                return this.rebalanceUnshardedDataStatus;

            case 24:
                return this.unshardedRebalancePercentComplete;

            case 25:
                return this.rebalanceShardedData;

            case 26:
                return this.shardArrayVersion;

            case 27:
                return this.rebalanceShardedDataStatus;

            case 28:
                return this.numShardsChanging;

            case 29:
                return this.shardedRebalancePercentComplete;

            case 30:
                return this.info;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.historyIndex = (Integer)value;
                break;

            case 1:
                this.historySize = (Integer)value;
                break;

            case 2:
                this.inProgress = (Boolean)value;
                break;

            case 3:
                this.startTime = (String)value;
                break;

            case 4:
                this.endTime = (String)value;
                break;

            case 5:
                this.endpoint = (String)value;
                break;

            case 6:
                this.endpointSchema = (String)value;
                break;

            case 7:
                this.overallStatus = (String)value;
                break;

            case 8:
                this.userStopped = (Boolean)value;
                break;

            case 9:
                this.percentComplete = (Integer)value;
                break;

            case 10:
                this.dryRun = (Boolean)value;
                break;

            case 11:
                this.messages = (List<String>)value;
                break;

            case 12:
                this.addRanks = (Boolean)value;
                break;

            case 13:
                this.addRanksStatus = (String)value;
                break;

            case 14:
                this.ranksBeingAdded = (List<Integer>)value;
                break;

            case 15:
                this.rankHosts = (List<String>)value;
                break;

            case 16:
                this.addRanksPercentComplete = (Integer)value;
                break;

            case 17:
                this.removeRanks = (Boolean)value;
                break;

            case 18:
                this.removeRanksStatus = (String)value;
                break;

            case 19:
                this.ranksBeingRemoved = (List<Integer>)value;
                break;

            case 20:
                this.removeRanksPercentComplete = (Integer)value;
                break;

            case 21:
                this.rebalance = (Boolean)value;
                break;

            case 22:
                this.rebalanceUnshardedData = (Boolean)value;
                break;

            case 23:
                this.rebalanceUnshardedDataStatus = (String)value;
                break;

            case 24:
                this.unshardedRebalancePercentComplete = (Integer)value;
                break;

            case 25:
                this.rebalanceShardedData = (Boolean)value;
                break;

            case 26:
                this.shardArrayVersion = (Long)value;
                break;

            case 27:
                this.rebalanceShardedDataStatus = (String)value;
                break;

            case 28:
                this.numShardsChanging = (Integer)value;
                break;

            case 29:
                this.shardedRebalancePercentComplete = (Integer)value;
                break;

            case 30:
                this.info = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AdminShowClusterOperationsResponse that = (AdminShowClusterOperationsResponse)obj;

        return ( ( this.historyIndex == that.historyIndex )
                 && ( this.historySize == that.historySize )
                 && ( this.inProgress == that.inProgress )
                 && this.startTime.equals( that.startTime )
                 && this.endTime.equals( that.endTime )
                 && this.endpoint.equals( that.endpoint )
                 && this.endpointSchema.equals( that.endpointSchema )
                 && this.overallStatus.equals( that.overallStatus )
                 && ( this.userStopped == that.userStopped )
                 && ( this.percentComplete == that.percentComplete )
                 && ( this.dryRun == that.dryRun )
                 && this.messages.equals( that.messages )
                 && ( this.addRanks == that.addRanks )
                 && this.addRanksStatus.equals( that.addRanksStatus )
                 && this.ranksBeingAdded.equals( that.ranksBeingAdded )
                 && this.rankHosts.equals( that.rankHosts )
                 && ( this.addRanksPercentComplete == that.addRanksPercentComplete )
                 && ( this.removeRanks == that.removeRanks )
                 && this.removeRanksStatus.equals( that.removeRanksStatus )
                 && this.ranksBeingRemoved.equals( that.ranksBeingRemoved )
                 && ( this.removeRanksPercentComplete == that.removeRanksPercentComplete )
                 && ( this.rebalance == that.rebalance )
                 && ( this.rebalanceUnshardedData == that.rebalanceUnshardedData )
                 && this.rebalanceUnshardedDataStatus.equals( that.rebalanceUnshardedDataStatus )
                 && ( this.unshardedRebalancePercentComplete == that.unshardedRebalancePercentComplete )
                 && ( this.rebalanceShardedData == that.rebalanceShardedData )
                 && ( this.shardArrayVersion == that.shardArrayVersion )
                 && this.rebalanceShardedDataStatus.equals( that.rebalanceShardedDataStatus )
                 && ( this.numShardsChanging == that.numShardsChanging )
                 && ( this.shardedRebalancePercentComplete == that.shardedRebalancePercentComplete )
                 && this.info.equals( that.info ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "historyIndex" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.historyIndex ) );
        builder.append( ", " );
        builder.append( gd.toString( "historySize" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.historySize ) );
        builder.append( ", " );
        builder.append( gd.toString( "inProgress" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.inProgress ) );
        builder.append( ", " );
        builder.append( gd.toString( "startTime" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.startTime ) );
        builder.append( ", " );
        builder.append( gd.toString( "endTime" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.endTime ) );
        builder.append( ", " );
        builder.append( gd.toString( "endpoint" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.endpoint ) );
        builder.append( ", " );
        builder.append( gd.toString( "endpointSchema" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.endpointSchema ) );
        builder.append( ", " );
        builder.append( gd.toString( "overallStatus" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.overallStatus ) );
        builder.append( ", " );
        builder.append( gd.toString( "userStopped" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.userStopped ) );
        builder.append( ", " );
        builder.append( gd.toString( "percentComplete" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.percentComplete ) );
        builder.append( ", " );
        builder.append( gd.toString( "dryRun" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.dryRun ) );
        builder.append( ", " );
        builder.append( gd.toString( "messages" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.messages ) );
        builder.append( ", " );
        builder.append( gd.toString( "addRanks" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.addRanks ) );
        builder.append( ", " );
        builder.append( gd.toString( "addRanksStatus" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.addRanksStatus ) );
        builder.append( ", " );
        builder.append( gd.toString( "ranksBeingAdded" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.ranksBeingAdded ) );
        builder.append( ", " );
        builder.append( gd.toString( "rankHosts" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.rankHosts ) );
        builder.append( ", " );
        builder.append( gd.toString( "addRanksPercentComplete" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.addRanksPercentComplete ) );
        builder.append( ", " );
        builder.append( gd.toString( "removeRanks" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.removeRanks ) );
        builder.append( ", " );
        builder.append( gd.toString( "removeRanksStatus" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.removeRanksStatus ) );
        builder.append( ", " );
        builder.append( gd.toString( "ranksBeingRemoved" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.ranksBeingRemoved ) );
        builder.append( ", " );
        builder.append( gd.toString( "removeRanksPercentComplete" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.removeRanksPercentComplete ) );
        builder.append( ", " );
        builder.append( gd.toString( "rebalance" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.rebalance ) );
        builder.append( ", " );
        builder.append( gd.toString( "rebalanceUnshardedData" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.rebalanceUnshardedData ) );
        builder.append( ", " );
        builder.append( gd.toString( "rebalanceUnshardedDataStatus" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.rebalanceUnshardedDataStatus ) );
        builder.append( ", " );
        builder.append( gd.toString( "unshardedRebalancePercentComplete" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.unshardedRebalancePercentComplete ) );
        builder.append( ", " );
        builder.append( gd.toString( "rebalanceShardedData" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.rebalanceShardedData ) );
        builder.append( ", " );
        builder.append( gd.toString( "shardArrayVersion" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.shardArrayVersion ) );
        builder.append( ", " );
        builder.append( gd.toString( "rebalanceShardedDataStatus" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.rebalanceShardedDataStatus ) );
        builder.append( ", " );
        builder.append( gd.toString( "numShardsChanging" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.numShardsChanging ) );
        builder.append( ", " );
        builder.append( gd.toString( "shardedRebalancePercentComplete" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.shardedRebalancePercentComplete ) );
        builder.append( ", " );
        builder.append( gd.toString( "info" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.info ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.historyIndex;
        hashCode = (31 * hashCode) + this.historySize;
        hashCode = (31 * hashCode) + ((Boolean)this.inProgress).hashCode();
        hashCode = (31 * hashCode) + this.startTime.hashCode();
        hashCode = (31 * hashCode) + this.endTime.hashCode();
        hashCode = (31 * hashCode) + this.endpoint.hashCode();
        hashCode = (31 * hashCode) + this.endpointSchema.hashCode();
        hashCode = (31 * hashCode) + this.overallStatus.hashCode();
        hashCode = (31 * hashCode) + ((Boolean)this.userStopped).hashCode();
        hashCode = (31 * hashCode) + this.percentComplete;
        hashCode = (31 * hashCode) + ((Boolean)this.dryRun).hashCode();
        hashCode = (31 * hashCode) + this.messages.hashCode();
        hashCode = (31 * hashCode) + ((Boolean)this.addRanks).hashCode();
        hashCode = (31 * hashCode) + this.addRanksStatus.hashCode();
        hashCode = (31 * hashCode) + this.ranksBeingAdded.hashCode();
        hashCode = (31 * hashCode) + this.rankHosts.hashCode();
        hashCode = (31 * hashCode) + this.addRanksPercentComplete;
        hashCode = (31 * hashCode) + ((Boolean)this.removeRanks).hashCode();
        hashCode = (31 * hashCode) + this.removeRanksStatus.hashCode();
        hashCode = (31 * hashCode) + this.ranksBeingRemoved.hashCode();
        hashCode = (31 * hashCode) + this.removeRanksPercentComplete;
        hashCode = (31 * hashCode) + ((Boolean)this.rebalance).hashCode();
        hashCode = (31 * hashCode) + ((Boolean)this.rebalanceUnshardedData).hashCode();
        hashCode = (31 * hashCode) + this.rebalanceUnshardedDataStatus.hashCode();
        hashCode = (31 * hashCode) + this.unshardedRebalancePercentComplete;
        hashCode = (31 * hashCode) + ((Boolean)this.rebalanceShardedData).hashCode();
        hashCode = (31 * hashCode) + ((Long)this.shardArrayVersion).hashCode();
        hashCode = (31 * hashCode) + this.rebalanceShardedDataStatus.hashCode();
        hashCode = (31 * hashCode) + this.numShardsChanging;
        hashCode = (31 * hashCode) + this.shardedRebalancePercentComplete;
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }
}
