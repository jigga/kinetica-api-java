/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#aggregateKMeans(AggregateKMeansRequest)
 * GPUdb.aggregateKMeans}.
 * <p>
 * This endpoint runs the k-means algorithm - a heuristic algorithm that
 * attempts to do k-means clustering.  An ideal k-means clustering algorithm
 * selects k points such that the sum of the mean squared distances of each
 * member of the set to the nearest of the k points is minimized.  The k-means
 * algorithm however does not necessarily produce such an ideal cluster.   It
 * begins with a randomly selected set of k points and then refines the
 * location of the points iteratively and settles to a local minimum.  Various
 * parameters and options are provided to control the heuristic search.
 * <p>
 * NOTE:  The Kinetica instance being accessed must be running a CUDA
 * (GPU-based) build to service this request.
 */
public class AggregateKMeansRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AggregateKMeansRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("columnNames").type().array().items().stringType().noDefault()
                .name("k").type().intType().noDefault()
                .name("tolerance").type().doubleType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link AggregateKMeansRequest}
     * parameter {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * When set to 1 each of the columns is first normalized by its stdv -
         * default is not to whiten.
         */
        public static final String WHITEN = "whiten";

        /**
         * Number of times to try to hit the tolerance limit before giving up -
         * default is 10.
         */
        public static final String MAX_ITERS = "max_iters";

        /**
         * Number of times to run the k-means algorithm with a different
         * randomly selected starting points - helps avoid local minimum.
         * Default is 1.
         */
        public static final String NUM_TRIES = "num_tries";

        /**
         * If {@link Options#TRUE TRUE}, a unique temporary table name will be
         * generated in the sys_temp schema and used in place of {@link
         * Options#RESULT_TABLE RESULT_TABLE}. If {@link
         * Options#RESULT_TABLE_PERSIST RESULT_TABLE_PERSIST} is {@link
         * Options#FALSE FALSE} (or unspecified), then this is always allowed
         * even if the caller does not have permission to create tables. The
         * generated name is returned in {@link
         * com.gpudb.protocol.AggregateKMeansResponse.Info#QUALIFIED_RESULT_TABLE_NAME
         * QUALIFIED_RESULT_TABLE_NAME}.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String CREATE_TEMP_TABLE = "create_temp_table";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * The name of a table used to store the results, in
         * [schema_name.]table_name format, using standard <a
         * href="../../../../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a> and meeting <a
         * href="../../../../../../concepts/tables/#table-naming-criteria"
         * target="_top">table naming criteria</a>.  If this option is
         * specified, the results are not returned in the response.
         */
        public static final String RESULT_TABLE = "result_table";

        /**
         * If {@link Options#TRUE TRUE}, then the result table specified in
         * {@link Options#RESULT_TABLE RESULT_TABLE} will be persisted and will
         * not expire unless a {@link Options#TTL TTL} is specified.   If
         * {@link Options#FALSE FALSE}, then the result table will be an
         * in-memory table and will expire unless a {@link Options#TTL TTL} is
         * specified otherwise.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String RESULT_TABLE_PERSIST = "result_table_persist";

        /**
         * Sets the <a href="../../../../../../concepts/ttl/"
         * target="_top">TTL</a> of the table specified in {@link
         * Options#RESULT_TABLE RESULT_TABLE}.
         */
        public static final String TTL = "ttl";

        private Options() {  }
    }

    private String tableName;
    private List<String> columnNames;
    private int k;
    private double tolerance;
    private Map<String, String> options;

    /**
     * Constructs an AggregateKMeansRequest object with default parameters.
     */
    public AggregateKMeansRequest() {
        tableName = "";
        columnNames = new ArrayList<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AggregateKMeansRequest object with the specified
     * parameters.
     *
     * @param tableName  Name of the table on which the operation will be
     *                   performed. Must be an existing table, in
     *                   [schema_name.]table_name format, using standard <a
     *                   href="../../../../../../concepts/tables/#table-name-resolution"
     *                   target="_top">name resolution rules</a>.
     * @param columnNames  List of column names on which the operation would be
     *                     performed. If n columns are provided then each of
     *                     the k result points will have n dimensions
     *                     corresponding to the n columns.
     * @param k  The number of mean points to be determined by the algorithm.
     * @param tolerance  Stop iterating when the distances between successive
     *                   points is less than the given tolerance.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#WHITEN WHITEN}: When set to 1
     *                         each of the columns is first normalized by its
     *                         stdv - default is not to whiten.
     *                     <li>{@link Options#MAX_ITERS MAX_ITERS}: Number of
     *                         times to try to hit the tolerance limit before
     *                         giving up - default is 10.
     *                     <li>{@link Options#NUM_TRIES NUM_TRIES}: Number of
     *                         times to run the k-means algorithm with a
     *                         different randomly selected starting points -
     *                         helps avoid local minimum. Default is 1.
     *                     <li>{@link Options#CREATE_TEMP_TABLE
     *                         CREATE_TEMP_TABLE}: If {@link Options#TRUE
     *                         TRUE}, a unique temporary table name will be
     *                         generated in the sys_temp schema and used in
     *                         place of {@link Options#RESULT_TABLE
     *                         RESULT_TABLE}. If {@link
     *                         Options#RESULT_TABLE_PERSIST
     *                         RESULT_TABLE_PERSIST} is {@link Options#FALSE
     *                         FALSE} (or unspecified), then this is always
     *                         allowed even if the caller does not have
     *                         permission to create tables. The generated name
     *                         is returned in {@link
     *                         com.gpudb.protocol.AggregateKMeansResponse.Info#QUALIFIED_RESULT_TABLE_NAME
     *                         QUALIFIED_RESULT_TABLE_NAME}.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#RESULT_TABLE RESULT_TABLE}: The
     *                         name of a table used to store the results, in
     *                         [schema_name.]table_name format, using standard
     *                         <a
     *                         href="../../../../../../concepts/tables/#table-name-resolution"
     *                         target="_top">name resolution rules</a> and
     *                         meeting <a
     *                         href="../../../../../../concepts/tables/#table-naming-criteria"
     *                         target="_top">table naming criteria</a>.  If
     *                         this option is specified, the results are not
     *                         returned in the response.
     *                     <li>{@link Options#RESULT_TABLE_PERSIST
     *                         RESULT_TABLE_PERSIST}: If {@link Options#TRUE
     *                         TRUE}, then the result table specified in {@link
     *                         Options#RESULT_TABLE RESULT_TABLE} will be
     *                         persisted and will not expire unless a {@link
     *                         Options#TTL TTL} is specified.   If {@link
     *                         Options#FALSE FALSE}, then the result table will
     *                         be an in-memory table and will expire unless a
     *                         {@link Options#TTL TTL} is specified otherwise.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#TTL TTL}: Sets the <a
     *                         href="../../../../../../concepts/ttl/"
     *                         target="_top">TTL</a> of the table specified in
     *                         {@link Options#RESULT_TABLE RESULT_TABLE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public AggregateKMeansRequest(String tableName, List<String> columnNames, int k, double tolerance, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.columnNames = (columnNames == null) ? new ArrayList<String>() : columnNames;
        this.k = k;
        this.tolerance = tolerance;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of the table on which the operation will be performed. Must be an
     * existing table, in [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>.
     *
     * @return The current value of {@code tableName}.
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * Name of the table on which the operation will be performed. Must be an
     * existing table, in [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>.
     *
     * @param tableName  The new value for {@code tableName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AggregateKMeansRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * List of column names on which the operation would be performed. If n
     * columns are provided then each of the k result points will have n
     * dimensions corresponding to the n columns.
     *
     * @return The current value of {@code columnNames}.
     */
    public List<String> getColumnNames() {
        return columnNames;
    }

    /**
     * List of column names on which the operation would be performed. If n
     * columns are provided then each of the k result points will have n
     * dimensions corresponding to the n columns.
     *
     * @param columnNames  The new value for {@code columnNames}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AggregateKMeansRequest setColumnNames(List<String> columnNames) {
        this.columnNames = (columnNames == null) ? new ArrayList<String>() : columnNames;
        return this;
    }

    /**
     * The number of mean points to be determined by the algorithm.
     *
     * @return The current value of {@code k}.
     */
    public int getK() {
        return k;
    }

    /**
     * The number of mean points to be determined by the algorithm.
     *
     * @param k  The new value for {@code k}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AggregateKMeansRequest setK(int k) {
        this.k = k;
        return this;
    }

    /**
     * Stop iterating when the distances between successive points is less than
     * the given tolerance.
     *
     * @return The current value of {@code tolerance}.
     */
    public double getTolerance() {
        return tolerance;
    }

    /**
     * Stop iterating when the distances between successive points is less than
     * the given tolerance.
     *
     * @param tolerance  The new value for {@code tolerance}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AggregateKMeansRequest setTolerance(double tolerance) {
        this.tolerance = tolerance;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#WHITEN WHITEN}: When set to 1 each of the columns
     *         is first normalized by its stdv - default is not to whiten.
     *     <li>{@link Options#MAX_ITERS MAX_ITERS}: Number of times to try to
     *         hit the tolerance limit before giving up - default is 10.
     *     <li>{@link Options#NUM_TRIES NUM_TRIES}: Number of times to run the
     *         k-means algorithm with a different randomly selected starting
     *         points - helps avoid local minimum. Default is 1.
     *     <li>{@link Options#CREATE_TEMP_TABLE CREATE_TEMP_TABLE}: If {@link
     *         Options#TRUE TRUE}, a unique temporary table name will be
     *         generated in the sys_temp schema and used in place of {@link
     *         Options#RESULT_TABLE RESULT_TABLE}. If {@link
     *         Options#RESULT_TABLE_PERSIST RESULT_TABLE_PERSIST} is {@link
     *         Options#FALSE FALSE} (or unspecified), then this is always
     *         allowed even if the caller does not have permission to create
     *         tables. The generated name is returned in {@link
     *         com.gpudb.protocol.AggregateKMeansResponse.Info#QUALIFIED_RESULT_TABLE_NAME
     *         QUALIFIED_RESULT_TABLE_NAME}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#RESULT_TABLE RESULT_TABLE}: The name of a table
     *         used to store the results, in [schema_name.]table_name format,
     *         using standard <a
     *         href="../../../../../../concepts/tables/#table-name-resolution"
     *         target="_top">name resolution rules</a> and meeting <a
     *         href="../../../../../../concepts/tables/#table-naming-criteria"
     *         target="_top">table naming criteria</a>.  If this option is
     *         specified, the results are not returned in the response.
     *     <li>{@link Options#RESULT_TABLE_PERSIST RESULT_TABLE_PERSIST}: If
     *         {@link Options#TRUE TRUE}, then the result table specified in
     *         {@link Options#RESULT_TABLE RESULT_TABLE} will be persisted and
     *         will not expire unless a {@link Options#TTL TTL} is specified.
     *         If {@link Options#FALSE FALSE}, then the result table will be an
     *         in-memory table and will expire unless a {@link Options#TTL TTL}
     *         is specified otherwise.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#TTL TTL}: Sets the <a
     *         href="../../../../../../concepts/ttl/" target="_top">TTL</a> of
     *         the table specified in {@link Options#RESULT_TABLE
     *         RESULT_TABLE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#WHITEN WHITEN}: When set to 1 each of the columns
     *         is first normalized by its stdv - default is not to whiten.
     *     <li>{@link Options#MAX_ITERS MAX_ITERS}: Number of times to try to
     *         hit the tolerance limit before giving up - default is 10.
     *     <li>{@link Options#NUM_TRIES NUM_TRIES}: Number of times to run the
     *         k-means algorithm with a different randomly selected starting
     *         points - helps avoid local minimum. Default is 1.
     *     <li>{@link Options#CREATE_TEMP_TABLE CREATE_TEMP_TABLE}: If {@link
     *         Options#TRUE TRUE}, a unique temporary table name will be
     *         generated in the sys_temp schema and used in place of {@link
     *         Options#RESULT_TABLE RESULT_TABLE}. If {@link
     *         Options#RESULT_TABLE_PERSIST RESULT_TABLE_PERSIST} is {@link
     *         Options#FALSE FALSE} (or unspecified), then this is always
     *         allowed even if the caller does not have permission to create
     *         tables. The generated name is returned in {@link
     *         com.gpudb.protocol.AggregateKMeansResponse.Info#QUALIFIED_RESULT_TABLE_NAME
     *         QUALIFIED_RESULT_TABLE_NAME}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#RESULT_TABLE RESULT_TABLE}: The name of a table
     *         used to store the results, in [schema_name.]table_name format,
     *         using standard <a
     *         href="../../../../../../concepts/tables/#table-name-resolution"
     *         target="_top">name resolution rules</a> and meeting <a
     *         href="../../../../../../concepts/tables/#table-naming-criteria"
     *         target="_top">table naming criteria</a>.  If this option is
     *         specified, the results are not returned in the response.
     *     <li>{@link Options#RESULT_TABLE_PERSIST RESULT_TABLE_PERSIST}: If
     *         {@link Options#TRUE TRUE}, then the result table specified in
     *         {@link Options#RESULT_TABLE RESULT_TABLE} will be persisted and
     *         will not expire unless a {@link Options#TTL TTL} is specified.
     *         If {@link Options#FALSE FALSE}, then the result table will be an
     *         in-memory table and will expire unless a {@link Options#TTL TTL}
     *         is specified otherwise.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#TTL TTL}: Sets the <a
     *         href="../../../../../../concepts/ttl/" target="_top">TTL</a> of
     *         the table specified in {@link Options#RESULT_TABLE
     *         RESULT_TABLE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AggregateKMeansRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.columnNames;

            case 2:
                return this.k;

            case 3:
                return this.tolerance;

            case 4:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.columnNames = (List<String>)value;
                break;

            case 2:
                this.k = (Integer)value;
                break;

            case 3:
                this.tolerance = (Double)value;
                break;

            case 4:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AggregateKMeansRequest that = (AggregateKMeansRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.columnNames.equals( that.columnNames )
                 && ( this.k == that.k )
                 && ( (Double)this.tolerance ).equals( (Double)that.tolerance )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "columnNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.columnNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "k" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.k ) );
        builder.append( ", " );
        builder.append( gd.toString( "tolerance" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tolerance ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.columnNames.hashCode();
        hashCode = (31 * hashCode) + this.k;
        hashCode = (31 * hashCode) + ((Double)this.tolerance).hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
