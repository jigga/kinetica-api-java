/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#alterGraph(AlterGraphRequest)}.
 * <p>
 * For internal use only: Graph server admin command.
 * For internal use only: Graph server admin command.
 */
public class AlterGraphRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AlterGraphRequest")
            .namespace("com.gpudb")
            .fields()
                .name("graphName").type().stringType().noDefault()
                .name("action").type().stringType().noDefault()
                .name("actionArg").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Operation to be applied
     * Supported values:
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.AlterGraphRequest.Action#ADD_TABLE_MONITOR
     * ADD_TABLE_MONITOR}: Add a table monitor to a graph. The table name is
     * specified as the action argment.
     *         <li> {@link
     * com.gpudb.protocol.AlterGraphRequest.Action#RESET_CLIENT RESET_CLIENT}:
     * Reset all current operations on the client side. Used when the graph
     * server is restarted to recover from a failure.
     *         <li> {@link
     * com.gpudb.protocol.AlterGraphRequest.Action#RESET_SERVER RESET_SERVER}:
     * Reset all current operations on the server side. This is also sent on
     * (re)start.
     *         <li> {@link
     * com.gpudb.protocol.AlterGraphRequest.Action#CANCEL_TASK CANCEL_TASK}:
     * Cancel a specific task on the graph server.
     *         <li> {@link
     * com.gpudb.protocol.AlterGraphRequest.Action#ALTER_LOGGER ALTER_LOGGER}:
     * Change the server side log level; e.g., 'GraphServer.GraphSolver=DEBUG'
     *         <li> {@link
     * com.gpudb.protocol.AlterGraphRequest.Action#DELETE_ALL DELETE_ALL}:
     * Delete all graphs, and remove any persistence info.
     *         <li> {@link com.gpudb.protocol.AlterGraphRequest.Action#STATUS
     * STATUS}: Current status of the graph client (db side).
     *         <li> {@link
     * com.gpudb.protocol.AlterGraphRequest.Action#COLLECT_GRAPHS
     * COLLECT_GRAPHS}: Get the create command for all persisted graphs.
     *         <li> {@link
     * com.gpudb.protocol.AlterGraphRequest.Action#RESTORE_GRAPHS
     * RESTORE_GRAPHS}: Re-creates all graphs from persist info on rank0.
     * </ul>
     * A set of string constants for the parameter {@code action}.
     */
    public static final class Action {

        /**
         * Add a table monitor to a graph. The table name is specified as the
         * action argment.
         */
        public static final String ADD_TABLE_MONITOR = "add_table_monitor";

        /**
         * Reset all current operations on the client side. Used when the graph
         * server is restarted to recover from a failure.
         */
        public static final String RESET_CLIENT = "reset_client";

        /**
         * Reset all current operations on the server side. This is also sent
         * on (re)start.
         */
        public static final String RESET_SERVER = "reset_server";

        /**
         * Cancel a specific task on the graph server.
         */
        public static final String CANCEL_TASK = "cancel_task";

        /**
         * Change the server side log level; e.g.,
         * 'GraphServer.GraphSolver=DEBUG'
         */
        public static final String ALTER_LOGGER = "alter_logger";

        /**
         * Delete all graphs, and remove any persistence info.
         */
        public static final String DELETE_ALL = "delete_all";

        /**
         * Current status of the graph client (db side).
         */
        public static final String STATUS = "status";

        /**
         * Get the create command for all persisted graphs.
         */
        public static final String COLLECT_GRAPHS = "collect_graphs";

        /**
         * Re-creates all graphs from persist info on rank0.
         */
        public static final String RESTORE_GRAPHS = "restore_graphs";

        private Action() {  }
    }


    /**
     * Optional parameters.
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.AlterGraphRequest.Options#SERVER_ID SERVER_ID}:
     * Indicates which graph server(s) to send the request to. Default is to
     * send to get information about all the servers.
     * </ul>
     * The default value is an empty {@link Map}.
     * A set of string constants for the parameter {@code options}.
     */
    public static final class Options {

        /**
         * Indicates which graph server(s) to send the request to. Default is
         * to send to get information about all the servers.
         */
        public static final String SERVER_ID = "server_id";

        private Options() {  }
    }

    private String graphName;
    private String action;
    private String actionArg;
    private Map<String, String> options;


    /**
     * Constructs an AlterGraphRequest object with default parameters.
     */
    public AlterGraphRequest() {
        graphName = "";
        action = "";
        actionArg = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AlterGraphRequest object with the specified parameters.
     * 
     * @param graphName  Graph on which the operation should be applied.
     *                   If empty then it will apply to all graphs.
     *                   This request can be sent from the graph server to the
     *                   graph client, or from the client to the server
     *                   depending on the type of operation.
     * @param action  Operation to be applied
     *                Supported values:
     *                <ul>
     *                        <li> {@link
     *                com.gpudb.protocol.AlterGraphRequest.Action#ADD_TABLE_MONITOR
     *                ADD_TABLE_MONITOR}: Add a table monitor to a graph. The
     *                table name is specified as the action argment.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterGraphRequest.Action#RESET_CLIENT
     *                RESET_CLIENT}: Reset all current operations on the client
     *                side. Used when the graph server is restarted to recover
     *                from a failure.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterGraphRequest.Action#RESET_SERVER
     *                RESET_SERVER}: Reset all current operations on the server
     *                side. This is also sent on (re)start.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterGraphRequest.Action#CANCEL_TASK
     *                CANCEL_TASK}: Cancel a specific task on the graph server.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterGraphRequest.Action#ALTER_LOGGER
     *                ALTER_LOGGER}: Change the server side log level; e.g.,
     *                'GraphServer.GraphSolver=DEBUG'
     *                        <li> {@link
     *                com.gpudb.protocol.AlterGraphRequest.Action#DELETE_ALL
     *                DELETE_ALL}: Delete all graphs, and remove any
     *                persistence info.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterGraphRequest.Action#STATUS
     *                STATUS}: Current status of the graph client (db side).
     *                        <li> {@link
     *                com.gpudb.protocol.AlterGraphRequest.Action#COLLECT_GRAPHS
     *                COLLECT_GRAPHS}: Get the create command for all persisted
     *                graphs.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterGraphRequest.Action#RESTORE_GRAPHS
     *                RESTORE_GRAPHS}: Re-creates all graphs from persist info
     *                on rank0.
     *                </ul>
     * @param actionArg  Action specific argument.
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterGraphRequest.Options#SERVER_ID
     *                 SERVER_ID}: Indicates which graph server(s) to send the
     *                 request to. Default is to send to get information about
     *                 all the servers.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     */
    public AlterGraphRequest(String graphName, String action, String actionArg, Map<String, String> options) {
        this.graphName = (graphName == null) ? "" : graphName;
        this.action = (action == null) ? "" : action;
        this.actionArg = (actionArg == null) ? "" : actionArg;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Graph on which the operation should be applied.
     *         If empty then it will apply to all graphs.
     *         This request can be sent from the graph server to the graph
     *         client, or from the client to the server depending on the type
     *         of operation.
     * 
     */
    public String getGraphName() {
        return graphName;
    }

    /**
     * 
     * @param graphName  Graph on which the operation should be applied.
     *                   If empty then it will apply to all graphs.
     *                   This request can be sent from the graph server to the
     *                   graph client, or from the client to the server
     *                   depending on the type of operation.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterGraphRequest setGraphName(String graphName) {
        this.graphName = (graphName == null) ? "" : graphName;
        return this;
    }

    /**
     * 
     * @return Operation to be applied
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AlterGraphRequest.Action#ADD_TABLE_MONITOR
     *         ADD_TABLE_MONITOR}: Add a table monitor to a graph. The table
     *         name is specified as the action argment.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterGraphRequest.Action#RESET_CLIENT
     *         RESET_CLIENT}: Reset all current operations on the client side.
     *         Used when the graph server is restarted to recover from a
     *         failure.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterGraphRequest.Action#RESET_SERVER
     *         RESET_SERVER}: Reset all current operations on the server side.
     *         This is also sent on (re)start.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterGraphRequest.Action#CANCEL_TASK
     *         CANCEL_TASK}: Cancel a specific task on the graph server.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterGraphRequest.Action#ALTER_LOGGER
     *         ALTER_LOGGER}: Change the server side log level; e.g.,
     *         'GraphServer.GraphSolver=DEBUG'
     *                 <li> {@link
     *         com.gpudb.protocol.AlterGraphRequest.Action#DELETE_ALL
     *         DELETE_ALL}: Delete all graphs, and remove any persistence info.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterGraphRequest.Action#STATUS STATUS}:
     *         Current status of the graph client (db side).
     *                 <li> {@link
     *         com.gpudb.protocol.AlterGraphRequest.Action#COLLECT_GRAPHS
     *         COLLECT_GRAPHS}: Get the create command for all persisted
     *         graphs.
     *                 <li> {@link
     *         com.gpudb.protocol.AlterGraphRequest.Action#RESTORE_GRAPHS
     *         RESTORE_GRAPHS}: Re-creates all graphs from persist info on
     *         rank0.
     *         </ul>
     * 
     */
    public String getAction() {
        return action;
    }

    /**
     * 
     * @param action  Operation to be applied
     *                Supported values:
     *                <ul>
     *                        <li> {@link
     *                com.gpudb.protocol.AlterGraphRequest.Action#ADD_TABLE_MONITOR
     *                ADD_TABLE_MONITOR}: Add a table monitor to a graph. The
     *                table name is specified as the action argment.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterGraphRequest.Action#RESET_CLIENT
     *                RESET_CLIENT}: Reset all current operations on the client
     *                side. Used when the graph server is restarted to recover
     *                from a failure.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterGraphRequest.Action#RESET_SERVER
     *                RESET_SERVER}: Reset all current operations on the server
     *                side. This is also sent on (re)start.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterGraphRequest.Action#CANCEL_TASK
     *                CANCEL_TASK}: Cancel a specific task on the graph server.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterGraphRequest.Action#ALTER_LOGGER
     *                ALTER_LOGGER}: Change the server side log level; e.g.,
     *                'GraphServer.GraphSolver=DEBUG'
     *                        <li> {@link
     *                com.gpudb.protocol.AlterGraphRequest.Action#DELETE_ALL
     *                DELETE_ALL}: Delete all graphs, and remove any
     *                persistence info.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterGraphRequest.Action#STATUS
     *                STATUS}: Current status of the graph client (db side).
     *                        <li> {@link
     *                com.gpudb.protocol.AlterGraphRequest.Action#COLLECT_GRAPHS
     *                COLLECT_GRAPHS}: Get the create command for all persisted
     *                graphs.
     *                        <li> {@link
     *                com.gpudb.protocol.AlterGraphRequest.Action#RESTORE_GRAPHS
     *                RESTORE_GRAPHS}: Re-creates all graphs from persist info
     *                on rank0.
     *                </ul>
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterGraphRequest setAction(String action) {
        this.action = (action == null) ? "" : action;
        return this;
    }

    /**
     * 
     * @return Action specific argument.
     * 
     */
    public String getActionArg() {
        return actionArg;
    }

    /**
     * 
     * @param actionArg  Action specific argument.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterGraphRequest setActionArg(String actionArg) {
        this.actionArg = (actionArg == null) ? "" : actionArg;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AlterGraphRequest.Options#SERVER_ID
     *         SERVER_ID}: Indicates which graph server(s) to send the request
     *         to. Default is to send to get information about all the servers.
     *         </ul>
     *         The default value is an empty {@link Map}.
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AlterGraphRequest.Options#SERVER_ID
     *                 SERVER_ID}: Indicates which graph server(s) to send the
     *                 request to. Default is to send to get information about
     *                 all the servers.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AlterGraphRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.graphName;

            case 1:
                return this.action;

            case 2:
                return this.actionArg;

            case 3:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.graphName = (String)value;
                break;

            case 1:
                this.action = (String)value;
                break;

            case 2:
                this.actionArg = (String)value;
                break;

            case 3:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AlterGraphRequest that = (AlterGraphRequest)obj;

        return ( this.graphName.equals( that.graphName )
                 && this.action.equals( that.action )
                 && this.actionArg.equals( that.actionArg )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "graphName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.graphName ) );
        builder.append( ", " );
        builder.append( gd.toString( "action" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.action ) );
        builder.append( ", " );
        builder.append( gd.toString( "actionArg" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.actionArg ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.graphName.hashCode();
        hashCode = (31 * hashCode) + this.action.hashCode();
        hashCode = (31 * hashCode) + this.actionArg.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
