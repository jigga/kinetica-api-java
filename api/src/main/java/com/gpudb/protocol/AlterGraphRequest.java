
/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;


import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


public class AlterGraphRequest implements IndexedRecord {

    private static final Schema schema$ = SchemaBuilder
            .record("AlterGraphRequest")
            .namespace("com.gpudb")
            .fields()
                .name("graphName").type().stringType().noDefault()
                .name("action").type().stringType().noDefault()
                .name("actionArg").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    public static Schema getClassSchema() {
        return schema$;
    }


    public static final class Action {

        public static final String ADD_TABLE_MONITOR = "add_table_monitor";

        public static final String RESET_CLIENT = "reset_client";

        public static final String RESET_SERVER = "reset_server";

        public static final String CANCEL_TASK = "cancel_task";

        public static final String ALTER_LOGGER = "alter_logger";

        public static final String DELETE_ALL = "delete_all";

        public static final String STATUS = "status";

        public static final String COLLECT_GRAPHS = "collect_graphs";

        public static final String RESTORE_GRAPHS = "restore_graphs";


        private Action() {  }
    }


    public static final class Options {

        public static final String SERVER_ID = "server_id";


        private Options() {  }
    }


    private String graphName;
    private String action;
    private String actionArg;
    private Map<String, String> options;


    public AlterGraphRequest() {
        graphName = "";
        action = "";
        actionArg = "";
        options = new LinkedHashMap<>();
    }

    public AlterGraphRequest(String graphName, String action, String actionArg, Map<String, String> options) {
        this.graphName = (graphName == null) ? "" : graphName;
        this.action = (action == null) ? "" : action;
        this.actionArg = (actionArg == null) ? "" : actionArg;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    public String getGraphName() {
        return graphName;
    }

    public AlterGraphRequest setGraphName(String graphName) {
        this.graphName = (graphName == null) ? "" : graphName;
        return this;
    }

    public String getAction() {
        return action;
    }

    public AlterGraphRequest setAction(String action) {
        this.action = (action == null) ? "" : action;
        return this;
    }

    public String getActionArg() {
        return actionArg;
    }

    public AlterGraphRequest setActionArg(String actionArg) {
        this.actionArg = (actionArg == null) ? "" : actionArg;
        return this;
    }

    public Map<String, String> getOptions() {
        return options;
    }

    public AlterGraphRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    @Override
    public Schema getSchema() {
        return schema$;
    }

    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.graphName;

            case 1:
                return this.action;

            case 2:
                return this.actionArg;

            case 3:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.graphName = (String)value;
                break;

            case 1:
                this.action = (String)value;
                break;

            case 2:
                this.actionArg = (String)value;
                break;

            case 3:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }


    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AlterGraphRequest that = (AlterGraphRequest)obj;

        return ( this.graphName.equals( that.graphName )
                 && this.action.equals( that.action )
                 && this.actionArg.equals( that.actionArg )
                 && this.options.equals( that.options ) );
    }


    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "graphName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.graphName ) );
        builder.append( ", " );
        builder.append( gd.toString( "action" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.action ) );
        builder.append( ", " );
        builder.append( gd.toString( "actionArg" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.actionArg ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }


    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.graphName.hashCode();
        hashCode = (31 * hashCode) + this.action.hashCode();
        hashCode = (31 * hashCode) + this.actionArg.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }


}
