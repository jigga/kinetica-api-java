/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of results returned by {@link
 * com.gpudb.GPUdb#showGraph(ShowGraphRequest) GPUdb.showGraph}.
 */
public class ShowGraphResponse implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("ShowGraphResponse")
            .namespace("com.gpudb")
            .fields()
                .name("result").type().booleanType().noDefault()
                .name("load").type().array().items().intType().noDefault()
                .name("memory").type().array().items().longType().noDefault()
                .name("graphNames").type().array().items().stringType().noDefault()
                .name("graphServerIds").type().array().items().intType().noDefault()
                .name("graphOwnerUserNames").type().array().items().stringType().noDefault()
                .name("graphOwnerResourceGroups").type().array().items().stringType().noDefault()
                .name("directed").type().array().items().booleanType().noDefault()
                .name("numNodes").type().array().items().longType().noDefault()
                .name("numEdges").type().array().items().longType().noDefault()
                .name("numBytes").type().array().items().longType().noDefault()
                .name("resourceCapacity").type().array().items().longType().noDefault()
                .name("isPersisted").type().array().items().booleanType().noDefault()
                .name("isPartitioned").type().array().items().booleanType().noDefault()
                .name("isSyncDb").type().array().items().booleanType().noDefault()
                .name("hasInsertTableMonitor").type().array().items().booleanType().noDefault()
                .name("originalRequest").type().array().items().stringType().noDefault()
                .name("info").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    private boolean result;
    private List<Integer> load;
    private List<Long> memory;
    private List<String> graphNames;
    private List<Integer> graphServerIds;
    private List<String> graphOwnerUserNames;
    private List<String> graphOwnerResourceGroups;
    private List<Boolean> directed;
    private List<Long> numNodes;
    private List<Long> numEdges;
    private List<Long> numBytes;
    private List<Long> resourceCapacity;
    private List<Boolean> isPersisted;
    private List<Boolean> isPartitioned;
    private List<Boolean> isSyncDb;
    private List<Boolean> hasInsertTableMonitor;
    private List<String> originalRequest;
    private Map<String, String> info;

    /**
     * Constructs a ShowGraphResponse object with default parameters.
     */
    public ShowGraphResponse() {
    }

    /**
     * Indicates a success. This call will fails of the graph specified in the
     * request does not exist.
     *
     * @return The current value of {@code result}.
     */
    public boolean getResult() {
        return result;
    }

    /**
     * Indicates a success. This call will fails of the graph specified in the
     * request does not exist.
     *
     * @param result  The new value for {@code result}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphResponse setResult(boolean result) {
        this.result = result;
        return this;
    }

    /**
     * A percentage approximating the current computational load on the server.
     *
     * @return The current value of {@code load}.
     */
    public List<Integer> getLoad() {
        return load;
    }

    /**
     * A percentage approximating the current computational load on the server.
     *
     * @param load  The new value for {@code load}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphResponse setLoad(List<Integer> load) {
        this.load = (load == null) ? new ArrayList<Integer>() : load;
        return this;
    }

    /**
     * Available memory.
     *
     * @return The current value of {@code memory}.
     */
    public List<Long> getMemory() {
        return memory;
    }

    /**
     * Available memory.
     *
     * @param memory  The new value for {@code memory}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphResponse setMemory(List<Long> memory) {
        this.memory = (memory == null) ? new ArrayList<Long>() : memory;
        return this;
    }

    /**
     * Name(s) of the graph(s).
     *
     * @return The current value of {@code graphNames}.
     */
    public List<String> getGraphNames() {
        return graphNames;
    }

    /**
     * Name(s) of the graph(s).
     *
     * @param graphNames  The new value for {@code graphNames}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphResponse setGraphNames(List<String> graphNames) {
        this.graphNames = (graphNames == null) ? new ArrayList<String>() : graphNames;
        return this;
    }

    /**
     * Id(s) of the graph(s).
     *
     * @return The current value of {@code graphServerIds}.
     */
    public List<Integer> getGraphServerIds() {
        return graphServerIds;
    }

    /**
     * Id(s) of the graph(s).
     *
     * @param graphServerIds  The new value for {@code graphServerIds}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphResponse setGraphServerIds(List<Integer> graphServerIds) {
        this.graphServerIds = (graphServerIds == null) ? new ArrayList<Integer>() : graphServerIds;
        return this;
    }

    /**
     * Owner the graph(s) and associated solution table(s).
     *
     * @return The current value of {@code graphOwnerUserNames}.
     */
    public List<String> getGraphOwnerUserNames() {
        return graphOwnerUserNames;
    }

    /**
     * Owner the graph(s) and associated solution table(s).
     *
     * @param graphOwnerUserNames  The new value for {@code
     *                             graphOwnerUserNames}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphResponse setGraphOwnerUserNames(List<String> graphOwnerUserNames) {
        this.graphOwnerUserNames = (graphOwnerUserNames == null) ? new ArrayList<String>() : graphOwnerUserNames;
        return this;
    }

    /**
     * Owner resource groups(s) of the graph(s).
     *
     * @return The current value of {@code graphOwnerResourceGroups}.
     */
    public List<String> getGraphOwnerResourceGroups() {
        return graphOwnerResourceGroups;
    }

    /**
     * Owner resource groups(s) of the graph(s).
     *
     * @param graphOwnerResourceGroups  The new value for {@code
     *                                  graphOwnerResourceGroups}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphResponse setGraphOwnerResourceGroups(List<String> graphOwnerResourceGroups) {
        this.graphOwnerResourceGroups = (graphOwnerResourceGroups == null) ? new ArrayList<String>() : graphOwnerResourceGroups;
        return this;
    }

    /**
     * Whether or not the edges of the graph have directions (bi-directional
     * edges can still exist in directed graphs). Consult <a
     * href="../../../../../../graph_solver/network_graph_solver/#directed-graphs"
     * target="_top">Directed Graphs</a> for more details.
     *
     * @return The current value of {@code directed}.
     */
    public List<Boolean> getDirected() {
        return directed;
    }

    /**
     * Whether or not the edges of the graph have directions (bi-directional
     * edges can still exist in directed graphs). Consult <a
     * href="../../../../../../graph_solver/network_graph_solver/#directed-graphs"
     * target="_top">Directed Graphs</a> for more details.
     *
     * @param directed  The new value for {@code directed}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphResponse setDirected(List<Boolean> directed) {
        this.directed = (directed == null) ? new ArrayList<Boolean>() : directed;
        return this;
    }

    /**
     * Total number of nodes in the graph.
     *
     * @return The current value of {@code numNodes}.
     */
    public List<Long> getNumNodes() {
        return numNodes;
    }

    /**
     * Total number of nodes in the graph.
     *
     * @param numNodes  The new value for {@code numNodes}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphResponse setNumNodes(List<Long> numNodes) {
        this.numNodes = (numNodes == null) ? new ArrayList<Long>() : numNodes;
        return this;
    }

    /**
     * Total number of edges in the graph.
     *
     * @return The current value of {@code numEdges}.
     */
    public List<Long> getNumEdges() {
        return numEdges;
    }

    /**
     * Total number of edges in the graph.
     *
     * @param numEdges  The new value for {@code numEdges}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphResponse setNumEdges(List<Long> numEdges) {
        this.numEdges = (numEdges == null) ? new ArrayList<Long>() : numEdges;
        return this;
    }

    /**
     * Memory this graph uses in bytes.
     *
     * @return The current value of {@code numBytes}.
     */
    public List<Long> getNumBytes() {
        return numBytes;
    }

    /**
     * Memory this graph uses in bytes.
     *
     * @param numBytes  The new value for {@code numBytes}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphResponse setNumBytes(List<Long> numBytes) {
        this.numBytes = (numBytes == null) ? new ArrayList<Long>() : numBytes;
        return this;
    }

    /**
     * Memory this graph uses in bytes.
     *
     * @return The current value of {@code resourceCapacity}.
     */
    public List<Long> getResourceCapacity() {
        return resourceCapacity;
    }

    /**
     * Memory this graph uses in bytes.
     *
     * @param resourceCapacity  The new value for {@code resourceCapacity}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphResponse setResourceCapacity(List<Long> resourceCapacity) {
        this.resourceCapacity = (resourceCapacity == null) ? new ArrayList<Long>() : resourceCapacity;
        return this;
    }

    /**
     * Shows whether or not the graph is persisted (saved and loaded on
     * launch).
     *
     * @return The current value of {@code isPersisted}.
     */
    public List<Boolean> getIsPersisted() {
        return isPersisted;
    }

    /**
     * Shows whether or not the graph is persisted (saved and loaded on
     * launch).
     *
     * @param isPersisted  The new value for {@code isPersisted}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphResponse setIsPersisted(List<Boolean> isPersisted) {
        this.isPersisted = (isPersisted == null) ? new ArrayList<Boolean>() : isPersisted;
        return this;
    }

    /**
     * Indicated if the graph data data is distributed across all available
     * servers.
     *
     * @return The current value of {@code isPartitioned}.
     */
    public List<Boolean> getIsPartitioned() {
        return isPartitioned;
    }

    /**
     * Indicated if the graph data data is distributed across all available
     * servers.
     *
     * @param isPartitioned  The new value for {@code isPartitioned}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphResponse setIsPartitioned(List<Boolean> isPartitioned) {
        this.isPartitioned = (isPartitioned == null) ? new ArrayList<Boolean>() : isPartitioned;
        return this;
    }

    /**
     * Shows whether or not the graph is linked to the original tables that
     * created it, and will potentially be re-created instead loaded from
     * persist on launch.
     *
     * @return The current value of {@code isSyncDb}.
     */
    public List<Boolean> getIsSyncDb() {
        return isSyncDb;
    }

    /**
     * Shows whether or not the graph is linked to the original tables that
     * created it, and will potentially be re-created instead loaded from
     * persist on launch.
     *
     * @param isSyncDb  The new value for {@code isSyncDb}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphResponse setIsSyncDb(List<Boolean> isSyncDb) {
        this.isSyncDb = (isSyncDb == null) ? new ArrayList<Boolean>() : isSyncDb;
        return this;
    }

    /**
     * Shows whether or not the graph has an insert table monitor attached to
     * it.
     *
     * @return The current value of {@code hasInsertTableMonitor}.
     */
    public List<Boolean> getHasInsertTableMonitor() {
        return hasInsertTableMonitor;
    }

    /**
     * Shows whether or not the graph has an insert table monitor attached to
     * it.
     *
     * @param hasInsertTableMonitor  The new value for {@code
     *                               hasInsertTableMonitor}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphResponse setHasInsertTableMonitor(List<Boolean> hasInsertTableMonitor) {
        this.hasInsertTableMonitor = (hasInsertTableMonitor == null) ? new ArrayList<Boolean>() : hasInsertTableMonitor;
        return this;
    }

    /**
     * The original client request used to create the graph (before any
     * expression evaluation or separator processing).
     *
     * @return The current value of {@code originalRequest}.
     */
    public List<String> getOriginalRequest() {
        return originalRequest;
    }

    /**
     * The original client request used to create the graph (before any
     * expression evaluation or separator processing).
     *
     * @param originalRequest  The new value for {@code originalRequest}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphResponse setOriginalRequest(List<String> originalRequest) {
        this.originalRequest = (originalRequest == null) ? new ArrayList<String>() : originalRequest;
        return this;
    }

    /**
     * Additional information.
     *
     * @return The current value of {@code info}.
     */
    public Map<String, String> getInfo() {
        return info;
    }

    /**
     * Additional information.
     *
     * @param info  The new value for {@code info}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ShowGraphResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.result;

            case 1:
                return this.load;

            case 2:
                return this.memory;

            case 3:
                return this.graphNames;

            case 4:
                return this.graphServerIds;

            case 5:
                return this.graphOwnerUserNames;

            case 6:
                return this.graphOwnerResourceGroups;

            case 7:
                return this.directed;

            case 8:
                return this.numNodes;

            case 9:
                return this.numEdges;

            case 10:
                return this.numBytes;

            case 11:
                return this.resourceCapacity;

            case 12:
                return this.isPersisted;

            case 13:
                return this.isPartitioned;

            case 14:
                return this.isSyncDb;

            case 15:
                return this.hasInsertTableMonitor;

            case 16:
                return this.originalRequest;

            case 17:
                return this.info;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.result = (Boolean)value;
                break;

            case 1:
                this.load = (List<Integer>)value;
                break;

            case 2:
                this.memory = (List<Long>)value;
                break;

            case 3:
                this.graphNames = (List<String>)value;
                break;

            case 4:
                this.graphServerIds = (List<Integer>)value;
                break;

            case 5:
                this.graphOwnerUserNames = (List<String>)value;
                break;

            case 6:
                this.graphOwnerResourceGroups = (List<String>)value;
                break;

            case 7:
                this.directed = (List<Boolean>)value;
                break;

            case 8:
                this.numNodes = (List<Long>)value;
                break;

            case 9:
                this.numEdges = (List<Long>)value;
                break;

            case 10:
                this.numBytes = (List<Long>)value;
                break;

            case 11:
                this.resourceCapacity = (List<Long>)value;
                break;

            case 12:
                this.isPersisted = (List<Boolean>)value;
                break;

            case 13:
                this.isPartitioned = (List<Boolean>)value;
                break;

            case 14:
                this.isSyncDb = (List<Boolean>)value;
                break;

            case 15:
                this.hasInsertTableMonitor = (List<Boolean>)value;
                break;

            case 16:
                this.originalRequest = (List<String>)value;
                break;

            case 17:
                this.info = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        ShowGraphResponse that = (ShowGraphResponse)obj;

        return ( ( this.result == that.result )
                 && this.load.equals( that.load )
                 && this.memory.equals( that.memory )
                 && this.graphNames.equals( that.graphNames )
                 && this.graphServerIds.equals( that.graphServerIds )
                 && this.graphOwnerUserNames.equals( that.graphOwnerUserNames )
                 && this.graphOwnerResourceGroups.equals( that.graphOwnerResourceGroups )
                 && this.directed.equals( that.directed )
                 && this.numNodes.equals( that.numNodes )
                 && this.numEdges.equals( that.numEdges )
                 && this.numBytes.equals( that.numBytes )
                 && this.resourceCapacity.equals( that.resourceCapacity )
                 && this.isPersisted.equals( that.isPersisted )
                 && this.isPartitioned.equals( that.isPartitioned )
                 && this.isSyncDb.equals( that.isSyncDb )
                 && this.hasInsertTableMonitor.equals( that.hasInsertTableMonitor )
                 && this.originalRequest.equals( that.originalRequest )
                 && this.info.equals( that.info ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "result" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.result ) );
        builder.append( ", " );
        builder.append( gd.toString( "load" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.load ) );
        builder.append( ", " );
        builder.append( gd.toString( "memory" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.memory ) );
        builder.append( ", " );
        builder.append( gd.toString( "graphNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.graphNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "graphServerIds" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.graphServerIds ) );
        builder.append( ", " );
        builder.append( gd.toString( "graphOwnerUserNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.graphOwnerUserNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "graphOwnerResourceGroups" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.graphOwnerResourceGroups ) );
        builder.append( ", " );
        builder.append( gd.toString( "directed" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.directed ) );
        builder.append( ", " );
        builder.append( gd.toString( "numNodes" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.numNodes ) );
        builder.append( ", " );
        builder.append( gd.toString( "numEdges" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.numEdges ) );
        builder.append( ", " );
        builder.append( gd.toString( "numBytes" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.numBytes ) );
        builder.append( ", " );
        builder.append( gd.toString( "resourceCapacity" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.resourceCapacity ) );
        builder.append( ", " );
        builder.append( gd.toString( "isPersisted" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.isPersisted ) );
        builder.append( ", " );
        builder.append( gd.toString( "isPartitioned" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.isPartitioned ) );
        builder.append( ", " );
        builder.append( gd.toString( "isSyncDb" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.isSyncDb ) );
        builder.append( ", " );
        builder.append( gd.toString( "hasInsertTableMonitor" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.hasInsertTableMonitor ) );
        builder.append( ", " );
        builder.append( gd.toString( "originalRequest" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.originalRequest ) );
        builder.append( ", " );
        builder.append( gd.toString( "info" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.info ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + ((Boolean)this.result).hashCode();
        hashCode = (31 * hashCode) + this.load.hashCode();
        hashCode = (31 * hashCode) + this.memory.hashCode();
        hashCode = (31 * hashCode) + this.graphNames.hashCode();
        hashCode = (31 * hashCode) + this.graphServerIds.hashCode();
        hashCode = (31 * hashCode) + this.graphOwnerUserNames.hashCode();
        hashCode = (31 * hashCode) + this.graphOwnerResourceGroups.hashCode();
        hashCode = (31 * hashCode) + this.directed.hashCode();
        hashCode = (31 * hashCode) + this.numNodes.hashCode();
        hashCode = (31 * hashCode) + this.numEdges.hashCode();
        hashCode = (31 * hashCode) + this.numBytes.hashCode();
        hashCode = (31 * hashCode) + this.resourceCapacity.hashCode();
        hashCode = (31 * hashCode) + this.isPersisted.hashCode();
        hashCode = (31 * hashCode) + this.isPartitioned.hashCode();
        hashCode = (31 * hashCode) + this.isSyncDb.hashCode();
        hashCode = (31 * hashCode) + this.hasInsertTableMonitor.hashCode();
        hashCode = (31 * hashCode) + this.originalRequest.hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }
}
