/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#hasPermission(HasPermissionRequest)}.
 * <p>
 * Checks if the specified user has the specified permission on the specified
 * object.
 */
public class HasPermissionRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("HasPermissionRequest")
            .namespace("com.gpudb")
            .fields()
                .name("name").type().stringType().noDefault()
                .name("target").type().stringType().noDefault()
                .name("permission").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Permission to check for.
     * Supported values:
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.HasPermissionRequest.Permission#CONNECT CONNECT}:
     * Connect access on the given data source
     *         <li> {@link
     * com.gpudb.protocol.HasPermissionRequest.Permission#CREDENTIAL_ADMIN
     * CREDENTIAL_ADMIN}: Full read/write and administrative access on the
     * credential.
     *         <li> {@link
     * com.gpudb.protocol.HasPermissionRequest.Permission#CREDENTIAL_READ
     * CREDENTIAL_READ}: Ability to read and use the credential.
     *         <li> {@link
     * com.gpudb.protocol.HasPermissionRequest.Permission#DIRECTORY_READ
     * DIRECTORY_READ}: For files in the directory, access to list files,
     * download files, or use files in server side functions
     *         <li> {@link
     * com.gpudb.protocol.HasPermissionRequest.Permission#DIRECTORY_WRITE
     * DIRECTORY_WRITE}: Access to upload files to, or delete files from, the
     * directory. A user with write access automatically has read access
     *         <li> {@link
     * com.gpudb.protocol.HasPermissionRequest.Permission#PROC_EXECUTE
     * PROC_EXECUTE}: Execute access to the UDF.
     *         <li> {@link
     * com.gpudb.protocol.HasPermissionRequest.Permission#ROLE ROLE}: User is a
     * member of this role (including indirectly).
     *         <li> {@link
     * com.gpudb.protocol.HasPermissionRequest.Permission#SQL_PROC_EXECUTE
     * SQL_PROC_EXECUTE}: Execute access to the SQL proc.
     *         <li> {@link
     * com.gpudb.protocol.HasPermissionRequest.Permission#SYSTEM_ADMIN
     * SYSTEM_ADMIN}: Full access to all data and system functions.
     *         <li> {@link
     * com.gpudb.protocol.HasPermissionRequest.Permission#SYSTEM_READ
     * SYSTEM_READ}: Read-only access to all tables.
     *         <li> {@link
     * com.gpudb.protocol.HasPermissionRequest.Permission#SYSTEM_USER_ADMIN
     * SYSTEM_USER_ADMIN}: Access to administer users and roles that do not
     * have system_admin permission.
     *         <li> {@link
     * com.gpudb.protocol.HasPermissionRequest.Permission#SYSTEM_WRITE
     * SYSTEM_WRITE}: Read and write access to all tables.
     *         <li> {@link
     * com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_ADMIN
     * TABLE_ADMIN}: Full read/write and administrative access to the table.
     *         <li> {@link
     * com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_DELETE
     * TABLE_DELETE}: Delete access to the table.
     *         <li> {@link
     * com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_INSERT
     * TABLE_INSERT}: Insert access to the table.
     *         <li> {@link
     * com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_READ
     * TABLE_READ}: Read access to the table.
     *         <li> {@link
     * com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_UPDATE
     * TABLE_UPDATE}: Update access to the table.
     * </ul>
     * A set of string constants for the parameter {@code permission}.
     */
    public static final class Permission {

        /**
         * Connect access on the given data source
         */
        public static final String CONNECT = "connect";

        /**
         * Full read/write and administrative access on the credential.
         */
        public static final String CREDENTIAL_ADMIN = "credential_admin";

        /**
         * Ability to read and use the credential.
         */
        public static final String CREDENTIAL_READ = "credential_read";

        /**
         * For files in the directory, access to list files, download files, or
         * use files in server side functions
         */
        public static final String DIRECTORY_READ = "directory_read";

        /**
         * Access to upload files to, or delete files from, the directory. A
         * user with write access automatically has read access
         */
        public static final String DIRECTORY_WRITE = "directory_write";

        /**
         * Execute access to the UDF.
         */
        public static final String PROC_EXECUTE = "proc_execute";

        /**
         * User is a member of this role (including indirectly).
         */
        public static final String ROLE = "role";

        /**
         * Execute access to the SQL proc.
         */
        public static final String SQL_PROC_EXECUTE = "sql_proc_execute";

        /**
         * Full access to all data and system functions.
         */
        public static final String SYSTEM_ADMIN = "system_admin";

        /**
         * Read-only access to all tables.
         */
        public static final String SYSTEM_READ = "system_read";

        /**
         * Access to administer users and roles that do not have system_admin
         * permission.
         */
        public static final String SYSTEM_USER_ADMIN = "system_user_admin";

        /**
         * Read and write access to all tables.
         */
        public static final String SYSTEM_WRITE = "system_write";

        /**
         * Full read/write and administrative access to the table.
         */
        public static final String TABLE_ADMIN = "table_admin";

        /**
         * Delete access to the table.
         */
        public static final String TABLE_DELETE = "table_delete";

        /**
         * Insert access to the table.
         */
        public static final String TABLE_INSERT = "table_insert";

        /**
         * Read access to the table.
         */
        public static final String TABLE_READ = "table_read";

        /**
         * Update access to the table.
         */
        public static final String TABLE_UPDATE = "table_update";

        private Permission() {  }
    }


    /**
     * Optional parameters.
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.HasPermissionRequest.Options#NO_ERROR_IF_NOT_EXISTS
     * NO_ERROR_IF_NOT_EXISTS}: If {@code false} will return an error if the
     * provided {@code target} does not exist or is blank. If {@code true} then
     * it will return {@code false} for {@code hasPermission}.
     * Supported values:
     * <ul>
     *         <li> {@link com.gpudb.protocol.HasPermissionRequest.Options#TRUE
     * TRUE}
     *         <li> {@link
     * com.gpudb.protocol.HasPermissionRequest.Options#FALSE FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.HasPermissionRequest.Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     * A set of string constants for the parameter {@code options}.
     */
    public static final class Options {

        /**
         * If {@code false} will return an error if the provided {@code target}
         * does not exist or is blank. If {@code true} then it will return
         * {@code false} for {@code hasPermission}.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.HasPermissionRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.HasPermissionRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.HasPermissionRequest.Options#FALSE FALSE}.
         */
        public static final String NO_ERROR_IF_NOT_EXISTS = "no_error_if_not_exists";
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private Options() {  }
    }

    private String name;
    private String target;
    private String permission;
    private Map<String, String> options;


    /**
     * Constructs a HasPermissionRequest object with default parameters.
     */
    public HasPermissionRequest() {
        name = "";
        target = "";
        permission = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a HasPermissionRequest object with the specified parameters.
     * 
     * @param name  Name of the user for which the permission is being checked.
     *              Must be an existing user. If blank, will use the current
     *              user.  The default value is ''.
     * @param target  Name of object to check for the requested permission.  It
     *                is recommended to use a fully-qualified name when
     *                possible.
     * @param permission  Permission to check for.
     *                    Supported values:
     *                    <ul>
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#CONNECT
     *                    CONNECT}: Connect access on the given data source
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#CREDENTIAL_ADMIN
     *                    CREDENTIAL_ADMIN}: Full read/write and administrative
     *                    access on the credential.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#CREDENTIAL_READ
     *                    CREDENTIAL_READ}: Ability to read and use the
     *                    credential.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#DIRECTORY_READ
     *                    DIRECTORY_READ}: For files in the directory, access
     *                    to list files, download files, or use files in server
     *                    side functions
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#DIRECTORY_WRITE
     *                    DIRECTORY_WRITE}: Access to upload files to, or
     *                    delete files from, the directory. A user with write
     *                    access automatically has read access
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#PROC_EXECUTE
     *                    PROC_EXECUTE}: Execute access to the UDF.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#ROLE
     *                    ROLE}: User is a member of this role (including
     *                    indirectly).
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#SQL_PROC_EXECUTE
     *                    SQL_PROC_EXECUTE}: Execute access to the SQL proc.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#SYSTEM_ADMIN
     *                    SYSTEM_ADMIN}: Full access to all data and system
     *                    functions.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#SYSTEM_READ
     *                    SYSTEM_READ}: Read-only access to all tables.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#SYSTEM_USER_ADMIN
     *                    SYSTEM_USER_ADMIN}: Access to administer users and
     *                    roles that do not have system_admin permission.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#SYSTEM_WRITE
     *                    SYSTEM_WRITE}: Read and write access to all tables.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_ADMIN
     *                    TABLE_ADMIN}: Full read/write and administrative
     *                    access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_DELETE
     *                    TABLE_DELETE}: Delete access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_INSERT
     *                    TABLE_INSERT}: Insert access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_READ
     *                    TABLE_READ}: Read access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_UPDATE
     *                    TABLE_UPDATE}: Update access to the table.
     *                    </ul>
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.HasPermissionRequest.Options#NO_ERROR_IF_NOT_EXISTS
     *                 NO_ERROR_IF_NOT_EXISTS}: If {@code false} will return an
     *                 error if the provided {@code target} does not exist or
     *                 is blank. If {@code true} then it will return {@code
     *                 false} for {@code hasPermission}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.HasPermissionRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.HasPermissionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.HasPermissionRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     */
    public HasPermissionRequest(String name, String target, String permission, Map<String, String> options) {
        this.name = (name == null) ? "" : name;
        this.target = (target == null) ? "" : target;
        this.permission = (permission == null) ? "" : permission;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Name of the user for which the permission is being checked. Must
     *         be an existing user. If blank, will use the current user.  The
     *         default value is ''.
     * 
     */
    public String getName() {
        return name;
    }

    /**
     * 
     * @param name  Name of the user for which the permission is being checked.
     *              Must be an existing user. If blank, will use the current
     *              user.  The default value is ''.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public HasPermissionRequest setName(String name) {
        this.name = (name == null) ? "" : name;
        return this;
    }

    /**
     * 
     * @return Name of object to check for the requested permission.  It is
     *         recommended to use a fully-qualified name when possible.
     * 
     */
    public String getTarget() {
        return target;
    }

    /**
     * 
     * @param target  Name of object to check for the requested permission.  It
     *                is recommended to use a fully-qualified name when
     *                possible.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public HasPermissionRequest setTarget(String target) {
        this.target = (target == null) ? "" : target;
        return this;
    }

    /**
     * 
     * @return Permission to check for.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Permission#CONNECT
     *         CONNECT}: Connect access on the given data source
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Permission#CREDENTIAL_ADMIN
     *         CREDENTIAL_ADMIN}: Full read/write and administrative access on
     *         the credential.
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Permission#CREDENTIAL_READ
     *         CREDENTIAL_READ}: Ability to read and use the credential.
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Permission#DIRECTORY_READ
     *         DIRECTORY_READ}: For files in the directory, access to list
     *         files, download files, or use files in server side functions
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Permission#DIRECTORY_WRITE
     *         DIRECTORY_WRITE}: Access to upload files to, or delete files
     *         from, the directory. A user with write access automatically has
     *         read access
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Permission#PROC_EXECUTE
     *         PROC_EXECUTE}: Execute access to the UDF.
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Permission#ROLE ROLE}:
     *         User is a member of this role (including indirectly).
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Permission#SQL_PROC_EXECUTE
     *         SQL_PROC_EXECUTE}: Execute access to the SQL proc.
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Permission#SYSTEM_ADMIN
     *         SYSTEM_ADMIN}: Full access to all data and system functions.
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Permission#SYSTEM_READ
     *         SYSTEM_READ}: Read-only access to all tables.
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Permission#SYSTEM_USER_ADMIN
     *         SYSTEM_USER_ADMIN}: Access to administer users and roles that do
     *         not have system_admin permission.
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Permission#SYSTEM_WRITE
     *         SYSTEM_WRITE}: Read and write access to all tables.
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_ADMIN
     *         TABLE_ADMIN}: Full read/write and administrative access to the
     *         table.
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_DELETE
     *         TABLE_DELETE}: Delete access to the table.
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_INSERT
     *         TABLE_INSERT}: Insert access to the table.
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_READ
     *         TABLE_READ}: Read access to the table.
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_UPDATE
     *         TABLE_UPDATE}: Update access to the table.
     *         </ul>
     * 
     */
    public String getPermission() {
        return permission;
    }

    /**
     * 
     * @param permission  Permission to check for.
     *                    Supported values:
     *                    <ul>
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#CONNECT
     *                    CONNECT}: Connect access on the given data source
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#CREDENTIAL_ADMIN
     *                    CREDENTIAL_ADMIN}: Full read/write and administrative
     *                    access on the credential.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#CREDENTIAL_READ
     *                    CREDENTIAL_READ}: Ability to read and use the
     *                    credential.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#DIRECTORY_READ
     *                    DIRECTORY_READ}: For files in the directory, access
     *                    to list files, download files, or use files in server
     *                    side functions
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#DIRECTORY_WRITE
     *                    DIRECTORY_WRITE}: Access to upload files to, or
     *                    delete files from, the directory. A user with write
     *                    access automatically has read access
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#PROC_EXECUTE
     *                    PROC_EXECUTE}: Execute access to the UDF.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#ROLE
     *                    ROLE}: User is a member of this role (including
     *                    indirectly).
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#SQL_PROC_EXECUTE
     *                    SQL_PROC_EXECUTE}: Execute access to the SQL proc.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#SYSTEM_ADMIN
     *                    SYSTEM_ADMIN}: Full access to all data and system
     *                    functions.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#SYSTEM_READ
     *                    SYSTEM_READ}: Read-only access to all tables.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#SYSTEM_USER_ADMIN
     *                    SYSTEM_USER_ADMIN}: Access to administer users and
     *                    roles that do not have system_admin permission.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#SYSTEM_WRITE
     *                    SYSTEM_WRITE}: Read and write access to all tables.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_ADMIN
     *                    TABLE_ADMIN}: Full read/write and administrative
     *                    access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_DELETE
     *                    TABLE_DELETE}: Delete access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_INSERT
     *                    TABLE_INSERT}: Insert access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_READ
     *                    TABLE_READ}: Read access to the table.
     *                            <li> {@link
     *                    com.gpudb.protocol.HasPermissionRequest.Permission#TABLE_UPDATE
     *                    TABLE_UPDATE}: Update access to the table.
     *                    </ul>
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public HasPermissionRequest setPermission(String permission) {
        this.permission = (permission == null) ? "" : permission;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Options#NO_ERROR_IF_NOT_EXISTS
     *         NO_ERROR_IF_NOT_EXISTS}: If {@code false} will return an error
     *         if the provided {@code target} does not exist or is blank. If
     *         {@code true} then it will return {@code false} for {@code
     *         hasPermission}.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.HasPermissionRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.HasPermissionRequest.Options#FALSE FALSE}.
     *         </ul>
     *         The default value is an empty {@link Map}.
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.HasPermissionRequest.Options#NO_ERROR_IF_NOT_EXISTS
     *                 NO_ERROR_IF_NOT_EXISTS}: If {@code false} will return an
     *                 error if the provided {@code target} does not exist or
     *                 is blank. If {@code true} then it will return {@code
     *                 false} for {@code hasPermission}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.HasPermissionRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.HasPermissionRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.HasPermissionRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public HasPermissionRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.name;

            case 1:
                return this.target;

            case 2:
                return this.permission;

            case 3:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.name = (String)value;
                break;

            case 1:
                this.target = (String)value;
                break;

            case 2:
                this.permission = (String)value;
                break;

            case 3:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        HasPermissionRequest that = (HasPermissionRequest)obj;

        return ( this.name.equals( that.name )
                 && this.target.equals( that.target )
                 && this.permission.equals( that.permission )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "name" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.name ) );
        builder.append( ", " );
        builder.append( gd.toString( "target" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.target ) );
        builder.append( ", " );
        builder.append( gd.toString( "permission" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.permission ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.name.hashCode();
        hashCode = (31 * hashCode) + this.target.hashCode();
        hashCode = (31 * hashCode) + this.permission.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
