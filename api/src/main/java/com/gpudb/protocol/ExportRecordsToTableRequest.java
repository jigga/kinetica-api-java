/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#exportRecordsToTable(ExportRecordsToTableRequest)}.
 * <p>
 * Exports records from source table to  specified target table in an external
 * database
 */
public class ExportRecordsToTableRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("ExportRecordsToTableRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("remoteQuery").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Optional parameters.
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.ExportRecordsToTableRequest.Options#BATCH_SIZE
     * BATCH_SIZE}: Batch size, which determines how many rows to export per
     * round trip.
     *         <li> {@link
     * com.gpudb.protocol.ExportRecordsToTableRequest.Options#DATASINK_NAME
     * DATASINK_NAME}: Name of an existing external data sink to which table
     * name specified in {@code tableName} will be exported
     * </ul>
     * The default value is an empty {@link Map}.
     * A set of string constants for the parameter {@code options}.
     */
    public static final class Options {

        /**
         * Batch size, which determines how many rows to export per round trip.
         */
        public static final String BATCH_SIZE = "batch_size";

        /**
         * Name of an existing external data sink to which table name specified
         * in {@code tableName} will be exported
         */
        public static final String DATASINK_NAME = "datasink_name";

        private Options() {  }
    }

    private String tableName;
    private String remoteQuery;
    private Map<String, String> options;


    /**
     * Constructs an ExportRecordsToTableRequest object with default
     * parameters.
     */
    public ExportRecordsToTableRequest() {
        tableName = "";
        remoteQuery = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an ExportRecordsToTableRequest object with the specified
     * parameters.
     * 
     * @param tableName  Name of the table from which the data will be exported
     *                   to remote database, in
     *                   [schema_name.]table_name format, using standard
     *                   <a
     *                   href="../../../../../../concepts/tables/#table-name-resolution"
     *                   target="_top">name resolution rules</a>.
     * @param remoteQuery  Parameterized insert query to export gpudb table
     *                     data into remote database
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ExportRecordsToTableRequest.Options#BATCH_SIZE
     *                 BATCH_SIZE}: Batch size, which determines how many rows
     *                 to export per round trip.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExportRecordsToTableRequest.Options#DATASINK_NAME
     *                 DATASINK_NAME}: Name of an existing external data sink
     *                 to which table name specified in {@code tableName} will
     *                 be exported
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     */
    public ExportRecordsToTableRequest(String tableName, String remoteQuery, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.remoteQuery = (remoteQuery == null) ? "" : remoteQuery;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Name of the table from which the data will be exported to remote
     *         database, in
     *         [schema_name.]table_name format, using standard
     *         <a
     *         href="../../../../../../concepts/tables/#table-name-resolution"
     *         target="_top">name resolution rules</a>.
     * 
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * 
     * @param tableName  Name of the table from which the data will be exported
     *                   to remote database, in
     *                   [schema_name.]table_name format, using standard
     *                   <a
     *                   href="../../../../../../concepts/tables/#table-name-resolution"
     *                   target="_top">name resolution rules</a>.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ExportRecordsToTableRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * 
     * @return Parameterized insert query to export gpudb table data into
     *         remote database
     * 
     */
    public String getRemoteQuery() {
        return remoteQuery;
    }

    /**
     * 
     * @param remoteQuery  Parameterized insert query to export gpudb table
     *                     data into remote database
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ExportRecordsToTableRequest setRemoteQuery(String remoteQuery) {
        this.remoteQuery = (remoteQuery == null) ? "" : remoteQuery;
        return this;
    }

    /**
     * 
     * @return Optional parameters.
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.ExportRecordsToTableRequest.Options#BATCH_SIZE
     *         BATCH_SIZE}: Batch size, which determines how many rows to
     *         export per round trip.
     *                 <li> {@link
     *         com.gpudb.protocol.ExportRecordsToTableRequest.Options#DATASINK_NAME
     *         DATASINK_NAME}: Name of an existing external data sink to which
     *         table name specified in {@code tableName} will be exported
     *         </ul>
     *         The default value is an empty {@link Map}.
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.ExportRecordsToTableRequest.Options#BATCH_SIZE
     *                 BATCH_SIZE}: Batch size, which determines how many rows
     *                 to export per round trip.
     *                         <li> {@link
     *                 com.gpudb.protocol.ExportRecordsToTableRequest.Options#DATASINK_NAME
     *                 DATASINK_NAME}: Name of an existing external data sink
     *                 to which table name specified in {@code tableName} will
     *                 be exported
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ExportRecordsToTableRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.remoteQuery;

            case 2:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.remoteQuery = (String)value;
                break;

            case 2:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        ExportRecordsToTableRequest that = (ExportRecordsToTableRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.remoteQuery.equals( that.remoteQuery )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "remoteQuery" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.remoteQuery ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.remoteQuery.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
