/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of results returned by {@link
 * com.gpudb.GPUdb#showTableMonitors(ShowTableMonitorsRequest)}.
 */
public class ShowTableMonitorsResponse implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("ShowTableMonitorsResponse")
            .namespace("com.gpudb")
            .fields()
                .name("monitorIds").type().array().items().stringType().noDefault()
                .name("tableNames").type().array().items().stringType().noDefault()
                .name("events").type().array().items().stringType().noDefault()
                .name("increasingColumns").type().array().items().stringType().noDefault()
                .name("filterExpressions").type().array().items().stringType().noDefault()
                .name("refreshMethod").type().array().items().stringType().noDefault()
                .name("refreshPeriod").type().array().items().stringType().noDefault()
                .name("refreshStartTime").type().array().items().stringType().noDefault()
                .name("datasinkNames").type().array().items().stringType().noDefault()
                .name("additionalInfo").type().array().items().map().values().stringType().noDefault()
                .name("info").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Additional information about the respective monitors in {@code
     * monitorIds}.
     * Supported values:
     * <ul>
     * </ul>
     * A set of string constants for the parameter {@code additionalInfo}.
     */
    public static final class AdditionalInfo {

        /**
         * Notification type for the respective {@code monitorIds} and {@code
         * tableNames}.  The default value is ''.
         */
        public static final String MONITOR_TYPE = "monitor_type";

        /**
         * Notification type schemas for the respective {@code monitorIds} and
         * {@code tableNames}.  The default value is ''.
         */
        public static final String TYPE_SCHEMA = "type_schema";

        /**
         * Materialized view that implements the change detector
         */
        public static final String MATERIALIZED_VIEW_FOR_CHANGE_DETECTOR = "materialized_view_for_change_detector";

        /**
         * Materialized views created for the {@code filterExpressions}.  The
         * default value is ''.
         */
        public static final String MATERIALIZED_VIEW_FOR_FILTER = "materialized_view_for_filter";

        /**
         * Reference count on the respective {@code monitorIds}.  The default
         * value is ''.
         */
        public static final String REFERENCES = "references";

        /**
         * Datasink info in JSON format for the respective {@code monitorIds}
         * if one is defined.  The default value is ''.
         */
        public static final String DATASINK_JSON = "datasink_json";

        private AdditionalInfo() {  }
    }

    private List<String> monitorIds;
    private List<String> tableNames;
    private List<String> events;
    private List<String> increasingColumns;
    private List<String> filterExpressions;
    private List<String> refreshMethod;
    private List<String> refreshPeriod;
    private List<String> refreshStartTime;
    private List<String> datasinkNames;
    private List<Map<String, String>> additionalInfo;
    private Map<String, String> info;


    /**
     * Constructs a ShowTableMonitorsResponse object with default parameters.
     */
    public ShowTableMonitorsResponse() {
    }

    /**
     * 
     * @return List of monitor IDs.
     * 
     */
    public List<String> getMonitorIds() {
        return monitorIds;
    }

    /**
     * 
     * @param monitorIds  List of monitor IDs.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ShowTableMonitorsResponse setMonitorIds(List<String> monitorIds) {
        this.monitorIds = (monitorIds == null) ? new ArrayList<String>() : monitorIds;
        return this;
    }

    /**
     * 
     * @return List of source tables being monitored for the respective {@code
     *         monitorIds}.
     * 
     */
    public List<String> getTableNames() {
        return tableNames;
    }

    /**
     * 
     * @param tableNames  List of source tables being monitored for the
     *                    respective {@code monitorIds}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ShowTableMonitorsResponse setTableNames(List<String> tableNames) {
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        return this;
    }

    /**
     * 
     * @return List of notification events for the respective {@code
     *         monitorIds}.
     * 
     */
    public List<String> getEvents() {
        return events;
    }

    /**
     * 
     * @param events  List of notification events for the respective {@code
     *                monitorIds}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ShowTableMonitorsResponse setEvents(List<String> events) {
        this.events = (events == null) ? new ArrayList<String>() : events;
        return this;
    }

    /**
     * 
     * @return List of columns used on the respective tables in {@code
     *         tableNames} that will increase for new records.
     * 
     */
    public List<String> getIncreasingColumns() {
        return increasingColumns;
    }

    /**
     * 
     * @param increasingColumns  List of columns used on the respective tables
     *                           in {@code tableNames} that will increase for
     *                           new records.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ShowTableMonitorsResponse setIncreasingColumns(List<String> increasingColumns) {
        this.increasingColumns = (increasingColumns == null) ? new ArrayList<String>() : increasingColumns;
        return this;
    }

    /**
     * 
     * @return List of filter expressions used on the respective tables in
     *         {@code tableNames} to limit records for notifications.
     * 
     */
    public List<String> getFilterExpressions() {
        return filterExpressions;
    }

    /**
     * 
     * @param filterExpressions  List of filter expressions used on the
     *                           respective tables in {@code tableNames} to
     *                           limit records for notifications.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ShowTableMonitorsResponse setFilterExpressions(List<String> filterExpressions) {
        this.filterExpressions = (filterExpressions == null) ? new ArrayList<String>() : filterExpressions;
        return this;
    }

    /**
     * 
     * @return List of refresh methods used on the respective tables in {@code
     *         tableNames}.
     * 
     */
    public List<String> getRefreshMethod() {
        return refreshMethod;
    }

    /**
     * 
     * @param refreshMethod  List of refresh methods used on the respective
     *                       tables in {@code tableNames}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ShowTableMonitorsResponse setRefreshMethod(List<String> refreshMethod) {
        this.refreshMethod = (refreshMethod == null) ? new ArrayList<String>() : refreshMethod;
        return this;
    }

    /**
     * 
     * @return List of refresh periods used on the respective tables in {@code
     *         tableNames}.
     * 
     */
    public List<String> getRefreshPeriod() {
        return refreshPeriod;
    }

    /**
     * 
     * @param refreshPeriod  List of refresh periods used on the respective
     *                       tables in {@code tableNames}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ShowTableMonitorsResponse setRefreshPeriod(List<String> refreshPeriod) {
        this.refreshPeriod = (refreshPeriod == null) ? new ArrayList<String>() : refreshPeriod;
        return this;
    }

    /**
     * 
     * @return List of refresh start times used on the respective tables in
     *         {@code tableNames}.
     * 
     */
    public List<String> getRefreshStartTime() {
        return refreshStartTime;
    }

    /**
     * 
     * @param refreshStartTime  List of refresh start times used on the
     *                          respective tables in {@code tableNames}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ShowTableMonitorsResponse setRefreshStartTime(List<String> refreshStartTime) {
        this.refreshStartTime = (refreshStartTime == null) ? new ArrayList<String>() : refreshStartTime;
        return this;
    }

    /**
     * 
     * @return List of datasink names for the respective {@code monitorIds} if
     *         one is defined.
     * 
     */
    public List<String> getDatasinkNames() {
        return datasinkNames;
    }

    /**
     * 
     * @param datasinkNames  List of datasink names for the respective {@code
     *                       monitorIds} if one is defined.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ShowTableMonitorsResponse setDatasinkNames(List<String> datasinkNames) {
        this.datasinkNames = (datasinkNames == null) ? new ArrayList<String>() : datasinkNames;
        return this;
    }

    /**
     * 
     * @return Additional information about the respective monitors in {@code
     *         monitorIds}.
     *         Supported values:
     *         <ul>
     *         </ul>
     * 
     */
    public List<Map<String, String>> getAdditionalInfo() {
        return additionalInfo;
    }

    /**
     * 
     * @param additionalInfo  Additional information about the respective
     *                        monitors in {@code monitorIds}.
     *                        Supported values:
     *                        <ul>
     *                        </ul>
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ShowTableMonitorsResponse setAdditionalInfo(List<Map<String, String>> additionalInfo) {
        this.additionalInfo = (additionalInfo == null) ? new ArrayList<Map<String, String>>() : additionalInfo;
        return this;
    }

    /**
     * 
     * @return Additional information.
     * 
     */
    public Map<String, String> getInfo() {
        return info;
    }

    /**
     * 
     * @param info  Additional information.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public ShowTableMonitorsResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.monitorIds;

            case 1:
                return this.tableNames;

            case 2:
                return this.events;

            case 3:
                return this.increasingColumns;

            case 4:
                return this.filterExpressions;

            case 5:
                return this.refreshMethod;

            case 6:
                return this.refreshPeriod;

            case 7:
                return this.refreshStartTime;

            case 8:
                return this.datasinkNames;

            case 9:
                return this.additionalInfo;

            case 10:
                return this.info;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.monitorIds = (List<String>)value;
                break;

            case 1:
                this.tableNames = (List<String>)value;
                break;

            case 2:
                this.events = (List<String>)value;
                break;

            case 3:
                this.increasingColumns = (List<String>)value;
                break;

            case 4:
                this.filterExpressions = (List<String>)value;
                break;

            case 5:
                this.refreshMethod = (List<String>)value;
                break;

            case 6:
                this.refreshPeriod = (List<String>)value;
                break;

            case 7:
                this.refreshStartTime = (List<String>)value;
                break;

            case 8:
                this.datasinkNames = (List<String>)value;
                break;

            case 9:
                this.additionalInfo = (List<Map<String, String>>)value;
                break;

            case 10:
                this.info = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        ShowTableMonitorsResponse that = (ShowTableMonitorsResponse)obj;

        return ( this.monitorIds.equals( that.monitorIds )
                 && this.tableNames.equals( that.tableNames )
                 && this.events.equals( that.events )
                 && this.increasingColumns.equals( that.increasingColumns )
                 && this.filterExpressions.equals( that.filterExpressions )
                 && this.refreshMethod.equals( that.refreshMethod )
                 && this.refreshPeriod.equals( that.refreshPeriod )
                 && this.refreshStartTime.equals( that.refreshStartTime )
                 && this.datasinkNames.equals( that.datasinkNames )
                 && this.additionalInfo.equals( that.additionalInfo )
                 && this.info.equals( that.info ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "monitorIds" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.monitorIds ) );
        builder.append( ", " );
        builder.append( gd.toString( "tableNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "events" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.events ) );
        builder.append( ", " );
        builder.append( gd.toString( "increasingColumns" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.increasingColumns ) );
        builder.append( ", " );
        builder.append( gd.toString( "filterExpressions" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.filterExpressions ) );
        builder.append( ", " );
        builder.append( gd.toString( "refreshMethod" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.refreshMethod ) );
        builder.append( ", " );
        builder.append( gd.toString( "refreshPeriod" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.refreshPeriod ) );
        builder.append( ", " );
        builder.append( gd.toString( "refreshStartTime" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.refreshStartTime ) );
        builder.append( ", " );
        builder.append( gd.toString( "datasinkNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.datasinkNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "additionalInfo" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.additionalInfo ) );
        builder.append( ", " );
        builder.append( gd.toString( "info" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.info ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.monitorIds.hashCode();
        hashCode = (31 * hashCode) + this.tableNames.hashCode();
        hashCode = (31 * hashCode) + this.events.hashCode();
        hashCode = (31 * hashCode) + this.increasingColumns.hashCode();
        hashCode = (31 * hashCode) + this.filterExpressions.hashCode();
        hashCode = (31 * hashCode) + this.refreshMethod.hashCode();
        hashCode = (31 * hashCode) + this.refreshPeriod.hashCode();
        hashCode = (31 * hashCode) + this.refreshStartTime.hashCode();
        hashCode = (31 * hashCode) + this.datasinkNames.hashCode();
        hashCode = (31 * hashCode) + this.additionalInfo.hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }

}
