/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

public class VisualizeGetFeatureInfoRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("VisualizeGetFeatureInfoRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableNames").type().array().items().stringType().noDefault()
                .name("xColumnNames").type().array().items().stringType().noDefault()
                .name("yColumnNames").type().array().items().stringType().noDefault()
                .name("geometryColumnNames").type().array().items().stringType().noDefault()
                .name("queryColumnNames").type().array().items().array().items().stringType().noDefault()
                .name("projection").type().stringType().noDefault()
                .name("minX").type().doubleType().noDefault()
                .name("maxX").type().doubleType().noDefault()
                .name("minY").type().doubleType().noDefault()
                .name("maxY").type().doubleType().noDefault()
                .name("width").type().intType().noDefault()
                .name("height").type().intType().noDefault()
                .name("x").type().intType().noDefault()
                .name("y").type().intType().noDefault()
                .name("radius").type().intType().noDefault()
                .name("limit").type().longType().noDefault()
                .name("encoding").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    public static Schema getClassSchema() {
        return schema$;
    }

    public static final class Projection {
        public static final String PLATE_CARREE = "plate_carree";
        public static final String WEB_MERCATOR = "web_mercator";

        private Projection() {  }
    }

    public static final class Encoding {
        public static final String BINARY = "binary";
        public static final String JSON = "json";
        public static final String GEOJSON = "geojson";
        public static final String HTML = "html";

        private Encoding() {  }
    }

    public static final class Options {
        public static final String AUTO_COLUMN_SELECTION = "auto_column_selection";
        public static final String FALSE = "false";
        public static final String TRUE = "true";

        private Options() {  }
    }

    private List<String> tableNames;
    private List<String> xColumnNames;
    private List<String> yColumnNames;
    private List<String> geometryColumnNames;
    private List<List<String>> queryColumnNames;
    private String projection;
    private double minX;
    private double maxX;
    private double minY;
    private double maxY;
    private int width;
    private int height;
    private int x;
    private int y;
    private int radius;
    private long limit;
    private String encoding;
    private Map<String, String> options;

    public VisualizeGetFeatureInfoRequest() {
        tableNames = new ArrayList<>();
        xColumnNames = new ArrayList<>();
        yColumnNames = new ArrayList<>();
        geometryColumnNames = new ArrayList<>();
        queryColumnNames = new ArrayList<>();
        projection = "";
        encoding = "";
        options = new LinkedHashMap<>();
    }

    public VisualizeGetFeatureInfoRequest(List<String> tableNames, List<String> xColumnNames, List<String> yColumnNames, List<String> geometryColumnNames, List<List<String>> queryColumnNames, String projection, double minX, double maxX, double minY, double maxY, int width, int height, int x, int y, int radius, long limit, String encoding, Map<String, String> options) {
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        this.xColumnNames = (xColumnNames == null) ? new ArrayList<String>() : xColumnNames;
        this.yColumnNames = (yColumnNames == null) ? new ArrayList<String>() : yColumnNames;
        this.geometryColumnNames = (geometryColumnNames == null) ? new ArrayList<String>() : geometryColumnNames;
        this.queryColumnNames = (queryColumnNames == null) ? new ArrayList<List<String>>() : queryColumnNames;
        this.projection = (projection == null) ? "" : projection;
        this.minX = minX;
        this.maxX = maxX;
        this.minY = minY;
        this.maxY = maxY;
        this.width = width;
        this.height = height;
        this.x = x;
        this.y = y;
        this.radius = radius;
        this.limit = limit;
        this.encoding = (encoding == null) ? "" : encoding;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    public List<String> getTableNames() {
        return tableNames;
    }

    public VisualizeGetFeatureInfoRequest setTableNames(List<String> tableNames) {
        this.tableNames = (tableNames == null) ? new ArrayList<String>() : tableNames;
        return this;
    }

    public List<String> getXColumnNames() {
        return xColumnNames;
    }

    public VisualizeGetFeatureInfoRequest setXColumnNames(List<String> xColumnNames) {
        this.xColumnNames = (xColumnNames == null) ? new ArrayList<String>() : xColumnNames;
        return this;
    }

    public List<String> getYColumnNames() {
        return yColumnNames;
    }

    public VisualizeGetFeatureInfoRequest setYColumnNames(List<String> yColumnNames) {
        this.yColumnNames = (yColumnNames == null) ? new ArrayList<String>() : yColumnNames;
        return this;
    }

    public List<String> getGeometryColumnNames() {
        return geometryColumnNames;
    }

    public VisualizeGetFeatureInfoRequest setGeometryColumnNames(List<String> geometryColumnNames) {
        this.geometryColumnNames = (geometryColumnNames == null) ? new ArrayList<String>() : geometryColumnNames;
        return this;
    }

    public List<List<String>> getQueryColumnNames() {
        return queryColumnNames;
    }

    public VisualizeGetFeatureInfoRequest setQueryColumnNames(List<List<String>> queryColumnNames) {
        this.queryColumnNames = (queryColumnNames == null) ? new ArrayList<List<String>>() : queryColumnNames;
        return this;
    }

    public String getProjection() {
        return projection;
    }

    public VisualizeGetFeatureInfoRequest setProjection(String projection) {
        this.projection = (projection == null) ? "" : projection;
        return this;
    }

    public double getMinX() {
        return minX;
    }

    public VisualizeGetFeatureInfoRequest setMinX(double minX) {
        this.minX = minX;
        return this;
    }

    public double getMaxX() {
        return maxX;
    }

    public VisualizeGetFeatureInfoRequest setMaxX(double maxX) {
        this.maxX = maxX;
        return this;
    }

    public double getMinY() {
        return minY;
    }

    public VisualizeGetFeatureInfoRequest setMinY(double minY) {
        this.minY = minY;
        return this;
    }

    public double getMaxY() {
        return maxY;
    }

    public VisualizeGetFeatureInfoRequest setMaxY(double maxY) {
        this.maxY = maxY;
        return this;
    }

    public int getWidth() {
        return width;
    }

    public VisualizeGetFeatureInfoRequest setWidth(int width) {
        this.width = width;
        return this;
    }

    public int getHeight() {
        return height;
    }

    public VisualizeGetFeatureInfoRequest setHeight(int height) {
        this.height = height;
        return this;
    }

    public int getX() {
        return x;
    }

    public VisualizeGetFeatureInfoRequest setX(int x) {
        this.x = x;
        return this;
    }

    public int getY() {
        return y;
    }

    public VisualizeGetFeatureInfoRequest setY(int y) {
        this.y = y;
        return this;
    }

    public int getRadius() {
        return radius;
    }

    public VisualizeGetFeatureInfoRequest setRadius(int radius) {
        this.radius = radius;
        return this;
    }

    public long getLimit() {
        return limit;
    }

    public VisualizeGetFeatureInfoRequest setLimit(long limit) {
        this.limit = limit;
        return this;
    }

    public String getEncoding() {
        return encoding;
    }

    public VisualizeGetFeatureInfoRequest setEncoding(String encoding) {
        this.encoding = (encoding == null) ? "" : encoding;
        return this;
    }

    public Map<String, String> getOptions() {
        return options;
    }

    public VisualizeGetFeatureInfoRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    @Override
    public Schema getSchema() {
        return schema$;
    }

    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableNames;

            case 1:
                return this.xColumnNames;

            case 2:
                return this.yColumnNames;

            case 3:
                return this.geometryColumnNames;

            case 4:
                return this.queryColumnNames;

            case 5:
                return this.projection;

            case 6:
                return this.minX;

            case 7:
                return this.maxX;

            case 8:
                return this.minY;

            case 9:
                return this.maxY;

            case 10:
                return this.width;

            case 11:
                return this.height;

            case 12:
                return this.x;

            case 13:
                return this.y;

            case 14:
                return this.radius;

            case 15:
                return this.limit;

            case 16:
                return this.encoding;

            case 17:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableNames = (List<String>)value;
                break;

            case 1:
                this.xColumnNames = (List<String>)value;
                break;

            case 2:
                this.yColumnNames = (List<String>)value;
                break;

            case 3:
                this.geometryColumnNames = (List<String>)value;
                break;

            case 4:
                this.queryColumnNames = (List<List<String>>)value;
                break;

            case 5:
                this.projection = (String)value;
                break;

            case 6:
                this.minX = (Double)value;
                break;

            case 7:
                this.maxX = (Double)value;
                break;

            case 8:
                this.minY = (Double)value;
                break;

            case 9:
                this.maxY = (Double)value;
                break;

            case 10:
                this.width = (Integer)value;
                break;

            case 11:
                this.height = (Integer)value;
                break;

            case 12:
                this.x = (Integer)value;
                break;

            case 13:
                this.y = (Integer)value;
                break;

            case 14:
                this.radius = (Integer)value;
                break;

            case 15:
                this.limit = (Long)value;
                break;

            case 16:
                this.encoding = (String)value;
                break;

            case 17:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        VisualizeGetFeatureInfoRequest that = (VisualizeGetFeatureInfoRequest)obj;

        return ( this.tableNames.equals( that.tableNames )
                 && this.xColumnNames.equals( that.xColumnNames )
                 && this.yColumnNames.equals( that.yColumnNames )
                 && this.geometryColumnNames.equals( that.geometryColumnNames )
                 && this.queryColumnNames.equals( that.queryColumnNames )
                 && this.projection.equals( that.projection )
                 && ( (Double)this.minX ).equals( (Double)that.minX )
                 && ( (Double)this.maxX ).equals( (Double)that.maxX )
                 && ( (Double)this.minY ).equals( (Double)that.minY )
                 && ( (Double)this.maxY ).equals( (Double)that.maxY )
                 && ( this.width == that.width )
                 && ( this.height == that.height )
                 && ( this.x == that.x )
                 && ( this.y == that.y )
                 && ( this.radius == that.radius )
                 && ( this.limit == that.limit )
                 && this.encoding.equals( that.encoding )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "xColumnNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.xColumnNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "yColumnNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.yColumnNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "geometryColumnNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.geometryColumnNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "queryColumnNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.queryColumnNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "projection" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.projection ) );
        builder.append( ", " );
        builder.append( gd.toString( "minX" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.minX ) );
        builder.append( ", " );
        builder.append( gd.toString( "maxX" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.maxX ) );
        builder.append( ", " );
        builder.append( gd.toString( "minY" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.minY ) );
        builder.append( ", " );
        builder.append( gd.toString( "maxY" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.maxY ) );
        builder.append( ", " );
        builder.append( gd.toString( "width" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.width ) );
        builder.append( ", " );
        builder.append( gd.toString( "height" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.height ) );
        builder.append( ", " );
        builder.append( gd.toString( "x" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.x ) );
        builder.append( ", " );
        builder.append( gd.toString( "y" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.y ) );
        builder.append( ", " );
        builder.append( gd.toString( "radius" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.radius ) );
        builder.append( ", " );
        builder.append( gd.toString( "limit" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.limit ) );
        builder.append( ", " );
        builder.append( gd.toString( "encoding" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.encoding ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableNames.hashCode();
        hashCode = (31 * hashCode) + this.xColumnNames.hashCode();
        hashCode = (31 * hashCode) + this.yColumnNames.hashCode();
        hashCode = (31 * hashCode) + this.geometryColumnNames.hashCode();
        hashCode = (31 * hashCode) + this.queryColumnNames.hashCode();
        hashCode = (31 * hashCode) + this.projection.hashCode();
        hashCode = (31 * hashCode) + ((Double)this.minX).hashCode();
        hashCode = (31 * hashCode) + ((Double)this.maxX).hashCode();
        hashCode = (31 * hashCode) + ((Double)this.minY).hashCode();
        hashCode = (31 * hashCode) + ((Double)this.maxY).hashCode();
        hashCode = (31 * hashCode) + this.width;
        hashCode = (31 * hashCode) + this.height;
        hashCode = (31 * hashCode) + this.x;
        hashCode = (31 * hashCode) + this.y;
        hashCode = (31 * hashCode) + this.radius;
        hashCode = (31 * hashCode) + ((Long)this.limit).hashCode();
        hashCode = (31 * hashCode) + this.encoding.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
