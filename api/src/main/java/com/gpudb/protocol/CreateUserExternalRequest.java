/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#createUserExternal(CreateUserExternalRequest)
 * GPUdb.createUserExternal}.
 * <p>
 * Creates a new external user (a user whose credentials are managed by an
 * external LDAP).
 */
public class CreateUserExternalRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("CreateUserExternalRequest")
            .namespace("com.gpudb")
            .fields()
                .name("name").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link CreateUserExternalRequest}
     * parameter {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * Is the user allowed to login.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}: User may login
         *     <li>{@link Options#FALSE FALSE}: User may not login
         * </ul>
         * The default value is {@link Options#TRUE TRUE}.
         */
        public static final String ACTIVATED = "activated";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * When {@link Options#TRUE TRUE}, a home directory in KiFS is created
         * for this user.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#TRUE TRUE}.
         */
        public static final String CREATE_HOME_DIRECTORY = "create_home_directory";

        /**
         * Default schema to associate with this user
         */
        public static final String DEFAULT_SCHEMA = "default_schema";

        /**
         * The maximum capacity to apply to the created directory if {@link
         * Options#CREATE_HOME_DIRECTORY CREATE_HOME_DIRECTORY} is {@link
         * Options#TRUE TRUE}. Set to -1 to indicate no upper limit. If empty,
         * the system default limit is applied.
         */
        public static final String DIRECTORY_DATA_LIMIT = "directory_data_limit";

        /**
         * Name of an existing resource group to associate with this user
         */
        public static final String RESOURCE_GROUP = "resource_group";

        private Options() {  }
    }

    private String name;
    private Map<String, String> options;

    /**
     * Constructs a CreateUserExternalRequest object with default parameters.
     */
    public CreateUserExternalRequest() {
        name = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a CreateUserExternalRequest object with the specified
     * parameters.
     *
     * @param name  Name of the user to be created. Must exactly match the
     *              user's name in the external LDAP, prefixed with a @. Must
     *              not be the same name as an existing user.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#ACTIVATED ACTIVATED}: Is the user
     *                         allowed to login.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}: User may
     *                                 login
     *                             <li>{@link Options#FALSE FALSE}: User may
     *                                 not login
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#CREATE_HOME_DIRECTORY
     *                         CREATE_HOME_DIRECTORY}: When {@link Options#TRUE
     *                         TRUE}, a home directory in KiFS is created for
     *                         this user.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#DEFAULT_SCHEMA DEFAULT_SCHEMA}:
     *                         Default schema to associate with this user
     *                     <li>{@link Options#DIRECTORY_DATA_LIMIT
     *                         DIRECTORY_DATA_LIMIT}: The maximum capacity to
     *                         apply to the created directory if {@link
     *                         Options#CREATE_HOME_DIRECTORY
     *                         CREATE_HOME_DIRECTORY} is {@link Options#TRUE
     *                         TRUE}. Set to -1 to indicate no upper limit. If
     *                         empty, the system default limit is applied.
     *                     <li>{@link Options#RESOURCE_GROUP RESOURCE_GROUP}:
     *                         Name of an existing resource group to associate
     *                         with this user
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public CreateUserExternalRequest(String name, Map<String, String> options) {
        this.name = (name == null) ? "" : name;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of the user to be created. Must exactly match the user's name in
     * the external LDAP, prefixed with a @. Must not be the same name as an
     * existing user.
     *
     * @return The current value of {@code name}.
     */
    public String getName() {
        return name;
    }

    /**
     * Name of the user to be created. Must exactly match the user's name in
     * the external LDAP, prefixed with a @. Must not be the same name as an
     * existing user.
     *
     * @param name  The new value for {@code name}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateUserExternalRequest setName(String name) {
        this.name = (name == null) ? "" : name;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#ACTIVATED ACTIVATED}: Is the user allowed to
     *         login.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}: User may login
     *             <li>{@link Options#FALSE FALSE}: User may not login
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#CREATE_HOME_DIRECTORY CREATE_HOME_DIRECTORY}:
     *         When {@link Options#TRUE TRUE}, a home directory in KiFS is
     *         created for this user.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#DEFAULT_SCHEMA DEFAULT_SCHEMA}: Default schema to
     *         associate with this user
     *     <li>{@link Options#DIRECTORY_DATA_LIMIT DIRECTORY_DATA_LIMIT}: The
     *         maximum capacity to apply to the created directory if {@link
     *         Options#CREATE_HOME_DIRECTORY CREATE_HOME_DIRECTORY} is {@link
     *         Options#TRUE TRUE}. Set to -1 to indicate no upper limit. If
     *         empty, the system default limit is applied.
     *     <li>{@link Options#RESOURCE_GROUP RESOURCE_GROUP}: Name of an
     *         existing resource group to associate with this user
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#ACTIVATED ACTIVATED}: Is the user allowed to
     *         login.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}: User may login
     *             <li>{@link Options#FALSE FALSE}: User may not login
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#CREATE_HOME_DIRECTORY CREATE_HOME_DIRECTORY}:
     *         When {@link Options#TRUE TRUE}, a home directory in KiFS is
     *         created for this user.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#DEFAULT_SCHEMA DEFAULT_SCHEMA}: Default schema to
     *         associate with this user
     *     <li>{@link Options#DIRECTORY_DATA_LIMIT DIRECTORY_DATA_LIMIT}: The
     *         maximum capacity to apply to the created directory if {@link
     *         Options#CREATE_HOME_DIRECTORY CREATE_HOME_DIRECTORY} is {@link
     *         Options#TRUE TRUE}. Set to -1 to indicate no upper limit. If
     *         empty, the system default limit is applied.
     *     <li>{@link Options#RESOURCE_GROUP RESOURCE_GROUP}: Name of an
     *         existing resource group to associate with this user
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public CreateUserExternalRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.name;

            case 1:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.name = (String)value;
                break;

            case 1:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        CreateUserExternalRequest that = (CreateUserExternalRequest)obj;

        return ( this.name.equals( that.name )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "name" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.name ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.name.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
