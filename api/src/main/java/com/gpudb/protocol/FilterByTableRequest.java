/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#filterByTable(FilterByTableRequest) GPUdb.filterByTable}.
 * <p>
 * Filters objects in one table based on objects in another table. The user
 * must specify matching column types from the two tables (i.e. the target
 * table from which objects will be filtered and the source table based on
 * which the filter will be created); the column names need not be the same. If
 * a {@link #getViewName() viewName} is specified, then the filtered objects
 * will then be put in a newly created view. The operation is synchronous,
 * meaning that a response will not be returned until all objects are fully
 * available in the result view. The return value contains the count (i.e. the
 * size) of the resulting view.
 */
public class FilterByTableRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("FilterByTableRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("viewName").type().stringType().noDefault()
                .name("columnName").type().stringType().noDefault()
                .name("sourceTableName").type().stringType().noDefault()
                .name("sourceTableColumnName").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link FilterByTableRequest} parameter
     * {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * If {@link Options#TRUE TRUE}, a unique temporary table name will be
         * generated in the sys_temp schema and used in place of {@link
         * #getViewName() viewName}. This is always allowed even if the caller
         * does not have permission to create tables. The generated name is
         * returned in {@link
         * com.gpudb.protocol.FilterByTableResponse.Info#QUALIFIED_VIEW_NAME
         * QUALIFIED_VIEW_NAME}.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String CREATE_TEMP_TABLE = "create_temp_table";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * [DEPRECATED--please specify the containing schema for the view as
         * part of {@link #getViewName() viewName} and use {@link
         * com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
         * GPUdb.createSchema} to create the schema if non-existent]  Name of a
         * schema for the newly created view. If the schema is non-existent, it
         * will be automatically created.
         */
        public static final String COLLECTION_NAME = "collection_name";

        /**
         * String indicating the filter mode, either {@link Options#IN_TABLE
         * IN_TABLE} or {@link Options#NOT_IN_TABLE NOT_IN_TABLE}.
         * Supported values:
         * <ul>
         *     <li>{@link Options#IN_TABLE IN_TABLE}
         *     <li>{@link Options#NOT_IN_TABLE NOT_IN_TABLE}
         * </ul>
         * The default value is {@link Options#IN_TABLE IN_TABLE}.
         */
        public static final String FILTER_MODE = "filter_mode";

        public static final String IN_TABLE = "in_table";
        public static final String NOT_IN_TABLE = "not_in_table";

        /**
         * Mode - should be either {@link Options#SPATIAL SPATIAL} or {@link
         * Options#NORMAL NORMAL}.
         * Supported values:
         * <ul>
         *     <li>{@link Options#NORMAL NORMAL}
         *     <li>{@link Options#SPATIAL SPATIAL}
         * </ul>
         * The default value is {@link Options#NORMAL NORMAL}.
         */
        public static final String MODE = "mode";

        public static final String NORMAL = "normal";
        public static final String SPATIAL = "spatial";

        /**
         * Buffer size, in meters. Only relevant for {@link Options#SPATIAL
         * SPATIAL} mode. The default value is '0'.
         */
        public static final String BUFFER = "buffer";

        /**
         * Method used to buffer polygons.  Only relevant for {@link
         * Options#SPATIAL SPATIAL} mode.
         * Supported values:
         * <ul>
         *     <li>{@link Options#NORMAL NORMAL}
         *     <li>{@link Options#GEOS GEOS}: Use geos 1 edge per corner
         *         algorithm
         * </ul>
         * The default value is {@link Options#NORMAL NORMAL}.
         */
        public static final String BUFFER_METHOD = "buffer_method";

        /**
         * Use geos 1 edge per corner algorithm
         */
        public static final String GEOS = "geos";

        /**
         * Maximum number of points in a partition. Only relevant for {@link
         * Options#SPATIAL SPATIAL} mode. The default value is '0'.
         */
        public static final String MAX_PARTITION_SIZE = "max_partition_size";

        /**
         * Maximum number of points * edges in a partition. Only relevant for
         * {@link Options#SPATIAL SPATIAL} mode. The default value is
         * '8000000'.
         */
        public static final String MAX_PARTITION_SCORE = "max_partition_score";

        /**
         * Name of column containing x value of point being filtered in {@link
         * Options#SPATIAL SPATIAL} mode. The default value is 'x'.
         */
        public static final String X_COLUMN_NAME = "x_column_name";

        /**
         * Name of column containing y value of point being filtered in {@link
         * Options#SPATIAL SPATIAL} mode. The default value is 'y'.
         */
        public static final String Y_COLUMN_NAME = "y_column_name";

        private Options() {  }
    }

    private String tableName;
    private String viewName;
    private String columnName;
    private String sourceTableName;
    private String sourceTableColumnName;
    private Map<String, String> options;

    /**
     * Constructs a FilterByTableRequest object with default parameters.
     */
    public FilterByTableRequest() {
        tableName = "";
        viewName = "";
        columnName = "";
        sourceTableName = "";
        sourceTableColumnName = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a FilterByTableRequest object with the specified parameters.
     *
     * @param tableName  Name of the table whose data will be filtered, in
     *                   [schema_name.]table_name format, using standard <a
     *                   href="../../../../../../concepts/tables/#table-name-resolution"
     *                   target="_top">name resolution rules</a>.  Must be an
     *                   existing table.
     * @param viewName  If provided, then this will be the name of the view
     *                  containing the results, in [schema_name.]view_name
     *                  format, using standard <a
     *                  href="../../../../../../concepts/tables/#table-name-resolution"
     *                  target="_top">name resolution rules</a> and meeting <a
     *                  href="../../../../../../concepts/tables/#table-naming-criteria"
     *                  target="_top">table naming criteria</a>.  Must not be
     *                  an already existing table or view. The default value is
     *                  ''.
     * @param columnName  Name of the column by whose value the data will be
     *                    filtered from the table designated by {@code
     *                    tableName}.
     * @param sourceTableName  Name of the table whose data will be compared
     *                         against in the table called {@code tableName},
     *                         in [schema_name.]table_name format, using
     *                         standard <a
     *                         href="../../../../../../concepts/tables/#table-name-resolution"
     *                         target="_top">name resolution rules</a>.  Must
     *                         be an existing table.
     * @param sourceTableColumnName  Name of the column in the {@code
     *                               sourceTableName} whose values will be used
     *                               as the filter for table {@code tableName}.
     *                               Must be a geospatial geometry column if in
     *                               'spatial' mode; otherwise, Must match the
     *                               type of the {@code columnName}.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#CREATE_TEMP_TABLE
     *                         CREATE_TEMP_TABLE}: If {@link Options#TRUE
     *                         TRUE}, a unique temporary table name will be
     *                         generated in the sys_temp schema and used in
     *                         place of {@code viewName}. This is always
     *                         allowed even if the caller does not have
     *                         permission to create tables. The generated name
     *                         is returned in {@link
     *                         com.gpudb.protocol.FilterByTableResponse.Info#QUALIFIED_VIEW_NAME
     *                         QUALIFIED_VIEW_NAME}.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#COLLECTION_NAME COLLECTION_NAME}:
     *                         [DEPRECATED--please specify the containing
     *                         schema for the view as part of {@code viewName}
     *                         and use {@link
     *                         com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *                         GPUdb.createSchema} to create the schema if
     *                         non-existent]  Name of a schema for the newly
     *                         created view. If the schema is non-existent, it
     *                         will be automatically created.
     *                     <li>{@link Options#FILTER_MODE FILTER_MODE}: String
     *                         indicating the filter mode, either {@link
     *                         Options#IN_TABLE IN_TABLE} or {@link
     *                         Options#NOT_IN_TABLE NOT_IN_TABLE}.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#IN_TABLE IN_TABLE}
     *                             <li>{@link Options#NOT_IN_TABLE
     *                                 NOT_IN_TABLE}
     *                         </ul>
     *                         The default value is {@link Options#IN_TABLE
     *                         IN_TABLE}.
     *                     <li>{@link Options#MODE MODE}: Mode - should be
     *                         either {@link Options#SPATIAL SPATIAL} or {@link
     *                         Options#NORMAL NORMAL}.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#NORMAL NORMAL}
     *                             <li>{@link Options#SPATIAL SPATIAL}
     *                         </ul>
     *                         The default value is {@link Options#NORMAL
     *                         NORMAL}.
     *                     <li>{@link Options#BUFFER BUFFER}: Buffer size, in
     *                         meters. Only relevant for {@link Options#SPATIAL
     *                         SPATIAL} mode. The default value is '0'.
     *                     <li>{@link Options#BUFFER_METHOD BUFFER_METHOD}:
     *                         Method used to buffer polygons.  Only relevant
     *                         for {@link Options#SPATIAL SPATIAL} mode.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#NORMAL NORMAL}
     *                             <li>{@link Options#GEOS GEOS}: Use geos 1
     *                                 edge per corner algorithm
     *                         </ul>
     *                         The default value is {@link Options#NORMAL
     *                         NORMAL}.
     *                     <li>{@link Options#MAX_PARTITION_SIZE
     *                         MAX_PARTITION_SIZE}: Maximum number of points in
     *                         a partition. Only relevant for {@link
     *                         Options#SPATIAL SPATIAL} mode. The default value
     *                         is '0'.
     *                     <li>{@link Options#MAX_PARTITION_SCORE
     *                         MAX_PARTITION_SCORE}: Maximum number of points *
     *                         edges in a partition. Only relevant for {@link
     *                         Options#SPATIAL SPATIAL} mode. The default value
     *                         is '8000000'.
     *                     <li>{@link Options#X_COLUMN_NAME X_COLUMN_NAME}:
     *                         Name of column containing x value of point being
     *                         filtered in {@link Options#SPATIAL SPATIAL}
     *                         mode. The default value is 'x'.
     *                     <li>{@link Options#Y_COLUMN_NAME Y_COLUMN_NAME}:
     *                         Name of column containing y value of point being
     *                         filtered in {@link Options#SPATIAL SPATIAL}
     *                         mode. The default value is 'y'.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public FilterByTableRequest(String tableName, String viewName, String columnName, String sourceTableName, String sourceTableColumnName, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.viewName = (viewName == null) ? "" : viewName;
        this.columnName = (columnName == null) ? "" : columnName;
        this.sourceTableName = (sourceTableName == null) ? "" : sourceTableName;
        this.sourceTableColumnName = (sourceTableColumnName == null) ? "" : sourceTableColumnName;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of the table whose data will be filtered, in
     * [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>.  Must be an existing table.
     *
     * @return The current value of {@code tableName}.
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * Name of the table whose data will be filtered, in
     * [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>.  Must be an existing table.
     *
     * @param tableName  The new value for {@code tableName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public FilterByTableRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * If provided, then this will be the name of the view containing the
     * results, in [schema_name.]view_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a> and meeting <a
     * href="../../../../../../concepts/tables/#table-naming-criteria"
     * target="_top">table naming criteria</a>.  Must not be an already
     * existing table or view. The default value is ''.
     *
     * @return The current value of {@code viewName}.
     */
    public String getViewName() {
        return viewName;
    }

    /**
     * If provided, then this will be the name of the view containing the
     * results, in [schema_name.]view_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a> and meeting <a
     * href="../../../../../../concepts/tables/#table-naming-criteria"
     * target="_top">table naming criteria</a>.  Must not be an already
     * existing table or view. The default value is ''.
     *
     * @param viewName  The new value for {@code viewName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public FilterByTableRequest setViewName(String viewName) {
        this.viewName = (viewName == null) ? "" : viewName;
        return this;
    }

    /**
     * Name of the column by whose value the data will be filtered from the
     * table designated by {@link #getTableName() tableName}.
     *
     * @return The current value of {@code columnName}.
     */
    public String getColumnName() {
        return columnName;
    }

    /**
     * Name of the column by whose value the data will be filtered from the
     * table designated by {@link #getTableName() tableName}.
     *
     * @param columnName  The new value for {@code columnName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public FilterByTableRequest setColumnName(String columnName) {
        this.columnName = (columnName == null) ? "" : columnName;
        return this;
    }

    /**
     * Name of the table whose data will be compared against in the table
     * called {@link #getTableName() tableName}, in [schema_name.]table_name
     * format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>.  Must be an existing table.
     *
     * @return The current value of {@code sourceTableName}.
     */
    public String getSourceTableName() {
        return sourceTableName;
    }

    /**
     * Name of the table whose data will be compared against in the table
     * called {@link #getTableName() tableName}, in [schema_name.]table_name
     * format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>.  Must be an existing table.
     *
     * @param sourceTableName  The new value for {@code sourceTableName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public FilterByTableRequest setSourceTableName(String sourceTableName) {
        this.sourceTableName = (sourceTableName == null) ? "" : sourceTableName;
        return this;
    }

    /**
     * Name of the column in the {@link #getSourceTableName() sourceTableName}
     * whose values will be used as the filter for table {@link #getTableName()
     * tableName}. Must be a geospatial geometry column if in 'spatial' mode;
     * otherwise, Must match the type of the {@link #getColumnName()
     * columnName}.
     *
     * @return The current value of {@code sourceTableColumnName}.
     */
    public String getSourceTableColumnName() {
        return sourceTableColumnName;
    }

    /**
     * Name of the column in the {@link #getSourceTableName() sourceTableName}
     * whose values will be used as the filter for table {@link #getTableName()
     * tableName}. Must be a geospatial geometry column if in 'spatial' mode;
     * otherwise, Must match the type of the {@link #getColumnName()
     * columnName}.
     *
     * @param sourceTableColumnName  The new value for {@code
     *                               sourceTableColumnName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public FilterByTableRequest setSourceTableColumnName(String sourceTableColumnName) {
        this.sourceTableColumnName = (sourceTableColumnName == null) ? "" : sourceTableColumnName;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#CREATE_TEMP_TABLE CREATE_TEMP_TABLE}: If {@link
     *         Options#TRUE TRUE}, a unique temporary table name will be
     *         generated in the sys_temp schema and used in place of {@link
     *         #getViewName() viewName}. This is always allowed even if the
     *         caller does not have permission to create tables. The generated
     *         name is returned in {@link
     *         com.gpudb.protocol.FilterByTableResponse.Info#QUALIFIED_VIEW_NAME
     *         QUALIFIED_VIEW_NAME}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#COLLECTION_NAME COLLECTION_NAME}:
     *         [DEPRECATED--please specify the containing schema for the view
     *         as part of {@link #getViewName() viewName} and use {@link
     *         com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *         GPUdb.createSchema} to create the schema if non-existent]  Name
     *         of a schema for the newly created view. If the schema is
     *         non-existent, it will be automatically created.
     *     <li>{@link Options#FILTER_MODE FILTER_MODE}: String indicating the
     *         filter mode, either {@link Options#IN_TABLE IN_TABLE} or {@link
     *         Options#NOT_IN_TABLE NOT_IN_TABLE}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#IN_TABLE IN_TABLE}
     *             <li>{@link Options#NOT_IN_TABLE NOT_IN_TABLE}
     *         </ul>
     *         The default value is {@link Options#IN_TABLE IN_TABLE}.
     *     <li>{@link Options#MODE MODE}: Mode - should be either {@link
     *         Options#SPATIAL SPATIAL} or {@link Options#NORMAL NORMAL}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#NORMAL NORMAL}
     *             <li>{@link Options#SPATIAL SPATIAL}
     *         </ul>
     *         The default value is {@link Options#NORMAL NORMAL}.
     *     <li>{@link Options#BUFFER BUFFER}: Buffer size, in meters. Only
     *         relevant for {@link Options#SPATIAL SPATIAL} mode. The default
     *         value is '0'.
     *     <li>{@link Options#BUFFER_METHOD BUFFER_METHOD}: Method used to
     *         buffer polygons.  Only relevant for {@link Options#SPATIAL
     *         SPATIAL} mode.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#NORMAL NORMAL}
     *             <li>{@link Options#GEOS GEOS}: Use geos 1 edge per corner
     *                 algorithm
     *         </ul>
     *         The default value is {@link Options#NORMAL NORMAL}.
     *     <li>{@link Options#MAX_PARTITION_SIZE MAX_PARTITION_SIZE}: Maximum
     *         number of points in a partition. Only relevant for {@link
     *         Options#SPATIAL SPATIAL} mode. The default value is '0'.
     *     <li>{@link Options#MAX_PARTITION_SCORE MAX_PARTITION_SCORE}: Maximum
     *         number of points * edges in a partition. Only relevant for
     *         {@link Options#SPATIAL SPATIAL} mode. The default value is
     *         '8000000'.
     *     <li>{@link Options#X_COLUMN_NAME X_COLUMN_NAME}: Name of column
     *         containing x value of point being filtered in {@link
     *         Options#SPATIAL SPATIAL} mode. The default value is 'x'.
     *     <li>{@link Options#Y_COLUMN_NAME Y_COLUMN_NAME}: Name of column
     *         containing y value of point being filtered in {@link
     *         Options#SPATIAL SPATIAL} mode. The default value is 'y'.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#CREATE_TEMP_TABLE CREATE_TEMP_TABLE}: If {@link
     *         Options#TRUE TRUE}, a unique temporary table name will be
     *         generated in the sys_temp schema and used in place of {@link
     *         #getViewName() viewName}. This is always allowed even if the
     *         caller does not have permission to create tables. The generated
     *         name is returned in {@link
     *         com.gpudb.protocol.FilterByTableResponse.Info#QUALIFIED_VIEW_NAME
     *         QUALIFIED_VIEW_NAME}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#COLLECTION_NAME COLLECTION_NAME}:
     *         [DEPRECATED--please specify the containing schema for the view
     *         as part of {@link #getViewName() viewName} and use {@link
     *         com.gpudb.GPUdb#createSchema(CreateSchemaRequest)
     *         GPUdb.createSchema} to create the schema if non-existent]  Name
     *         of a schema for the newly created view. If the schema is
     *         non-existent, it will be automatically created.
     *     <li>{@link Options#FILTER_MODE FILTER_MODE}: String indicating the
     *         filter mode, either {@link Options#IN_TABLE IN_TABLE} or {@link
     *         Options#NOT_IN_TABLE NOT_IN_TABLE}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#IN_TABLE IN_TABLE}
     *             <li>{@link Options#NOT_IN_TABLE NOT_IN_TABLE}
     *         </ul>
     *         The default value is {@link Options#IN_TABLE IN_TABLE}.
     *     <li>{@link Options#MODE MODE}: Mode - should be either {@link
     *         Options#SPATIAL SPATIAL} or {@link Options#NORMAL NORMAL}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#NORMAL NORMAL}
     *             <li>{@link Options#SPATIAL SPATIAL}
     *         </ul>
     *         The default value is {@link Options#NORMAL NORMAL}.
     *     <li>{@link Options#BUFFER BUFFER}: Buffer size, in meters. Only
     *         relevant for {@link Options#SPATIAL SPATIAL} mode. The default
     *         value is '0'.
     *     <li>{@link Options#BUFFER_METHOD BUFFER_METHOD}: Method used to
     *         buffer polygons.  Only relevant for {@link Options#SPATIAL
     *         SPATIAL} mode.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#NORMAL NORMAL}
     *             <li>{@link Options#GEOS GEOS}: Use geos 1 edge per corner
     *                 algorithm
     *         </ul>
     *         The default value is {@link Options#NORMAL NORMAL}.
     *     <li>{@link Options#MAX_PARTITION_SIZE MAX_PARTITION_SIZE}: Maximum
     *         number of points in a partition. Only relevant for {@link
     *         Options#SPATIAL SPATIAL} mode. The default value is '0'.
     *     <li>{@link Options#MAX_PARTITION_SCORE MAX_PARTITION_SCORE}: Maximum
     *         number of points * edges in a partition. Only relevant for
     *         {@link Options#SPATIAL SPATIAL} mode. The default value is
     *         '8000000'.
     *     <li>{@link Options#X_COLUMN_NAME X_COLUMN_NAME}: Name of column
     *         containing x value of point being filtered in {@link
     *         Options#SPATIAL SPATIAL} mode. The default value is 'x'.
     *     <li>{@link Options#Y_COLUMN_NAME Y_COLUMN_NAME}: Name of column
     *         containing y value of point being filtered in {@link
     *         Options#SPATIAL SPATIAL} mode. The default value is 'y'.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public FilterByTableRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.viewName;

            case 2:
                return this.columnName;

            case 3:
                return this.sourceTableName;

            case 4:
                return this.sourceTableColumnName;

            case 5:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.viewName = (String)value;
                break;

            case 2:
                this.columnName = (String)value;
                break;

            case 3:
                this.sourceTableName = (String)value;
                break;

            case 4:
                this.sourceTableColumnName = (String)value;
                break;

            case 5:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        FilterByTableRequest that = (FilterByTableRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.viewName.equals( that.viewName )
                 && this.columnName.equals( that.columnName )
                 && this.sourceTableName.equals( that.sourceTableName )
                 && this.sourceTableColumnName.equals( that.sourceTableColumnName )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "viewName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.viewName ) );
        builder.append( ", " );
        builder.append( gd.toString( "columnName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.columnName ) );
        builder.append( ", " );
        builder.append( gd.toString( "sourceTableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.sourceTableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "sourceTableColumnName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.sourceTableColumnName ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.viewName.hashCode();
        hashCode = (31 * hashCode) + this.columnName.hashCode();
        hashCode = (31 * hashCode) + this.sourceTableName.hashCode();
        hashCode = (31 * hashCode) + this.sourceTableColumnName.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
