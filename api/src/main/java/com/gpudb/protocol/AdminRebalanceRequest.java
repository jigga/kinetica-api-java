/*
 *  This file was autogenerated by the GPUdb schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;


/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#adminRebalance(AdminRebalanceRequest)}.
 * <p>
 * Rebalance the data in the cluster so that all nodes contain an equal
 * number of records approximately and/or rebalance the shards to be equally
 * distributed (as much as possible) across all the ranks.
 * <p>
 * The database must be offline for this operation, see {@link
 * com.gpudb.GPUdb#adminOffline(AdminOfflineRequest)}
 * <p>
 * * If {@link com.gpudb.GPUdb#adminRebalance(AdminRebalanceRequest)} is
 * invoked after a change is made to the
 *   cluster, e.g., a host was added or removed,
 *   <a href="../../../../../../concepts/tables/#sharding"
 * target="_top">sharded data</a> will be
 *   evenly redistributed across the cluster by number of shards per rank
 *   while unsharded data will be redistributed across the cluster by data
 *   size per rank
 * * If {@link com.gpudb.GPUdb#adminRebalance(AdminRebalanceRequest)} is
 * invoked at some point when unsharded
 *   data (a.k.a.
 *   <a href="../../../../../../concepts/tables/#random-sharding"
 * target="_top">randomly-sharded</a>)
 *   in the cluster is unevenly distributed over time, sharded data will
 *   not move while unsharded data will be redistributed across the
 *   cluster by data size per rank
 * <p>
 * NOTE: Replicated data will not move as a result of this call
 * <p>
 * This endpoint's processing time depends on the amount of data in the system,
 * thus the API call may time out if run directly.  It is recommended to run
 * this
 * endpoint asynchronously via {@link
 * com.gpudb.GPUdb#createJob(CreateJobRequest)}.
 */
public class AdminRebalanceRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AdminRebalanceRequest")
            .namespace("com.gpudb")
            .fields()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();


    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return  the schema for the class.
     * 
     */
    public static Schema getClassSchema() {
        return schema$;
    }


    /**
     * Optional parameters.
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#REBALANCE_SHARDED_DATA
     * REBALANCE_SHARDED_DATA}: If {@code true}, <a
     * href="../../../../../../concepts/tables/#sharding" target="_top">sharded
     * data</a> will be rebalanced approximately equally across the cluster.
     * Note that for clusters with large amounts of sharded data, this data
     * transfer could be time consuming and result in delayed query responses.
     * Supported values:
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}
     *         <li> {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}.
     *         <li> {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#REBALANCE_UNSHARDED_DATA
     * REBALANCE_UNSHARDED_DATA}: If {@code true}, unsharded data (a.k.a. <a
     * href="../../../../../../concepts/tables/#random-sharding"
     * target="_top">randomly-sharded</a>) will be rebalanced approximately
     * equally across the cluster. Note that for clusters with large amounts of
     * unsharded data, this data transfer could be time consuming and result in
     * delayed query responses.
     * Supported values:
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}
     *         <li> {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}.
     *         <li> {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#TABLE_INCLUDES
     * TABLE_INCLUDES}: Comma-separated list of unsharded table names to
     * rebalance. Not applicable to sharded tables because they are always
     * rebalanced. Cannot be used simultaneously with {@code table_excludes}.
     * This parameter is ignored if {@code rebalance_unsharded_data} is {@code
     * false}.
     *         <li> {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#TABLE_EXCLUDES
     * TABLE_EXCLUDES}: Comma-separated list of unsharded table names to not
     * rebalance. Not applicable to sharded tables because they are always
     * rebalanced. Cannot be used simultaneously with {@code table_includes}.
     * This parameter is ignored if {@code rebalance_unsharded_data} is {@code
     * false}.
     *         <li> {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#AGGRESSIVENESS
     * AGGRESSIVENESS}: Influences how much data is moved at a time during
     * rebalance.  A higher {@code aggressiveness} will complete the rebalance
     * faster.  A lower {@code aggressiveness} will take longer but allow for
     * better interleaving between the rebalance and other queries. Valid
     * values are constants from 1 (lowest) to 10 (highest).  The default value
     * is '10'.
     *         <li> {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#COMPACT_AFTER_REBALANCE
     * COMPACT_AFTER_REBALANCE}: Perform compaction of deleted records once the
     * rebalance completes to reclaim memory and disk space. Default is {@code
     * true}, unless {@code repair_incorrectly_sharded_data} is set to {@code
     * true}.
     * Supported values:
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}
     *         <li> {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}.
     *         <li> {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#COMPACT_ONLY
     * COMPACT_ONLY}: If set to {@code true}, ignore rebalance options and
     * attempt to perform compaction of deleted records to reclaim memory and
     * disk space without rebalancing first.
     * Supported values:
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}
     *         <li> {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}.
     *         <li> {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#REPAIR_INCORRECTLY_SHARDED_DATA
     * REPAIR_INCORRECTLY_SHARDED_DATA}: Scans for any data sharded incorrectly
     * and re-routes the data to the correct location. Only necessary if {@link
     * com.gpudb.GPUdb#adminVerifyDb(AdminVerifyDbRequest)} reports an error in
     * sharding alignment. This can be done as part of a typical rebalance
     * after expanding the cluster or in a standalone fashion when it is
     * believed that data is sharded incorrectly somewhere in the cluster.
     * Compaction will not be performed by default when this is enabled. If
     * this option is set to {@code true}, the time necessary to rebalance and
     * the memory used by the rebalance may increase.
     * Supported values:
     * <ul>
     *         <li> {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}
     *         <li> {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}
     * </ul>
     * The default value is {@link
     * com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     * A set of string constants for the parameter {@code options}.
     */
    public static final class Options {

        /**
         * If {@code true}, <a
         * href="../../../../../../concepts/tables/#sharding"
         * target="_top">sharded data</a> will be rebalanced approximately
         * equally across the cluster. Note that for clusters with large
         * amounts of sharded data, this data transfer could be time consuming
         * and result in delayed query responses.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}.
         */
        public static final String REBALANCE_SHARDED_DATA = "rebalance_sharded_data";
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * If {@code true}, unsharded data (a.k.a. <a
         * href="../../../../../../concepts/tables/#random-sharding"
         * target="_top">randomly-sharded</a>) will be rebalanced approximately
         * equally across the cluster. Note that for clusters with large
         * amounts of unsharded data, this data transfer could be time
         * consuming and result in delayed query responses.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}.
         */
        public static final String REBALANCE_UNSHARDED_DATA = "rebalance_unsharded_data";

        /**
         * Comma-separated list of unsharded table names to rebalance. Not
         * applicable to sharded tables because they are always rebalanced.
         * Cannot be used simultaneously with {@code table_excludes}. This
         * parameter is ignored if {@code rebalance_unsharded_data} is {@code
         * false}.
         */
        public static final String TABLE_INCLUDES = "table_includes";

        /**
         * Comma-separated list of unsharded table names to not rebalance. Not
         * applicable to sharded tables because they are always rebalanced.
         * Cannot be used simultaneously with {@code table_includes}. This
         * parameter is ignored if {@code rebalance_unsharded_data} is {@code
         * false}.
         */
        public static final String TABLE_EXCLUDES = "table_excludes";

        /**
         * Influences how much data is moved at a time during rebalance.  A
         * higher {@code aggressiveness} will complete the rebalance faster.  A
         * lower {@code aggressiveness} will take longer but allow for better
         * interleaving between the rebalance and other queries. Valid values
         * are constants from 1 (lowest) to 10 (highest).  The default value is
         * '10'.
         */
        public static final String AGGRESSIVENESS = "aggressiveness";

        /**
         * Perform compaction of deleted records once the rebalance completes
         * to reclaim memory and disk space. Default is {@code true}, unless
         * {@code repair_incorrectly_sharded_data} is set to {@code true}.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}.
         */
        public static final String COMPACT_AFTER_REBALANCE = "compact_after_rebalance";

        /**
         * If set to {@code true}, ignore rebalance options and attempt to
         * perform compaction of deleted records to reclaim memory and disk
         * space without rebalancing first.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}.
         */
        public static final String COMPACT_ONLY = "compact_only";

        /**
         * Scans for any data sharded incorrectly and re-routes the data to the
         * correct location. Only necessary if {@link
         * com.gpudb.GPUdb#adminVerifyDb(AdminVerifyDbRequest)} reports an
         * error in sharding alignment. This can be done as part of a typical
         * rebalance after expanding the cluster or in a standalone fashion
         * when it is believed that data is sharded incorrectly somewhere in
         * the cluster. Compaction will not be performed by default when this
         * is enabled. If this option is set to {@code true}, the time
         * necessary to rebalance and the memory used by the rebalance may
         * increase.
         * Supported values:
         * <ul>
         *         <li> {@link
         * com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}
         *         <li> {@link
         * com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}
         * </ul>
         * The default value is {@link
         * com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}.
         */
        public static final String REPAIR_INCORRECTLY_SHARDED_DATA = "repair_incorrectly_sharded_data";

        private Options() {  }
    }

    private Map<String, String> options;


    /**
     * Constructs an AdminRebalanceRequest object with default parameters.
     */
    public AdminRebalanceRequest() {
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AdminRebalanceRequest object with the specified
     * parameters.
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#REBALANCE_SHARDED_DATA
     *                 REBALANCE_SHARDED_DATA}: If {@code true}, <a
     *                 href="../../../../../../concepts/tables/#sharding"
     *                 target="_top">sharded data</a> will be rebalanced
     *                 approximately equally across the cluster. Note that for
     *                 clusters with large amounts of sharded data, this data
     *                 transfer could be time consuming and result in delayed
     *                 query responses.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#REBALANCE_UNSHARDED_DATA
     *                 REBALANCE_UNSHARDED_DATA}: If {@code true}, unsharded
     *                 data (a.k.a. <a
     *                 href="../../../../../../concepts/tables/#random-sharding"
     *                 target="_top">randomly-sharded</a>) will be rebalanced
     *                 approximately equally across the cluster. Note that for
     *                 clusters with large amounts of unsharded data, this data
     *                 transfer could be time consuming and result in delayed
     *                 query responses.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TABLE_INCLUDES
     *                 TABLE_INCLUDES}: Comma-separated list of unsharded table
     *                 names to rebalance. Not applicable to sharded tables
     *                 because they are always rebalanced. Cannot be used
     *                 simultaneously with {@code table_excludes}. This
     *                 parameter is ignored if {@code rebalance_unsharded_data}
     *                 is {@code false}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TABLE_EXCLUDES
     *                 TABLE_EXCLUDES}: Comma-separated list of unsharded table
     *                 names to not rebalance. Not applicable to sharded tables
     *                 because they are always rebalanced. Cannot be used
     *                 simultaneously with {@code table_includes}. This
     *                 parameter is ignored if {@code rebalance_unsharded_data}
     *                 is {@code false}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#AGGRESSIVENESS
     *                 AGGRESSIVENESS}: Influences how much data is moved at a
     *                 time during rebalance.  A higher {@code aggressiveness}
     *                 will complete the rebalance faster.  A lower {@code
     *                 aggressiveness} will take longer but allow for better
     *                 interleaving between the rebalance and other queries.
     *                 Valid values are constants from 1 (lowest) to 10
     *                 (highest).  The default value is '10'.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#COMPACT_AFTER_REBALANCE
     *                 COMPACT_AFTER_REBALANCE}: Perform compaction of deleted
     *                 records once the rebalance completes to reclaim memory
     *                 and disk space. Default is {@code true}, unless {@code
     *                 repair_incorrectly_sharded_data} is set to {@code true}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#COMPACT_ONLY
     *                 COMPACT_ONLY}: If set to {@code true}, ignore rebalance
     *                 options and attempt to perform compaction of deleted
     *                 records to reclaim memory and disk space without
     *                 rebalancing first.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#REPAIR_INCORRECTLY_SHARDED_DATA
     *                 REPAIR_INCORRECTLY_SHARDED_DATA}: Scans for any data
     *                 sharded incorrectly and re-routes the data to the
     *                 correct location. Only necessary if {@link
     *                 com.gpudb.GPUdb#adminVerifyDb(AdminVerifyDbRequest)}
     *                 reports an error in sharding alignment. This can be done
     *                 as part of a typical rebalance after expanding the
     *                 cluster or in a standalone fashion when it is believed
     *                 that data is sharded incorrectly somewhere in the
     *                 cluster. Compaction will not be performed by default
     *                 when this is enabled. If this option is set to {@code
     *                 true}, the time necessary to rebalance and the memory
     *                 used by the rebalance may increase.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     */
    public AdminRebalanceRequest(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * 
     * @return Optional parameters.
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#REBALANCE_SHARDED_DATA
     *         REBALANCE_SHARDED_DATA}: If {@code true}, <a
     *         href="../../../../../../concepts/tables/#sharding"
     *         target="_top">sharded data</a> will be rebalanced approximately
     *         equally across the cluster. Note that for clusters with large
     *         amounts of sharded data, this data transfer could be time
     *         consuming and result in delayed query responses.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}.
     *                 <li> {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#REBALANCE_UNSHARDED_DATA
     *         REBALANCE_UNSHARDED_DATA}: If {@code true}, unsharded data
     *         (a.k.a. <a
     *         href="../../../../../../concepts/tables/#random-sharding"
     *         target="_top">randomly-sharded</a>) will be rebalanced
     *         approximately equally across the cluster. Note that for clusters
     *         with large amounts of unsharded data, this data transfer could
     *         be time consuming and result in delayed query responses.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}.
     *                 <li> {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#TABLE_INCLUDES
     *         TABLE_INCLUDES}: Comma-separated list of unsharded table names
     *         to rebalance. Not applicable to sharded tables because they are
     *         always rebalanced. Cannot be used simultaneously with {@code
     *         table_excludes}. This parameter is ignored if {@code
     *         rebalance_unsharded_data} is {@code false}.
     *                 <li> {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#TABLE_EXCLUDES
     *         TABLE_EXCLUDES}: Comma-separated list of unsharded table names
     *         to not rebalance. Not applicable to sharded tables because they
     *         are always rebalanced. Cannot be used simultaneously with {@code
     *         table_includes}. This parameter is ignored if {@code
     *         rebalance_unsharded_data} is {@code false}.
     *                 <li> {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#AGGRESSIVENESS
     *         AGGRESSIVENESS}: Influences how much data is moved at a time
     *         during rebalance.  A higher {@code aggressiveness} will complete
     *         the rebalance faster.  A lower {@code aggressiveness} will take
     *         longer but allow for better interleaving between the rebalance
     *         and other queries. Valid values are constants from 1 (lowest) to
     *         10 (highest).  The default value is '10'.
     *                 <li> {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#COMPACT_AFTER_REBALANCE
     *         COMPACT_AFTER_REBALANCE}: Perform compaction of deleted records
     *         once the rebalance completes to reclaim memory and disk space.
     *         Default is {@code true}, unless {@code
     *         repair_incorrectly_sharded_data} is set to {@code true}.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}.
     *                 <li> {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#COMPACT_ONLY
     *         COMPACT_ONLY}: If set to {@code true}, ignore rebalance options
     *         and attempt to perform compaction of deleted records to reclaim
     *         memory and disk space without rebalancing first.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}.
     *                 <li> {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#REPAIR_INCORRECTLY_SHARDED_DATA
     *         REPAIR_INCORRECTLY_SHARDED_DATA}: Scans for any data sharded
     *         incorrectly and re-routes the data to the correct location. Only
     *         necessary if {@link
     *         com.gpudb.GPUdb#adminVerifyDb(AdminVerifyDbRequest)} reports an
     *         error in sharding alignment. This can be done as part of a
     *         typical rebalance after expanding the cluster or in a standalone
     *         fashion when it is believed that data is sharded incorrectly
     *         somewhere in the cluster. Compaction will not be performed by
     *         default when this is enabled. If this option is set to {@code
     *         true}, the time necessary to rebalance and the memory used by
     *         the rebalance may increase.
     *         Supported values:
     *         <ul>
     *                 <li> {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE TRUE}
     *                 <li> {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link
     *         com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE FALSE}.
     *         </ul>
     *         The default value is an empty {@link Map}.
     * 
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * 
     * @param options  Optional parameters.
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#REBALANCE_SHARDED_DATA
     *                 REBALANCE_SHARDED_DATA}: If {@code true}, <a
     *                 href="../../../../../../concepts/tables/#sharding"
     *                 target="_top">sharded data</a> will be rebalanced
     *                 approximately equally across the cluster. Note that for
     *                 clusters with large amounts of sharded data, this data
     *                 transfer could be time consuming and result in delayed
     *                 query responses.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#REBALANCE_UNSHARDED_DATA
     *                 REBALANCE_UNSHARDED_DATA}: If {@code true}, unsharded
     *                 data (a.k.a. <a
     *                 href="../../../../../../concepts/tables/#random-sharding"
     *                 target="_top">randomly-sharded</a>) will be rebalanced
     *                 approximately equally across the cluster. Note that for
     *                 clusters with large amounts of unsharded data, this data
     *                 transfer could be time consuming and result in delayed
     *                 query responses.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TABLE_INCLUDES
     *                 TABLE_INCLUDES}: Comma-separated list of unsharded table
     *                 names to rebalance. Not applicable to sharded tables
     *                 because they are always rebalanced. Cannot be used
     *                 simultaneously with {@code table_excludes}. This
     *                 parameter is ignored if {@code rebalance_unsharded_data}
     *                 is {@code false}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TABLE_EXCLUDES
     *                 TABLE_EXCLUDES}: Comma-separated list of unsharded table
     *                 names to not rebalance. Not applicable to sharded tables
     *                 because they are always rebalanced. Cannot be used
     *                 simultaneously with {@code table_includes}. This
     *                 parameter is ignored if {@code rebalance_unsharded_data}
     *                 is {@code false}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#AGGRESSIVENESS
     *                 AGGRESSIVENESS}: Influences how much data is moved at a
     *                 time during rebalance.  A higher {@code aggressiveness}
     *                 will complete the rebalance faster.  A lower {@code
     *                 aggressiveness} will take longer but allow for better
     *                 interleaving between the rebalance and other queries.
     *                 Valid values are constants from 1 (lowest) to 10
     *                 (highest).  The default value is '10'.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#COMPACT_AFTER_REBALANCE
     *                 COMPACT_AFTER_REBALANCE}: Perform compaction of deleted
     *                 records once the rebalance completes to reclaim memory
     *                 and disk space. Default is {@code true}, unless {@code
     *                 repair_incorrectly_sharded_data} is set to {@code true}.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#COMPACT_ONLY
     *                 COMPACT_ONLY}: If set to {@code true}, ignore rebalance
     *                 options and attempt to perform compaction of deleted
     *                 records to reclaim memory and disk space without
     *                 rebalancing first.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}.
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#REPAIR_INCORRECTLY_SHARDED_DATA
     *                 REPAIR_INCORRECTLY_SHARDED_DATA}: Scans for any data
     *                 sharded incorrectly and re-routes the data to the
     *                 correct location. Only necessary if {@link
     *                 com.gpudb.GPUdb#adminVerifyDb(AdminVerifyDbRequest)}
     *                 reports an error in sharding alignment. This can be done
     *                 as part of a typical rebalance after expanding the
     *                 cluster or in a standalone fashion when it is believed
     *                 that data is sharded incorrectly somewhere in the
     *                 cluster. Compaction will not be performed by default
     *                 when this is enabled. If this option is set to {@code
     *                 true}, the time necessary to rebalance and the memory
     *                 used by the rebalance may increase.
     *                 Supported values:
     *                 <ul>
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#TRUE
     *                 TRUE}
     *                         <li> {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}
     *                 </ul>
     *                 The default value is {@link
     *                 com.gpudb.protocol.AdminRebalanceRequest.Options#FALSE
     *                 FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     * 
     * @return {@code this} to mimic the builder pattern.
     * 
     */
    public AdminRebalanceRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @return the schema object describing this class.
     * 
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to get
     * 
     * @return value of the field with the given index.
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     * 
     * @param index  the position of the field to set
     * @param value  the value to set
     * 
     * @throws IndexOutOfBoundsException
     * 
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AdminRebalanceRequest that = (AdminRebalanceRequest)obj;

        return ( this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }

}
