/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#adminSwitchover(AdminSwitchoverRequest)
 * GPUdb.adminSwitchover}.
 * <p>
 * Manually switch over one or more processes to another host. Individual ranks
 * or entire hosts may be moved to another host.
 */
public class AdminSwitchoverRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("AdminSwitchoverRequest")
            .namespace("com.gpudb")
            .fields()
                .name("processes").type().array().items().stringType().noDefault()
                .name("destinations").type().array().items().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link AdminSwitchoverRequest}
     * parameter {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * If set to {@link Options#TRUE TRUE}, only validation checks will be
         * performed. Nothing is switched over.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String DRY_RUN = "dry_run";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private Options() {  }
    }

    private List<String> processes;
    private List<String> destinations;
    private Map<String, String> options;

    /**
     * Constructs an AdminSwitchoverRequest object with default parameters.
     */
    public AdminSwitchoverRequest() {
        processes = new ArrayList<>();
        destinations = new ArrayList<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an AdminSwitchoverRequest object with the specified
     * parameters.
     *
     * @param processes  Indicates the process identifier to switch over to
     *                   another host. Options are 'hostN' and 'rankN' where
     *                   'N' corresponds to the number associated with a host
     *                   or rank in the <a
     *                   href="../../../../../../config/#config-main-network"
     *                   target="_top">Network</a> section of the gpudb.conf
     *                   file; e.g., 'host[N].address' or 'rank[N].host'. If
     *                   'hostN' is provided, all processes on that host will
     *                   be moved to another host. Each entry in this array
     *                   will be switched over to the corresponding host entry
     *                   at the same index in {@code destinations}.
     * @param destinations  Indicates to which host to switch over each
     *                      corresponding process given in {@code processes}.
     *                      Each index must be specified as 'hostN' where 'N'
     *                      corresponds to the number associated with a host or
     *                      rank in the <a
     *                      href="../../../../../../config/#config-main-network"
     *                      target="_top">Network</a> section of the gpudb.conf
     *                      file; e.g., 'host[N].address'. Each entry in this
     *                      array will receive the corresponding process entry
     *                      at the same index in {@code processes}.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#DRY_RUN DRY_RUN}: If set to
     *                         {@link Options#TRUE TRUE}, only validation
     *                         checks will be performed. Nothing is switched
     *                         over.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public AdminSwitchoverRequest(List<String> processes, List<String> destinations, Map<String, String> options) {
        this.processes = (processes == null) ? new ArrayList<String>() : processes;
        this.destinations = (destinations == null) ? new ArrayList<String>() : destinations;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Indicates the process identifier to switch over to another host. Options
     * are 'hostN' and 'rankN' where 'N' corresponds to the number associated
     * with a host or rank in the <a
     * href="../../../../../../config/#config-main-network"
     * target="_top">Network</a> section of the gpudb.conf file; e.g.,
     * 'host[N].address' or 'rank[N].host'. If 'hostN' is provided, all
     * processes on that host will be moved to another host. Each entry in this
     * array will be switched over to the corresponding host entry at the same
     * index in {@link #getDestinations() destinations}.
     *
     * @return The current value of {@code processes}.
     */
    public List<String> getProcesses() {
        return processes;
    }

    /**
     * Indicates the process identifier to switch over to another host. Options
     * are 'hostN' and 'rankN' where 'N' corresponds to the number associated
     * with a host or rank in the <a
     * href="../../../../../../config/#config-main-network"
     * target="_top">Network</a> section of the gpudb.conf file; e.g.,
     * 'host[N].address' or 'rank[N].host'. If 'hostN' is provided, all
     * processes on that host will be moved to another host. Each entry in this
     * array will be switched over to the corresponding host entry at the same
     * index in {@link #getDestinations() destinations}.
     *
     * @param processes  The new value for {@code processes}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminSwitchoverRequest setProcesses(List<String> processes) {
        this.processes = (processes == null) ? new ArrayList<String>() : processes;
        return this;
    }

    /**
     * Indicates to which host to switch over each corresponding process given
     * in {@link #getProcesses() processes}. Each index must be specified as
     * 'hostN' where 'N' corresponds to the number associated with a host or
     * rank in the <a href="../../../../../../config/#config-main-network"
     * target="_top">Network</a> section of the gpudb.conf file; e.g.,
     * 'host[N].address'. Each entry in this array will receive the
     * corresponding process entry at the same index in {@link #getProcesses()
     * processes}.
     *
     * @return The current value of {@code destinations}.
     */
    public List<String> getDestinations() {
        return destinations;
    }

    /**
     * Indicates to which host to switch over each corresponding process given
     * in {@link #getProcesses() processes}. Each index must be specified as
     * 'hostN' where 'N' corresponds to the number associated with a host or
     * rank in the <a href="../../../../../../config/#config-main-network"
     * target="_top">Network</a> section of the gpudb.conf file; e.g.,
     * 'host[N].address'. Each entry in this array will receive the
     * corresponding process entry at the same index in {@link #getProcesses()
     * processes}.
     *
     * @param destinations  The new value for {@code destinations}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminSwitchoverRequest setDestinations(List<String> destinations) {
        this.destinations = (destinations == null) ? new ArrayList<String>() : destinations;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#DRY_RUN DRY_RUN}: If set to {@link Options#TRUE
     *         TRUE}, only validation checks will be performed. Nothing is
     *         switched over.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#DRY_RUN DRY_RUN}: If set to {@link Options#TRUE
     *         TRUE}, only validation checks will be performed. Nothing is
     *         switched over.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public AdminSwitchoverRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.processes;

            case 1:
                return this.destinations;

            case 2:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.processes = (List<String>)value;
                break;

            case 1:
                this.destinations = (List<String>)value;
                break;

            case 2:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        AdminSwitchoverRequest that = (AdminSwitchoverRequest)obj;

        return ( this.processes.equals( that.processes )
                 && this.destinations.equals( that.destinations )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "processes" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.processes ) );
        builder.append( ", " );
        builder.append( gd.toString( "destinations" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.destinations ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.processes.hashCode();
        hashCode = (31 * hashCode) + this.destinations.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
