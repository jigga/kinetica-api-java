/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

public class ShowFunctionsResponse implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("ShowFunctionsResponse")
            .namespace("com.gpudb")
            .fields()
                .name("functionNames").type().array().items().stringType().noDefault()
                .name("returnTypes").type().array().items().stringType().noDefault()
                .name("parameters").type().array().items().array().items().stringType().noDefault()
                .name("optionalParameterCount").type().array().items().intType().noDefault()
                .name("flags").type().array().items().intType().noDefault()
                .name("typeSchemas").type().array().items().stringType().noDefault()
                .name("properties").type().array().items().map().values().array().items().stringType().noDefault()
                .name("info").type().map().values().stringType().noDefault()
            .endRecord();

    public static Schema getClassSchema() {
        return schema$;
    }

    public static final class Flags {
        public static final String SCALAR = "scalar";
        public static final String AGGREGATE = "aggregate";
        public static final String SQL = "sql";
        public static final String UDF = "udf";
        public static final String CAST = "cast";
        public static final String NONDETERMINISTIC = "nondeterministic";

        private Flags() {  }
    }

    private List<String> functionNames;
    private List<String> returnTypes;
    private List<List<String>> parameters;
    private List<Integer> optionalParameterCount;
    private List<Integer> flags;
    private List<String> typeSchemas;
    private List<Map<String, List<String>>> properties;
    private Map<String, String> info;

    public ShowFunctionsResponse() {
    }

    public List<String> getFunctionNames() {
        return functionNames;
    }

    public ShowFunctionsResponse setFunctionNames(List<String> functionNames) {
        this.functionNames = (functionNames == null) ? new ArrayList<String>() : functionNames;
        return this;
    }

    public List<String> getReturnTypes() {
        return returnTypes;
    }

    public ShowFunctionsResponse setReturnTypes(List<String> returnTypes) {
        this.returnTypes = (returnTypes == null) ? new ArrayList<String>() : returnTypes;
        return this;
    }

    public List<List<String>> getParameters() {
        return parameters;
    }

    public ShowFunctionsResponse setParameters(List<List<String>> parameters) {
        this.parameters = (parameters == null) ? new ArrayList<List<String>>() : parameters;
        return this;
    }

    public List<Integer> getOptionalParameterCount() {
        return optionalParameterCount;
    }

    public ShowFunctionsResponse setOptionalParameterCount(List<Integer> optionalParameterCount) {
        this.optionalParameterCount = (optionalParameterCount == null) ? new ArrayList<Integer>() : optionalParameterCount;
        return this;
    }

    public List<Integer> getFlags() {
        return flags;
    }

    public ShowFunctionsResponse setFlags(List<Integer> flags) {
        this.flags = (flags == null) ? new ArrayList<Integer>() : flags;
        return this;
    }

    public List<String> getTypeSchemas() {
        return typeSchemas;
    }

    public ShowFunctionsResponse setTypeSchemas(List<String> typeSchemas) {
        this.typeSchemas = (typeSchemas == null) ? new ArrayList<String>() : typeSchemas;
        return this;
    }

    public List<Map<String, List<String>>> getProperties() {
        return properties;
    }

    public ShowFunctionsResponse setProperties(List<Map<String, List<String>>> properties) {
        this.properties = (properties == null) ? new ArrayList<Map<String, List<String>>>() : properties;
        return this;
    }

    public Map<String, String> getInfo() {
        return info;
    }

    public ShowFunctionsResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    @Override
    public Schema getSchema() {
        return schema$;
    }

    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.functionNames;

            case 1:
                return this.returnTypes;

            case 2:
                return this.parameters;

            case 3:
                return this.optionalParameterCount;

            case 4:
                return this.flags;

            case 5:
                return this.typeSchemas;

            case 6:
                return this.properties;

            case 7:
                return this.info;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.functionNames = (List<String>)value;
                break;

            case 1:
                this.returnTypes = (List<String>)value;
                break;

            case 2:
                this.parameters = (List<List<String>>)value;
                break;

            case 3:
                this.optionalParameterCount = (List<Integer>)value;
                break;

            case 4:
                this.flags = (List<Integer>)value;
                break;

            case 5:
                this.typeSchemas = (List<String>)value;
                break;

            case 6:
                this.properties = (List<Map<String, List<String>>>)value;
                break;

            case 7:
                this.info = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        ShowFunctionsResponse that = (ShowFunctionsResponse)obj;

        return ( this.functionNames.equals( that.functionNames )
                 && this.returnTypes.equals( that.returnTypes )
                 && this.parameters.equals( that.parameters )
                 && this.optionalParameterCount.equals( that.optionalParameterCount )
                 && this.flags.equals( that.flags )
                 && this.typeSchemas.equals( that.typeSchemas )
                 && this.properties.equals( that.properties )
                 && this.info.equals( that.info ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "functionNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.functionNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "returnTypes" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.returnTypes ) );
        builder.append( ", " );
        builder.append( gd.toString( "parameters" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.parameters ) );
        builder.append( ", " );
        builder.append( gd.toString( "optionalParameterCount" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.optionalParameterCount ) );
        builder.append( ", " );
        builder.append( gd.toString( "flags" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.flags ) );
        builder.append( ", " );
        builder.append( gd.toString( "typeSchemas" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.typeSchemas ) );
        builder.append( ", " );
        builder.append( gd.toString( "properties" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.properties ) );
        builder.append( ", " );
        builder.append( gd.toString( "info" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.info ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.functionNames.hashCode();
        hashCode = (31 * hashCode) + this.returnTypes.hashCode();
        hashCode = (31 * hashCode) + this.parameters.hashCode();
        hashCode = (31 * hashCode) + this.optionalParameterCount.hashCode();
        hashCode = (31 * hashCode) + this.flags.hashCode();
        hashCode = (31 * hashCode) + this.typeSchemas.hashCode();
        hashCode = (31 * hashCode) + this.properties.hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }
}
