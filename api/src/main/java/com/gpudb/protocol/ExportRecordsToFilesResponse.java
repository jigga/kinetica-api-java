/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of results returned by {@link
 * com.gpudb.GPUdb#exportRecordsToFiles(ExportRecordsToFilesRequest)
 * GPUdb.exportRecordsToFiles}.
 */
public class ExportRecordsToFilesResponse implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("ExportRecordsToFilesResponse")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("countExported").type().longType().noDefault()
                .name("countSkipped").type().longType().noDefault()
                .name("files").type().array().items().stringType().noDefault()
                .name("lastTimestamp").type().longType().noDefault()
                .name("dataText").type().array().items().stringType().noDefault()
                .name("dataBytes").type().array().items().bytesType().noDefault()
                .name("info").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    private String tableName;
    private long countExported;
    private long countSkipped;
    private List<String> files;
    private long lastTimestamp;
    private List<String> dataText;
    private List<ByteBuffer> dataBytes;
    private Map<String, String> info;

    /**
     * Constructs an ExportRecordsToFilesResponse object with default
     * parameters.
     */
    public ExportRecordsToFilesResponse() {
    }

    /**
     * Name of source table
     *
     * @return The current value of {@code tableName}.
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * Name of source table
     *
     * @param tableName  The new value for {@code tableName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ExportRecordsToFilesResponse setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * Number of source table records exported
     *
     * @return The current value of {@code countExported}.
     */
    public long getCountExported() {
        return countExported;
    }

    /**
     * Number of source table records exported
     *
     * @param countExported  The new value for {@code countExported}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ExportRecordsToFilesResponse setCountExported(long countExported) {
        this.countExported = countExported;
        return this;
    }

    /**
     * Number of source table records skipped
     *
     * @return The current value of {@code countSkipped}.
     */
    public long getCountSkipped() {
        return countSkipped;
    }

    /**
     * Number of source table records skipped
     *
     * @param countSkipped  The new value for {@code countSkipped}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ExportRecordsToFilesResponse setCountSkipped(long countSkipped) {
        this.countSkipped = countSkipped;
        return this;
    }

    /**
     * Names of all exported files
     *
     * @return The current value of {@code files}.
     */
    public List<String> getFiles() {
        return files;
    }

    /**
     * Names of all exported files
     *
     * @param files  The new value for {@code files}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ExportRecordsToFilesResponse setFiles(List<String> files) {
        this.files = (files == null) ? new ArrayList<String>() : files;
        return this;
    }

    /**
     * Timestamp of last file scanned
     *
     * @return The current value of {@code lastTimestamp}.
     */
    public long getLastTimestamp() {
        return lastTimestamp;
    }

    /**
     * Timestamp of last file scanned
     *
     * @param lastTimestamp  The new value for {@code lastTimestamp}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ExportRecordsToFilesResponse setLastTimestamp(long lastTimestamp) {
        this.lastTimestamp = lastTimestamp;
        return this;
    }

    /**
     * @return The current value of {@code dataText}.
     */
    public List<String> getDataText() {
        return dataText;
    }

    /**
     * @param dataText  The new value for {@code dataText}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ExportRecordsToFilesResponse setDataText(List<String> dataText) {
        this.dataText = (dataText == null) ? new ArrayList<String>() : dataText;
        return this;
    }

    /**
     * @return The current value of {@code dataBytes}.
     */
    public List<ByteBuffer> getDataBytes() {
        return dataBytes;
    }

    /**
     * @param dataBytes  The new value for {@code dataBytes}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ExportRecordsToFilesResponse setDataBytes(List<ByteBuffer> dataBytes) {
        this.dataBytes = (dataBytes == null) ? new ArrayList<ByteBuffer>() : dataBytes;
        return this;
    }

    /**
     * Additional information
     *
     * @return The current value of {@code info}.
     */
    public Map<String, String> getInfo() {
        return info;
    }

    /**
     * Additional information
     *
     * @param info  The new value for {@code info}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ExportRecordsToFilesResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.countExported;

            case 2:
                return this.countSkipped;

            case 3:
                return this.files;

            case 4:
                return this.lastTimestamp;

            case 5:
                return this.dataText;

            case 6:
                return this.dataBytes;

            case 7:
                return this.info;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.countExported = (Long)value;
                break;

            case 2:
                this.countSkipped = (Long)value;
                break;

            case 3:
                this.files = (List<String>)value;
                break;

            case 4:
                this.lastTimestamp = (Long)value;
                break;

            case 5:
                this.dataText = (List<String>)value;
                break;

            case 6:
                this.dataBytes = (List<ByteBuffer>)value;
                break;

            case 7:
                this.info = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        ExportRecordsToFilesResponse that = (ExportRecordsToFilesResponse)obj;

        return ( this.tableName.equals( that.tableName )
                 && ( this.countExported == that.countExported )
                 && ( this.countSkipped == that.countSkipped )
                 && this.files.equals( that.files )
                 && ( this.lastTimestamp == that.lastTimestamp )
                 && this.dataText.equals( that.dataText )
                 && this.dataBytes.equals( that.dataBytes )
                 && this.info.equals( that.info ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "countExported" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.countExported ) );
        builder.append( ", " );
        builder.append( gd.toString( "countSkipped" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.countSkipped ) );
        builder.append( ", " );
        builder.append( gd.toString( "files" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.files ) );
        builder.append( ", " );
        builder.append( gd.toString( "lastTimestamp" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.lastTimestamp ) );
        builder.append( ", " );
        builder.append( gd.toString( "dataText" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.dataText ) );
        builder.append( ", " );
        builder.append( gd.toString( "dataBytes" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.dataBytes ) );
        builder.append( ", " );
        builder.append( gd.toString( "info" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.info ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + ((Long)this.countExported).hashCode();
        hashCode = (31 * hashCode) + ((Long)this.countSkipped).hashCode();
        hashCode = (31 * hashCode) + this.files.hashCode();
        hashCode = (31 * hashCode) + ((Long)this.lastTimestamp).hashCode();
        hashCode = (31 * hashCode) + this.dataText.hashCode();
        hashCode = (31 * hashCode) + this.dataBytes.hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }
}
