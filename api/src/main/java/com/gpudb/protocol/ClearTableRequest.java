/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link com.gpudb.GPUdb#clearTable(ClearTableRequest)
 * GPUdb.clearTable}.
 * <p>
 * Clears (drops) one or all tables in the database cluster. The operation is
 * synchronous meaning that the table will be cleared before the function
 * returns. The response payload returns the status of the operation along with
 * the name of the table that was cleared.
 */
public class ClearTableRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("ClearTableRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("authorization").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link ClearTableRequest} parameter
     * {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * If {@link Options#TRUE TRUE} and if the table specified in {@link
         * #getTableName() tableName} does not exist no error is returned. If
         * {@link Options#FALSE FALSE} and if the table specified in {@link
         * #getTableName() tableName} does not exist then an error is returned.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String NO_ERROR_IF_NOT_EXISTS = "no_error_if_not_exists";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private Options() {  }
    }

    private String tableName;
    private String authorization;
    private Map<String, String> options;

    /**
     * Constructs a ClearTableRequest object with default parameters.
     */
    public ClearTableRequest() {
        tableName = "";
        authorization = "";
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a ClearTableRequest object with the specified parameters.
     *
     * @param tableName  Name of the table to be cleared, in
     *                   [schema_name.]table_name format, using standard <a
     *                   href="../../../../../../concepts/tables/#table-name-resolution"
     *                   target="_top">name resolution rules</a>. Must be an
     *                   existing table. Empty string clears all available
     *                   tables, though this behavior is be prevented by
     *                   default via gpudb.conf parameter 'disable_clear_all'.
     *                   The default value is ''.
     * @param authorization  No longer used. User can pass an empty string. The
     *                       default value is ''.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#NO_ERROR_IF_NOT_EXISTS
     *                         NO_ERROR_IF_NOT_EXISTS}: If {@link Options#TRUE
     *                         TRUE} and if the table specified in {@code
     *                         tableName} does not exist no error is returned.
     *                         If {@link Options#FALSE FALSE} and if the table
     *                         specified in {@code tableName} does not exist
     *                         then an error is returned.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public ClearTableRequest(String tableName, String authorization, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.authorization = (authorization == null) ? "" : authorization;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of the table to be cleared, in [schema_name.]table_name format,
     * using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>. Must be an existing table.
     * Empty string clears all available tables, though this behavior is be
     * prevented by default via gpudb.conf parameter 'disable_clear_all'. The
     * default value is ''.
     *
     * @return The current value of {@code tableName}.
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * Name of the table to be cleared, in [schema_name.]table_name format,
     * using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>. Must be an existing table.
     * Empty string clears all available tables, though this behavior is be
     * prevented by default via gpudb.conf parameter 'disable_clear_all'. The
     * default value is ''.
     *
     * @param tableName  The new value for {@code tableName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ClearTableRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * No longer used. User can pass an empty string. The default value is ''.
     *
     * @return The current value of {@code authorization}.
     */
    public String getAuthorization() {
        return authorization;
    }

    /**
     * No longer used. User can pass an empty string. The default value is ''.
     *
     * @param authorization  The new value for {@code authorization}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ClearTableRequest setAuthorization(String authorization) {
        this.authorization = (authorization == null) ? "" : authorization;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#NO_ERROR_IF_NOT_EXISTS NO_ERROR_IF_NOT_EXISTS}:
     *         If {@link Options#TRUE TRUE} and if the table specified in
     *         {@link #getTableName() tableName} does not exist no error is
     *         returned. If {@link Options#FALSE FALSE} and if the table
     *         specified in {@link #getTableName() tableName} does not exist
     *         then an error is returned.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#NO_ERROR_IF_NOT_EXISTS NO_ERROR_IF_NOT_EXISTS}:
     *         If {@link Options#TRUE TRUE} and if the table specified in
     *         {@link #getTableName() tableName} does not exist no error is
     *         returned. If {@link Options#FALSE FALSE} and if the table
     *         specified in {@link #getTableName() tableName} does not exist
     *         then an error is returned.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ClearTableRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.authorization;

            case 2:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.authorization = (String)value;
                break;

            case 2:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        ClearTableRequest that = (ClearTableRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && this.authorization.equals( that.authorization )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "authorization" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.authorization ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + this.authorization.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
