/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#getRecordsFromCollection(GetRecordsFromCollectionRequest)
 * GPUdb.getRecordsFromCollection}.
 * <p>
 * Retrieves records from a collection. The operation can optionally return the
 * record IDs which can be used in certain queries such as {@link
 * com.gpudb.GPUdb#deleteRecords(DeleteRecordsRequest) GPUdb.deleteRecords}.
 * <p>
 * This operation supports paging through the data via the {@link #getOffset()
 * offset} and {@link #getLimit() limit} parameters.
 * <p>
 * Note that when using the Java API, it is not possible to retrieve records
 * from join views using this operation.
 * (DEPRECATED)
 */
public class GetRecordsFromCollectionRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("GetRecordsFromCollectionRequest")
            .namespace("com.gpudb")
            .fields()
                .name("tableName").type().stringType().noDefault()
                .name("offset").type().longType().noDefault()
                .name("limit").type().longType().noDefault()
                .name("encoding").type().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link
     * GetRecordsFromCollectionRequest} parameter {@link #getEncoding()
     * encoding}.
     * <p>
     * Specifies the encoding for returned records; either {@link
     * Encoding#BINARY BINARY} or {@link Encoding#JSON JSON}.
     */
    public static final class Encoding {
        public static final String BINARY = "binary";
        public static final String JSON = "json";

        private Encoding() {  }
    }

    /**
     * A set of string constants for the {@link
     * GetRecordsFromCollectionRequest} parameter {@link #getOptions()
     * options}.
     */
    public static final class Options {
        /**
         * If {@link Options#TRUE TRUE} then return the internal record ID
         * along with each returned record.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String RETURN_RECORD_IDS = "return_record_ids";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * Optional filter expression to apply to the table. The default value
         * is ''.
         */
        public static final String EXPRESSION = "expression";

        private Options() {  }
    }

    private String tableName;
    private long offset;
    private long limit;
    private String encoding;
    private Map<String, String> options;

    /**
     * Constructs a GetRecordsFromCollectionRequest object with default
     * parameters.
     */
    public GetRecordsFromCollectionRequest() {
        tableName = "";
        encoding = Encoding.BINARY;
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a GetRecordsFromCollectionRequest object with the specified
     * parameters.
     *
     * @param tableName  Name of the collection or table from which records are
     *                   to be retrieved, in [schema_name.]table_name format,
     *                   using standard <a
     *                   href="../../../../../../concepts/tables/#table-name-resolution"
     *                   target="_top">name resolution rules</a>.  Must be an
     *                   existing collection or table.
     * @param offset  A positive integer indicating the number of initial
     *                results to skip (this can be useful for paging through
     *                the results). The default value is 0. The minimum allowed
     *                value is 0. The maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               results to be returned, or END_OF_SET (-9999) to indicate
     *               that the maximum number of results allowed by the server
     *               should be returned.  The number of records returned will
     *               never exceed the server's own limit, defined by the <a
     *               href="../../../../../../config/#config-main-general"
     *               target="_top">max_get_records_size</a> parameter in the
     *               server configuration. Use {@code offset} & {@code limit}
     *               to request subsequent pages of results. The default value
     *               is -9999.
     * @param options  <ul>
     *                     <li>{@link Options#RETURN_RECORD_IDS
     *                         RETURN_RECORD_IDS}: If {@link Options#TRUE TRUE}
     *                         then return the internal record ID along with
     *                         each returned record.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#EXPRESSION EXPRESSION}: Optional
     *                         filter expression to apply to the table. The
     *                         default value is ''.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public GetRecordsFromCollectionRequest(String tableName, long offset, long limit, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.offset = offset;
        this.limit = limit;
        this.encoding = Encoding.BINARY;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Constructs a GetRecordsFromCollectionRequest object with the specified
     * parameters.
     *
     * @param tableName  Name of the collection or table from which records are
     *                   to be retrieved, in [schema_name.]table_name format,
     *                   using standard <a
     *                   href="../../../../../../concepts/tables/#table-name-resolution"
     *                   target="_top">name resolution rules</a>.  Must be an
     *                   existing collection or table.
     * @param offset  A positive integer indicating the number of initial
     *                results to skip (this can be useful for paging through
     *                the results). The default value is 0. The minimum allowed
     *                value is 0. The maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               results to be returned, or END_OF_SET (-9999) to indicate
     *               that the maximum number of results allowed by the server
     *               should be returned.  The number of records returned will
     *               never exceed the server's own limit, defined by the <a
     *               href="../../../../../../config/#config-main-general"
     *               target="_top">max_get_records_size</a> parameter in the
     *               server configuration. Use {@code offset} & {@code limit}
     *               to request subsequent pages of results. The default value
     *               is -9999.
     * @param encoding  Specifies the encoding for returned records; either
     *                  {@link Encoding#BINARY BINARY} or {@link Encoding#JSON
     *                  JSON}.
     *                  Supported values:
     *                  <ul>
     *                      <li>{@link Encoding#BINARY BINARY}
     *                      <li>{@link Encoding#JSON JSON}
     *                  </ul>
     *                  The default value is {@link Encoding#BINARY BINARY}.
     * @param options  <ul>
     *                     <li>{@link Options#RETURN_RECORD_IDS
     *                         RETURN_RECORD_IDS}: If {@link Options#TRUE TRUE}
     *                         then return the internal record ID along with
     *                         each returned record.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#EXPRESSION EXPRESSION}: Optional
     *                         filter expression to apply to the table. The
     *                         default value is ''.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public GetRecordsFromCollectionRequest(String tableName, long offset, long limit, String encoding, Map<String, String> options) {
        this.tableName = (tableName == null) ? "" : tableName;
        this.offset = offset;
        this.limit = limit;
        this.encoding = (encoding == null) ? Encoding.BINARY : encoding;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of the collection or table from which records are to be retrieved,
     * in [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>.  Must be an existing collection
     * or table.
     *
     * @return The current value of {@code tableName}.
     */
    public String getTableName() {
        return tableName;
    }

    /**
     * Name of the collection or table from which records are to be retrieved,
     * in [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a>.  Must be an existing collection
     * or table.
     *
     * @param tableName  The new value for {@code tableName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public GetRecordsFromCollectionRequest setTableName(String tableName) {
        this.tableName = (tableName == null) ? "" : tableName;
        return this;
    }

    /**
     * A positive integer indicating the number of initial results to skip
     * (this can be useful for paging through the results). The default value
     * is 0. The minimum allowed value is 0. The maximum allowed value is
     * MAX_INT.
     *
     * @return The current value of {@code offset}.
     */
    public long getOffset() {
        return offset;
    }

    /**
     * A positive integer indicating the number of initial results to skip
     * (this can be useful for paging through the results). The default value
     * is 0. The minimum allowed value is 0. The maximum allowed value is
     * MAX_INT.
     *
     * @param offset  The new value for {@code offset}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public GetRecordsFromCollectionRequest setOffset(long offset) {
        this.offset = offset;
        return this;
    }

    /**
     * A positive integer indicating the maximum number of results to be
     * returned, or END_OF_SET (-9999) to indicate that the maximum number of
     * results allowed by the server should be returned.  The number of records
     * returned will never exceed the server's own limit, defined by the <a
     * href="../../../../../../config/#config-main-general"
     * target="_top">max_get_records_size</a> parameter in the server
     * configuration. Use {@link #getOffset() offset} & {@link #getLimit()
     * limit} to request subsequent pages of results. The default value is
     * -9999.
     *
     * @return The current value of {@code limit}.
     */
    public long getLimit() {
        return limit;
    }

    /**
     * A positive integer indicating the maximum number of results to be
     * returned, or END_OF_SET (-9999) to indicate that the maximum number of
     * results allowed by the server should be returned.  The number of records
     * returned will never exceed the server's own limit, defined by the <a
     * href="../../../../../../config/#config-main-general"
     * target="_top">max_get_records_size</a> parameter in the server
     * configuration. Use {@link #getOffset() offset} & {@link #getLimit()
     * limit} to request subsequent pages of results. The default value is
     * -9999.
     *
     * @param limit  The new value for {@code limit}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public GetRecordsFromCollectionRequest setLimit(long limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Specifies the encoding for returned records; either {@link
     * Encoding#BINARY BINARY} or {@link Encoding#JSON JSON}.
     * Supported values:
     * <ul>
     *     <li>{@link Encoding#BINARY BINARY}
     *     <li>{@link Encoding#JSON JSON}
     * </ul>
     * The default value is {@link Encoding#BINARY BINARY}.
     *
     * @return The current value of {@code encoding}.
     */
    public String getEncoding() {
        return encoding;
    }

    /**
     * Specifies the encoding for returned records; either {@link
     * Encoding#BINARY BINARY} or {@link Encoding#JSON JSON}.
     * Supported values:
     * <ul>
     *     <li>{@link Encoding#BINARY BINARY}
     *     <li>{@link Encoding#JSON JSON}
     * </ul>
     * The default value is {@link Encoding#BINARY BINARY}.
     *
     * @param encoding  The new value for {@code encoding}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public GetRecordsFromCollectionRequest setEncoding(String encoding) {
        this.encoding = (encoding == null) ? Encoding.BINARY : encoding;
        return this;
    }

    /**
     * <ul>
     *     <li>{@link Options#RETURN_RECORD_IDS RETURN_RECORD_IDS}: If {@link
     *         Options#TRUE TRUE} then return the internal record ID along with
     *         each returned record.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#EXPRESSION EXPRESSION}: Optional filter
     *         expression to apply to the table. The default value is ''.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * <ul>
     *     <li>{@link Options#RETURN_RECORD_IDS RETURN_RECORD_IDS}: If {@link
     *         Options#TRUE TRUE} then return the internal record ID along with
     *         each returned record.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#EXPRESSION EXPRESSION}: Optional filter
     *         expression to apply to the table. The default value is ''.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public GetRecordsFromCollectionRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.tableName;

            case 1:
                return this.offset;

            case 2:
                return this.limit;

            case 3:
                return this.encoding;

            case 4:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.tableName = (String)value;
                break;

            case 1:
                this.offset = (Long)value;
                break;

            case 2:
                this.limit = (Long)value;
                break;

            case 3:
                this.encoding = (String)value;
                break;

            case 4:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        GetRecordsFromCollectionRequest that = (GetRecordsFromCollectionRequest)obj;

        return ( this.tableName.equals( that.tableName )
                 && ( this.offset == that.offset )
                 && ( this.limit == that.limit )
                 && this.encoding.equals( that.encoding )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "tableName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.tableName ) );
        builder.append( ", " );
        builder.append( gd.toString( "offset" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.offset ) );
        builder.append( ", " );
        builder.append( gd.toString( "limit" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.limit ) );
        builder.append( ", " );
        builder.append( gd.toString( "encoding" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.encoding ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.tableName.hashCode();
        hashCode = (31 * hashCode) + ((Long)this.offset).hashCode();
        hashCode = (31 * hashCode) + ((Long)this.limit).hashCode();
        hashCode = (31 * hashCode) + this.encoding.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
