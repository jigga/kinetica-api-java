/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link com.gpudb.GPUdb#executeSql(ExecuteSqlRequest)
 * GPUdb.executeSql}.
 * <p>
 * Execute a SQL statement (query, DML, or DDL).
 * <p>
 * See <a href="../../../../../../sql/" target="_top">SQL Support</a> for the
 * complete set of supported SQL commands.
 */
public class ExecuteSqlRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("ExecuteSqlRequest")
            .namespace("com.gpudb")
            .fields()
                .name("statement").type().stringType().noDefault()
                .name("offset").type().longType().noDefault()
                .name("limit").type().longType().noDefault()
                .name("encoding").type().stringType().noDefault()
                .name("requestSchemaStr").type().stringType().noDefault()
                .name("data").type().array().items().bytesType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link ExecuteSqlRequest} parameter
     * {@link #getEncoding() encoding}.
     * <p>
     * Specifies the encoding for returned records; either 'binary' or 'json'.
     */
    public static final class Encoding {
        public static final String BINARY = "binary";
        public static final String JSON = "json";

        private Encoding() {  }
    }

    /**
     * A set of string constants for the {@link ExecuteSqlRequest} parameter
     * {@link #getOptions() options}.
     * <p>
     * Optional parameters.
     */
    public static final class Options {
        /**
         * If {@link Options#FALSE FALSE}, disables the cost-based optimization
         * of the given query.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String COST_BASED_OPTIMIZATION = "cost_based_optimization";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * If {@link Options#TRUE TRUE}, enables the use of distributed joins
         * in servicing the given query.  Any query requiring a distributed
         * join will succeed, though hints can be used in the query to change
         * the distribution of the source data to allow the query to succeed.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String DISTRIBUTED_JOINS = "distributed_joins";

        /**
         * If {@link Options#TRUE TRUE}, enables the use of distributed
         * operations in servicing the given query.  Any query requiring a
         * distributed join will succeed, though hints can be used in the query
         * to change the distribution of the source data to allow the query to
         * succeed.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String DISTRIBUTED_OPERATIONS = "distributed_operations";

        /**
         * Specifies the record collision error-suppression policy for
         * inserting into or updating a table with a <a
         * href="../../../../../../concepts/tables/#primary-keys"
         * target="_top">primary key</a>, only used when primary key record
         * collisions are rejected ({@link Options#UPDATE_ON_EXISTING_PK
         * UPDATE_ON_EXISTING_PK} is {@link Options#FALSE FALSE}).  If set to
         * {@link Options#TRUE TRUE}, any record insert/update that is rejected
         * for resulting in a primary key collision with an existing table
         * record will be ignored with no error generated.  If {@link
         * Options#FALSE FALSE}, the rejection of any insert/update for
         * resulting in a primary key collision will cause an error to be
         * reported.  If the specified table does not have a primary key or if
         * {@link Options#UPDATE_ON_EXISTING_PK UPDATE_ON_EXISTING_PK} is
         * {@link Options#TRUE TRUE}, then this option has no effect.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}: Ignore inserts/updates that
         *         result in primary key collisions with existing records
         *     <li>{@link Options#FALSE FALSE}: Treat as errors any
         *         inserts/updates that result in primary key collisions with
         *         existing records
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String IGNORE_EXISTING_PK = "ignore_existing_pk";

        /**
         * If {@link Options#TRUE TRUE}, Joins/Filters results  will always be
         * materialized ( saved to result tables format).
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String LATE_MATERIALIZATION = "late_materialization";

        /**
         * When empty or the specified paging table not exists, the system will
         * create a paging table and return when query output has more records
         * than the user asked. If the paging table exists in the system, the
         * records from the paging table are returned without evaluating the
         * query.
         */
        public static final String PAGING_TABLE = "paging_table";

        /**
         * Sets the <a href="../../../../../../concepts/ttl/"
         * target="_top">TTL</a> of the paging table.
         */
        public static final String PAGING_TABLE_TTL = "paging_table_ttl";

        /**
         * If {@link Options#FALSE FALSE}, disables the parallel step execution
         * of the given query.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#TRUE TRUE}.
         */
        public static final String PARALLEL_EXECUTION = "parallel_execution";

        /**
         * If {@link Options#FALSE FALSE}, disables plan caching for the given
         * query.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#TRUE TRUE}.
         */
        public static final String PLAN_CACHE = "plan_cache";

        /**
         * If {@link Options#TRUE TRUE}, compiles a query into an execution
         * plan and saves it in query cache. Query execution is not performed
         * and an empty response will be returned to user.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String PREPARE_MODE = "prepare_mode";

        /**
         * If {@link Options#TRUE TRUE}, then columns that were dict encoded in
         * the source table will be dict encoded in the projection table.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#TRUE TRUE}.
         */
        public static final String PRESERVE_DICT_ENCODING = "preserve_dict_encoding";

        /**
         * Query parameters in JSON array or arrays (for inserting multiple
         * rows).  This can be used instead of {@link #getData() data} and
         * {@link #getRequestSchemaStr() requestSchemaStr}.
         */
        public static final String QUERY_PARAMETERS = "query_parameters";

        /**
         * If {@link Options#FALSE FALSE}, disables caching of the results of
         * the given query.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#TRUE TRUE}.
         */
        public static final String RESULTS_CACHING = "results_caching";

        /**
         * If {@link Options#FALSE FALSE}, disables rule-based rewrite
         * optimizations for the given query.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#TRUE TRUE}.
         */
        public static final String RULE_BASED_OPTIMIZATION = "rule_based_optimization";

        /**
         * If {@link Options#FALSE FALSE}, scalar subqueries will be translated
         * into joins.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#TRUE TRUE}.
         */
        public static final String SSQ_OPTIMIZATION = "ssq_optimization";

        /**
         * Sets the <a href="../../../../../../concepts/ttl/"
         * target="_top">TTL</a> of the intermediate result tables used in
         * query execution.
         */
        public static final String TTL = "ttl";

        /**
         * Specifies the record collision policy for inserting into or updating
         * a table with a <a
         * href="../../../../../../concepts/tables/#primary-keys"
         * target="_top">primary key</a>. If set to {@link Options#TRUE TRUE},
         * any existing table record with primary key values that match those
         * of a record being inserted or updated will be replaced by that
         * record. If set to {@link Options#FALSE FALSE}, any such primary key
         * collision will result in the insert/update being rejected and the
         * error handled as determined by {@link Options#IGNORE_EXISTING_PK
         * IGNORE_EXISTING_PK}.  If the specified table does not have a primary
         * key, then this option has no effect.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}: Replace the collided-into record
         *         with the record inserted or updated when a new/modified
         *         record causes a primary key collision with an existing
         *         record
         *     <li>{@link Options#FALSE FALSE}: Reject the insert or update
         *         when it results in a primary key collision with an existing
         *         record
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String UPDATE_ON_EXISTING_PK = "update_on_existing_pk";

        /**
         * When changing a column using alter table, validate the change before
         * applying it. If {@link Options#TRUE TRUE}, then validate all values.
         * A value too large (or too long) for the new type will prevent any
         * change. If {@link Options#FALSE FALSE}, then when a value is too
         * large or long, it will be truncated.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#TRUE TRUE}.
         */
        public static final String VALIDATE_CHANGE_COLUMN = "validate_change_column";

        /**
         * Use the supplied value as the <a
         * href="../../../../../../concepts/schemas/#default-schema"
         * target="_top">default schema</a> when processing this SQL command.
         */
        public static final String CURRENT_SCHEMA = "current_schema";

        private Options() {  }
    }

    private String statement;
    private long offset;
    private long limit;
    private String encoding;
    private String requestSchemaStr;
    private List<ByteBuffer> data;
    private Map<String, String> options;

    /**
     * Constructs an ExecuteSqlRequest object with default parameters.
     */
    public ExecuteSqlRequest() {
        statement = "";
        encoding = Encoding.BINARY;
        requestSchemaStr = "";
        data = new ArrayList<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs an ExecuteSqlRequest object with the specified parameters.
     *
     * @param statement  SQL statement (query, DML, or DDL) to be executed
     * @param offset  A positive integer indicating the number of initial
     *                results to skip (this can be useful for paging through
     *                the results). The default value is 0. The minimum allowed
     *                value is 0. The maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               results to be returned, or END_OF_SET (-9999) to indicate
     *               that the maximum number of results allowed by the server
     *               should be returned.  The number of records returned will
     *               never exceed the server's own limit, defined by the <a
     *               href="../../../../../../config/#config-main-general"
     *               target="_top">max_get_records_size</a> parameter in the
     *               server configuration. Use {@link
     *               com.gpudb.protocol.ExecuteSqlResponse#getHasMoreRecords()
     *               hasMoreRecords} to see if more records exist in the result
     *               to be fetched, and {@code offset} & {@code limit} to
     *               request subsequent pages of results. The default value is
     *               -9999.
     * @param requestSchemaStr  Avro schema of {@code data}. The default value
     *                          is ''.
     * @param data  An array of binary-encoded data for the records to be
     *              binded to the SQL query.  Or use {@link
     *              Options#QUERY_PARAMETERS QUERY_PARAMETERS} to pass the data
     *              in JSON format. The default value is an empty {@link List}.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#COST_BASED_OPTIMIZATION
     *                         COST_BASED_OPTIMIZATION}: If {@link
     *                         Options#FALSE FALSE}, disables the cost-based
     *                         optimization of the given query.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#DISTRIBUTED_JOINS
     *                         DISTRIBUTED_JOINS}: If {@link Options#TRUE
     *                         TRUE}, enables the use of distributed joins in
     *                         servicing the given query.  Any query requiring
     *                         a distributed join will succeed, though hints
     *                         can be used in the query to change the
     *                         distribution of the source data to allow the
     *                         query to succeed.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#DISTRIBUTED_OPERATIONS
     *                         DISTRIBUTED_OPERATIONS}: If {@link Options#TRUE
     *                         TRUE}, enables the use of distributed operations
     *                         in servicing the given query.  Any query
     *                         requiring a distributed join will succeed,
     *                         though hints can be used in the query to change
     *                         the distribution of the source data to allow the
     *                         query to succeed.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#IGNORE_EXISTING_PK
     *                         IGNORE_EXISTING_PK}: Specifies the record
     *                         collision error-suppression policy for inserting
     *                         into or updating a table with a <a
     *                         href="../../../../../../concepts/tables/#primary-keys"
     *                         target="_top">primary key</a>, only used when
     *                         primary key record collisions are rejected
     *                         ({@link Options#UPDATE_ON_EXISTING_PK
     *                         UPDATE_ON_EXISTING_PK} is {@link Options#FALSE
     *                         FALSE}).  If set to {@link Options#TRUE TRUE},
     *                         any record insert/update that is rejected for
     *                         resulting in a primary key collision with an
     *                         existing table record will be ignored with no
     *                         error generated.  If {@link Options#FALSE
     *                         FALSE}, the rejection of any insert/update for
     *                         resulting in a primary key collision will cause
     *                         an error to be reported.  If the specified table
     *                         does not have a primary key or if {@link
     *                         Options#UPDATE_ON_EXISTING_PK
     *                         UPDATE_ON_EXISTING_PK} is {@link Options#TRUE
     *                         TRUE}, then this option has no effect.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}: Ignore
     *                                 inserts/updates that result in primary
     *                                 key collisions with existing records
     *                             <li>{@link Options#FALSE FALSE}: Treat as
     *                                 errors any inserts/updates that result
     *                                 in primary key collisions with existing
     *                                 records
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#LATE_MATERIALIZATION
     *                         LATE_MATERIALIZATION}: If {@link Options#TRUE
     *                         TRUE}, Joins/Filters results  will always be
     *                         materialized ( saved to result tables format).
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#PAGING_TABLE PAGING_TABLE}: When
     *                         empty or the specified paging table not exists,
     *                         the system will create a paging table and return
     *                         when query output has more records than the user
     *                         asked. If the paging table exists in the system,
     *                         the records from the paging table are returned
     *                         without evaluating the query.
     *                     <li>{@link Options#PAGING_TABLE_TTL
     *                         PAGING_TABLE_TTL}: Sets the <a
     *                         href="../../../../../../concepts/ttl/"
     *                         target="_top">TTL</a> of the paging table.
     *                     <li>{@link Options#PARALLEL_EXECUTION
     *                         PARALLEL_EXECUTION}: If {@link Options#FALSE
     *                         FALSE}, disables the parallel step execution of
     *                         the given query.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#PLAN_CACHE PLAN_CACHE}: If {@link
     *                         Options#FALSE FALSE}, disables plan caching for
     *                         the given query.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#PREPARE_MODE PREPARE_MODE}: If
     *                         {@link Options#TRUE TRUE}, compiles a query into
     *                         an execution plan and saves it in query cache.
     *                         Query execution is not performed and an empty
     *                         response will be returned to user.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#PRESERVE_DICT_ENCODING
     *                         PRESERVE_DICT_ENCODING}: If {@link Options#TRUE
     *                         TRUE}, then columns that were dict encoded in
     *                         the source table will be dict encoded in the
     *                         projection table.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#QUERY_PARAMETERS
     *                         QUERY_PARAMETERS}: Query parameters in JSON
     *                         array or arrays (for inserting multiple rows).
     *                         This can be used instead of {@code data} and
     *                         {@code requestSchemaStr}.
     *                     <li>{@link Options#RESULTS_CACHING RESULTS_CACHING}:
     *                         If {@link Options#FALSE FALSE}, disables caching
     *                         of the results of the given query.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#RULE_BASED_OPTIMIZATION
     *                         RULE_BASED_OPTIMIZATION}: If {@link
     *                         Options#FALSE FALSE}, disables rule-based
     *                         rewrite optimizations for the given query.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#SSQ_OPTIMIZATION
     *                         SSQ_OPTIMIZATION}: If {@link Options#FALSE
     *                         FALSE}, scalar subqueries will be translated
     *                         into joins.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#TTL TTL}: Sets the <a
     *                         href="../../../../../../concepts/ttl/"
     *                         target="_top">TTL</a> of the intermediate result
     *                         tables used in query execution.
     *                     <li>{@link Options#UPDATE_ON_EXISTING_PK
     *                         UPDATE_ON_EXISTING_PK}: Specifies the record
     *                         collision policy for inserting into or updating
     *                         a table with a <a
     *                         href="../../../../../../concepts/tables/#primary-keys"
     *                         target="_top">primary key</a>. If set to {@link
     *                         Options#TRUE TRUE}, any existing table record
     *                         with primary key values that match those of a
     *                         record being inserted or updated will be
     *                         replaced by that record. If set to {@link
     *                         Options#FALSE FALSE}, any such primary key
     *                         collision will result in the insert/update being
     *                         rejected and the error handled as determined by
     *                         {@link Options#IGNORE_EXISTING_PK
     *                         IGNORE_EXISTING_PK}.  If the specified table
     *                         does not have a primary key, then this option
     *                         has no effect.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}: Replace the
     *                                 collided-into record with the record
     *                                 inserted or updated when a new/modified
     *                                 record causes a primary key collision
     *                                 with an existing record
     *                             <li>{@link Options#FALSE FALSE}: Reject the
     *                                 insert or update when it results in a
     *                                 primary key collision with an existing
     *                                 record
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#VALIDATE_CHANGE_COLUMN
     *                         VALIDATE_CHANGE_COLUMN}: When changing a column
     *                         using alter table, validate the change before
     *                         applying it. If {@link Options#TRUE TRUE}, then
     *                         validate all values. A value too large (or too
     *                         long) for the new type will prevent any change.
     *                         If {@link Options#FALSE FALSE}, then when a
     *                         value is too large or long, it will be
     *                         truncated.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#CURRENT_SCHEMA CURRENT_SCHEMA}:
     *                         Use the supplied value as the <a
     *                         href="../../../../../../concepts/schemas/#default-schema"
     *                         target="_top">default schema</a> when processing
     *                         this SQL command.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public ExecuteSqlRequest(String statement, long offset, long limit, String requestSchemaStr, List<ByteBuffer> data, Map<String, String> options) {
        this.statement = (statement == null) ? "" : statement;
        this.offset = offset;
        this.limit = limit;
        this.encoding = Encoding.BINARY;
        this.requestSchemaStr = (requestSchemaStr == null) ? "" : requestSchemaStr;
        this.data = (data == null) ? new ArrayList<ByteBuffer>() : data;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Constructs an ExecuteSqlRequest object with the specified parameters.
     *
     * @param statement  SQL statement (query, DML, or DDL) to be executed
     * @param offset  A positive integer indicating the number of initial
     *                results to skip (this can be useful for paging through
     *                the results). The default value is 0. The minimum allowed
     *                value is 0. The maximum allowed value is MAX_INT.
     * @param limit  A positive integer indicating the maximum number of
     *               results to be returned, or END_OF_SET (-9999) to indicate
     *               that the maximum number of results allowed by the server
     *               should be returned.  The number of records returned will
     *               never exceed the server's own limit, defined by the <a
     *               href="../../../../../../config/#config-main-general"
     *               target="_top">max_get_records_size</a> parameter in the
     *               server configuration. Use {@link
     *               com.gpudb.protocol.ExecuteSqlResponse#getHasMoreRecords()
     *               hasMoreRecords} to see if more records exist in the result
     *               to be fetched, and {@code offset} & {@code limit} to
     *               request subsequent pages of results. The default value is
     *               -9999.
     * @param encoding  Specifies the encoding for returned records; either
     *                  'binary' or 'json'.
     *                  Supported values:
     *                  <ul>
     *                      <li>{@link Encoding#BINARY BINARY}
     *                      <li>{@link Encoding#JSON JSON}
     *                  </ul>
     *                  The default value is {@link Encoding#BINARY BINARY}.
     * @param requestSchemaStr  Avro schema of {@code data}. The default value
     *                          is ''.
     * @param data  An array of binary-encoded data for the records to be
     *              binded to the SQL query.  Or use {@link
     *              Options#QUERY_PARAMETERS QUERY_PARAMETERS} to pass the data
     *              in JSON format. The default value is an empty {@link List}.
     * @param options  Optional parameters.
     *                 <ul>
     *                     <li>{@link Options#COST_BASED_OPTIMIZATION
     *                         COST_BASED_OPTIMIZATION}: If {@link
     *                         Options#FALSE FALSE}, disables the cost-based
     *                         optimization of the given query.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#DISTRIBUTED_JOINS
     *                         DISTRIBUTED_JOINS}: If {@link Options#TRUE
     *                         TRUE}, enables the use of distributed joins in
     *                         servicing the given query.  Any query requiring
     *                         a distributed join will succeed, though hints
     *                         can be used in the query to change the
     *                         distribution of the source data to allow the
     *                         query to succeed.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#DISTRIBUTED_OPERATIONS
     *                         DISTRIBUTED_OPERATIONS}: If {@link Options#TRUE
     *                         TRUE}, enables the use of distributed operations
     *                         in servicing the given query.  Any query
     *                         requiring a distributed join will succeed,
     *                         though hints can be used in the query to change
     *                         the distribution of the source data to allow the
     *                         query to succeed.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#IGNORE_EXISTING_PK
     *                         IGNORE_EXISTING_PK}: Specifies the record
     *                         collision error-suppression policy for inserting
     *                         into or updating a table with a <a
     *                         href="../../../../../../concepts/tables/#primary-keys"
     *                         target="_top">primary key</a>, only used when
     *                         primary key record collisions are rejected
     *                         ({@link Options#UPDATE_ON_EXISTING_PK
     *                         UPDATE_ON_EXISTING_PK} is {@link Options#FALSE
     *                         FALSE}).  If set to {@link Options#TRUE TRUE},
     *                         any record insert/update that is rejected for
     *                         resulting in a primary key collision with an
     *                         existing table record will be ignored with no
     *                         error generated.  If {@link Options#FALSE
     *                         FALSE}, the rejection of any insert/update for
     *                         resulting in a primary key collision will cause
     *                         an error to be reported.  If the specified table
     *                         does not have a primary key or if {@link
     *                         Options#UPDATE_ON_EXISTING_PK
     *                         UPDATE_ON_EXISTING_PK} is {@link Options#TRUE
     *                         TRUE}, then this option has no effect.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}: Ignore
     *                                 inserts/updates that result in primary
     *                                 key collisions with existing records
     *                             <li>{@link Options#FALSE FALSE}: Treat as
     *                                 errors any inserts/updates that result
     *                                 in primary key collisions with existing
     *                                 records
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#LATE_MATERIALIZATION
     *                         LATE_MATERIALIZATION}: If {@link Options#TRUE
     *                         TRUE}, Joins/Filters results  will always be
     *                         materialized ( saved to result tables format).
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#PAGING_TABLE PAGING_TABLE}: When
     *                         empty or the specified paging table not exists,
     *                         the system will create a paging table and return
     *                         when query output has more records than the user
     *                         asked. If the paging table exists in the system,
     *                         the records from the paging table are returned
     *                         without evaluating the query.
     *                     <li>{@link Options#PAGING_TABLE_TTL
     *                         PAGING_TABLE_TTL}: Sets the <a
     *                         href="../../../../../../concepts/ttl/"
     *                         target="_top">TTL</a> of the paging table.
     *                     <li>{@link Options#PARALLEL_EXECUTION
     *                         PARALLEL_EXECUTION}: If {@link Options#FALSE
     *                         FALSE}, disables the parallel step execution of
     *                         the given query.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#PLAN_CACHE PLAN_CACHE}: If {@link
     *                         Options#FALSE FALSE}, disables plan caching for
     *                         the given query.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#PREPARE_MODE PREPARE_MODE}: If
     *                         {@link Options#TRUE TRUE}, compiles a query into
     *                         an execution plan and saves it in query cache.
     *                         Query execution is not performed and an empty
     *                         response will be returned to user.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#PRESERVE_DICT_ENCODING
     *                         PRESERVE_DICT_ENCODING}: If {@link Options#TRUE
     *                         TRUE}, then columns that were dict encoded in
     *                         the source table will be dict encoded in the
     *                         projection table.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#QUERY_PARAMETERS
     *                         QUERY_PARAMETERS}: Query parameters in JSON
     *                         array or arrays (for inserting multiple rows).
     *                         This can be used instead of {@code data} and
     *                         {@code requestSchemaStr}.
     *                     <li>{@link Options#RESULTS_CACHING RESULTS_CACHING}:
     *                         If {@link Options#FALSE FALSE}, disables caching
     *                         of the results of the given query.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#RULE_BASED_OPTIMIZATION
     *                         RULE_BASED_OPTIMIZATION}: If {@link
     *                         Options#FALSE FALSE}, disables rule-based
     *                         rewrite optimizations for the given query.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#SSQ_OPTIMIZATION
     *                         SSQ_OPTIMIZATION}: If {@link Options#FALSE
     *                         FALSE}, scalar subqueries will be translated
     *                         into joins.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#TTL TTL}: Sets the <a
     *                         href="../../../../../../concepts/ttl/"
     *                         target="_top">TTL</a> of the intermediate result
     *                         tables used in query execution.
     *                     <li>{@link Options#UPDATE_ON_EXISTING_PK
     *                         UPDATE_ON_EXISTING_PK}: Specifies the record
     *                         collision policy for inserting into or updating
     *                         a table with a <a
     *                         href="../../../../../../concepts/tables/#primary-keys"
     *                         target="_top">primary key</a>. If set to {@link
     *                         Options#TRUE TRUE}, any existing table record
     *                         with primary key values that match those of a
     *                         record being inserted or updated will be
     *                         replaced by that record. If set to {@link
     *                         Options#FALSE FALSE}, any such primary key
     *                         collision will result in the insert/update being
     *                         rejected and the error handled as determined by
     *                         {@link Options#IGNORE_EXISTING_PK
     *                         IGNORE_EXISTING_PK}.  If the specified table
     *                         does not have a primary key, then this option
     *                         has no effect.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}: Replace the
     *                                 collided-into record with the record
     *                                 inserted or updated when a new/modified
     *                                 record causes a primary key collision
     *                                 with an existing record
     *                             <li>{@link Options#FALSE FALSE}: Reject the
     *                                 insert or update when it results in a
     *                                 primary key collision with an existing
     *                                 record
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#VALIDATE_CHANGE_COLUMN
     *                         VALIDATE_CHANGE_COLUMN}: When changing a column
     *                         using alter table, validate the change before
     *                         applying it. If {@link Options#TRUE TRUE}, then
     *                         validate all values. A value too large (or too
     *                         long) for the new type will prevent any change.
     *                         If {@link Options#FALSE FALSE}, then when a
     *                         value is too large or long, it will be
     *                         truncated.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#CURRENT_SCHEMA CURRENT_SCHEMA}:
     *                         Use the supplied value as the <a
     *                         href="../../../../../../concepts/schemas/#default-schema"
     *                         target="_top">default schema</a> when processing
     *                         this SQL command.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public ExecuteSqlRequest(String statement, long offset, long limit, String encoding, String requestSchemaStr, List<ByteBuffer> data, Map<String, String> options) {
        this.statement = (statement == null) ? "" : statement;
        this.offset = offset;
        this.limit = limit;
        this.encoding = (encoding == null) ? Encoding.BINARY : encoding;
        this.requestSchemaStr = (requestSchemaStr == null) ? "" : requestSchemaStr;
        this.data = (data == null) ? new ArrayList<ByteBuffer>() : data;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * SQL statement (query, DML, or DDL) to be executed
     *
     * @return The current value of {@code statement}.
     */
    public String getStatement() {
        return statement;
    }

    /**
     * SQL statement (query, DML, or DDL) to be executed
     *
     * @param statement  The new value for {@code statement}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ExecuteSqlRequest setStatement(String statement) {
        this.statement = (statement == null) ? "" : statement;
        return this;
    }

    /**
     * A positive integer indicating the number of initial results to skip
     * (this can be useful for paging through the results). The default value
     * is 0. The minimum allowed value is 0. The maximum allowed value is
     * MAX_INT.
     *
     * @return The current value of {@code offset}.
     */
    public long getOffset() {
        return offset;
    }

    /**
     * A positive integer indicating the number of initial results to skip
     * (this can be useful for paging through the results). The default value
     * is 0. The minimum allowed value is 0. The maximum allowed value is
     * MAX_INT.
     *
     * @param offset  The new value for {@code offset}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ExecuteSqlRequest setOffset(long offset) {
        this.offset = offset;
        return this;
    }

    /**
     * A positive integer indicating the maximum number of results to be
     * returned, or END_OF_SET (-9999) to indicate that the maximum number of
     * results allowed by the server should be returned.  The number of records
     * returned will never exceed the server's own limit, defined by the <a
     * href="../../../../../../config/#config-main-general"
     * target="_top">max_get_records_size</a> parameter in the server
     * configuration. Use {@link
     * com.gpudb.protocol.ExecuteSqlResponse#getHasMoreRecords()
     * hasMoreRecords} to see if more records exist in the result to be
     * fetched, and {@link #getOffset() offset} & {@link #getLimit() limit} to
     * request subsequent pages of results. The default value is -9999.
     *
     * @return The current value of {@code limit}.
     */
    public long getLimit() {
        return limit;
    }

    /**
     * A positive integer indicating the maximum number of results to be
     * returned, or END_OF_SET (-9999) to indicate that the maximum number of
     * results allowed by the server should be returned.  The number of records
     * returned will never exceed the server's own limit, defined by the <a
     * href="../../../../../../config/#config-main-general"
     * target="_top">max_get_records_size</a> parameter in the server
     * configuration. Use {@link
     * com.gpudb.protocol.ExecuteSqlResponse#getHasMoreRecords()
     * hasMoreRecords} to see if more records exist in the result to be
     * fetched, and {@link #getOffset() offset} & {@link #getLimit() limit} to
     * request subsequent pages of results. The default value is -9999.
     *
     * @param limit  The new value for {@code limit}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ExecuteSqlRequest setLimit(long limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Specifies the encoding for returned records; either 'binary' or 'json'.
     * Supported values:
     * <ul>
     *     <li>{@link Encoding#BINARY BINARY}
     *     <li>{@link Encoding#JSON JSON}
     * </ul>
     * The default value is {@link Encoding#BINARY BINARY}.
     *
     * @return The current value of {@code encoding}.
     */
    public String getEncoding() {
        return encoding;
    }

    /**
     * Specifies the encoding for returned records; either 'binary' or 'json'.
     * Supported values:
     * <ul>
     *     <li>{@link Encoding#BINARY BINARY}
     *     <li>{@link Encoding#JSON JSON}
     * </ul>
     * The default value is {@link Encoding#BINARY BINARY}.
     *
     * @param encoding  The new value for {@code encoding}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ExecuteSqlRequest setEncoding(String encoding) {
        this.encoding = (encoding == null) ? Encoding.BINARY : encoding;
        return this;
    }

    /**
     * Avro schema of {@link #getData() data}. The default value is ''.
     *
     * @return The current value of {@code requestSchemaStr}.
     */
    public String getRequestSchemaStr() {
        return requestSchemaStr;
    }

    /**
     * Avro schema of {@link #getData() data}. The default value is ''.
     *
     * @param requestSchemaStr  The new value for {@code requestSchemaStr}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ExecuteSqlRequest setRequestSchemaStr(String requestSchemaStr) {
        this.requestSchemaStr = (requestSchemaStr == null) ? "" : requestSchemaStr;
        return this;
    }

    /**
     * An array of binary-encoded data for the records to be binded to the SQL
     * query.  Or use {@link Options#QUERY_PARAMETERS QUERY_PARAMETERS} to pass
     * the data in JSON format. The default value is an empty {@link List}.
     *
     * @return The current value of {@code data}.
     */
    public List<ByteBuffer> getData() {
        return data;
    }

    /**
     * An array of binary-encoded data for the records to be binded to the SQL
     * query.  Or use {@link Options#QUERY_PARAMETERS QUERY_PARAMETERS} to pass
     * the data in JSON format. The default value is an empty {@link List}.
     *
     * @param data  The new value for {@code data}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ExecuteSqlRequest setData(List<ByteBuffer> data) {
        this.data = (data == null) ? new ArrayList<ByteBuffer>() : data;
        return this;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#COST_BASED_OPTIMIZATION COST_BASED_OPTIMIZATION}:
     *         If {@link Options#FALSE FALSE}, disables the cost-based
     *         optimization of the given query.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#DISTRIBUTED_JOINS DISTRIBUTED_JOINS}: If {@link
     *         Options#TRUE TRUE}, enables the use of distributed joins in
     *         servicing the given query.  Any query requiring a distributed
     *         join will succeed, though hints can be used in the query to
     *         change the distribution of the source data to allow the query to
     *         succeed.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#DISTRIBUTED_OPERATIONS DISTRIBUTED_OPERATIONS}:
     *         If {@link Options#TRUE TRUE}, enables the use of distributed
     *         operations in servicing the given query.  Any query requiring a
     *         distributed join will succeed, though hints can be used in the
     *         query to change the distribution of the source data to allow the
     *         query to succeed.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#IGNORE_EXISTING_PK IGNORE_EXISTING_PK}: Specifies
     *         the record collision error-suppression policy for inserting into
     *         or updating a table with a <a
     *         href="../../../../../../concepts/tables/#primary-keys"
     *         target="_top">primary key</a>, only used when primary key record
     *         collisions are rejected ({@link Options#UPDATE_ON_EXISTING_PK
     *         UPDATE_ON_EXISTING_PK} is {@link Options#FALSE FALSE}).  If set
     *         to {@link Options#TRUE TRUE}, any record insert/update that is
     *         rejected for resulting in a primary key collision with an
     *         existing table record will be ignored with no error generated.
     *         If {@link Options#FALSE FALSE}, the rejection of any
     *         insert/update for resulting in a primary key collision will
     *         cause an error to be reported.  If the specified table does not
     *         have a primary key or if {@link Options#UPDATE_ON_EXISTING_PK
     *         UPDATE_ON_EXISTING_PK} is {@link Options#TRUE TRUE}, then this
     *         option has no effect.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}: Ignore inserts/updates that
     *                 result in primary key collisions with existing records
     *             <li>{@link Options#FALSE FALSE}: Treat as errors any
     *                 inserts/updates that result in primary key collisions
     *                 with existing records
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#LATE_MATERIALIZATION LATE_MATERIALIZATION}: If
     *         {@link Options#TRUE TRUE}, Joins/Filters results  will always be
     *         materialized ( saved to result tables format).
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#PAGING_TABLE PAGING_TABLE}: When empty or the
     *         specified paging table not exists, the system will create a
     *         paging table and return when query output has more records than
     *         the user asked. If the paging table exists in the system, the
     *         records from the paging table are returned without evaluating
     *         the query.
     *     <li>{@link Options#PAGING_TABLE_TTL PAGING_TABLE_TTL}: Sets the <a
     *         href="../../../../../../concepts/ttl/" target="_top">TTL</a> of
     *         the paging table.
     *     <li>{@link Options#PARALLEL_EXECUTION PARALLEL_EXECUTION}: If {@link
     *         Options#FALSE FALSE}, disables the parallel step execution of
     *         the given query.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#PLAN_CACHE PLAN_CACHE}: If {@link Options#FALSE
     *         FALSE}, disables plan caching for the given query.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#PREPARE_MODE PREPARE_MODE}: If {@link
     *         Options#TRUE TRUE}, compiles a query into an execution plan and
     *         saves it in query cache. Query execution is not performed and an
     *         empty response will be returned to user.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#PRESERVE_DICT_ENCODING PRESERVE_DICT_ENCODING}:
     *         If {@link Options#TRUE TRUE}, then columns that were dict
     *         encoded in the source table will be dict encoded in the
     *         projection table.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#QUERY_PARAMETERS QUERY_PARAMETERS}: Query
     *         parameters in JSON array or arrays (for inserting multiple
     *         rows).  This can be used instead of {@link #getData() data} and
     *         {@link #getRequestSchemaStr() requestSchemaStr}.
     *     <li>{@link Options#RESULTS_CACHING RESULTS_CACHING}: If {@link
     *         Options#FALSE FALSE}, disables caching of the results of the
     *         given query.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#RULE_BASED_OPTIMIZATION RULE_BASED_OPTIMIZATION}:
     *         If {@link Options#FALSE FALSE}, disables rule-based rewrite
     *         optimizations for the given query.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#SSQ_OPTIMIZATION SSQ_OPTIMIZATION}: If {@link
     *         Options#FALSE FALSE}, scalar subqueries will be translated into
     *         joins.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#TTL TTL}: Sets the <a
     *         href="../../../../../../concepts/ttl/" target="_top">TTL</a> of
     *         the intermediate result tables used in query execution.
     *     <li>{@link Options#UPDATE_ON_EXISTING_PK UPDATE_ON_EXISTING_PK}:
     *         Specifies the record collision policy for inserting into or
     *         updating a table with a <a
     *         href="../../../../../../concepts/tables/#primary-keys"
     *         target="_top">primary key</a>. If set to {@link Options#TRUE
     *         TRUE}, any existing table record with primary key values that
     *         match those of a record being inserted or updated will be
     *         replaced by that record. If set to {@link Options#FALSE FALSE},
     *         any such primary key collision will result in the insert/update
     *         being rejected and the error handled as determined by {@link
     *         Options#IGNORE_EXISTING_PK IGNORE_EXISTING_PK}.  If the
     *         specified table does not have a primary key, then this option
     *         has no effect.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}: Replace the collided-into
     *                 record with the record inserted or updated when a
     *                 new/modified record causes a primary key collision with
     *                 an existing record
     *             <li>{@link Options#FALSE FALSE}: Reject the insert or update
     *                 when it results in a primary key collision with an
     *                 existing record
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#VALIDATE_CHANGE_COLUMN VALIDATE_CHANGE_COLUMN}:
     *         When changing a column using alter table, validate the change
     *         before applying it. If {@link Options#TRUE TRUE}, then validate
     *         all values. A value too large (or too long) for the new type
     *         will prevent any change. If {@link Options#FALSE FALSE}, then
     *         when a value is too large or long, it will be truncated.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#CURRENT_SCHEMA CURRENT_SCHEMA}: Use the supplied
     *         value as the <a
     *         href="../../../../../../concepts/schemas/#default-schema"
     *         target="_top">default schema</a> when processing this SQL
     *         command.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Optional parameters.
     * <ul>
     *     <li>{@link Options#COST_BASED_OPTIMIZATION COST_BASED_OPTIMIZATION}:
     *         If {@link Options#FALSE FALSE}, disables the cost-based
     *         optimization of the given query.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#DISTRIBUTED_JOINS DISTRIBUTED_JOINS}: If {@link
     *         Options#TRUE TRUE}, enables the use of distributed joins in
     *         servicing the given query.  Any query requiring a distributed
     *         join will succeed, though hints can be used in the query to
     *         change the distribution of the source data to allow the query to
     *         succeed.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#DISTRIBUTED_OPERATIONS DISTRIBUTED_OPERATIONS}:
     *         If {@link Options#TRUE TRUE}, enables the use of distributed
     *         operations in servicing the given query.  Any query requiring a
     *         distributed join will succeed, though hints can be used in the
     *         query to change the distribution of the source data to allow the
     *         query to succeed.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#IGNORE_EXISTING_PK IGNORE_EXISTING_PK}: Specifies
     *         the record collision error-suppression policy for inserting into
     *         or updating a table with a <a
     *         href="../../../../../../concepts/tables/#primary-keys"
     *         target="_top">primary key</a>, only used when primary key record
     *         collisions are rejected ({@link Options#UPDATE_ON_EXISTING_PK
     *         UPDATE_ON_EXISTING_PK} is {@link Options#FALSE FALSE}).  If set
     *         to {@link Options#TRUE TRUE}, any record insert/update that is
     *         rejected for resulting in a primary key collision with an
     *         existing table record will be ignored with no error generated.
     *         If {@link Options#FALSE FALSE}, the rejection of any
     *         insert/update for resulting in a primary key collision will
     *         cause an error to be reported.  If the specified table does not
     *         have a primary key or if {@link Options#UPDATE_ON_EXISTING_PK
     *         UPDATE_ON_EXISTING_PK} is {@link Options#TRUE TRUE}, then this
     *         option has no effect.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}: Ignore inserts/updates that
     *                 result in primary key collisions with existing records
     *             <li>{@link Options#FALSE FALSE}: Treat as errors any
     *                 inserts/updates that result in primary key collisions
     *                 with existing records
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#LATE_MATERIALIZATION LATE_MATERIALIZATION}: If
     *         {@link Options#TRUE TRUE}, Joins/Filters results  will always be
     *         materialized ( saved to result tables format).
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#PAGING_TABLE PAGING_TABLE}: When empty or the
     *         specified paging table not exists, the system will create a
     *         paging table and return when query output has more records than
     *         the user asked. If the paging table exists in the system, the
     *         records from the paging table are returned without evaluating
     *         the query.
     *     <li>{@link Options#PAGING_TABLE_TTL PAGING_TABLE_TTL}: Sets the <a
     *         href="../../../../../../concepts/ttl/" target="_top">TTL</a> of
     *         the paging table.
     *     <li>{@link Options#PARALLEL_EXECUTION PARALLEL_EXECUTION}: If {@link
     *         Options#FALSE FALSE}, disables the parallel step execution of
     *         the given query.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#PLAN_CACHE PLAN_CACHE}: If {@link Options#FALSE
     *         FALSE}, disables plan caching for the given query.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#PREPARE_MODE PREPARE_MODE}: If {@link
     *         Options#TRUE TRUE}, compiles a query into an execution plan and
     *         saves it in query cache. Query execution is not performed and an
     *         empty response will be returned to user.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#PRESERVE_DICT_ENCODING PRESERVE_DICT_ENCODING}:
     *         If {@link Options#TRUE TRUE}, then columns that were dict
     *         encoded in the source table will be dict encoded in the
     *         projection table.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#QUERY_PARAMETERS QUERY_PARAMETERS}: Query
     *         parameters in JSON array or arrays (for inserting multiple
     *         rows).  This can be used instead of {@link #getData() data} and
     *         {@link #getRequestSchemaStr() requestSchemaStr}.
     *     <li>{@link Options#RESULTS_CACHING RESULTS_CACHING}: If {@link
     *         Options#FALSE FALSE}, disables caching of the results of the
     *         given query.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#RULE_BASED_OPTIMIZATION RULE_BASED_OPTIMIZATION}:
     *         If {@link Options#FALSE FALSE}, disables rule-based rewrite
     *         optimizations for the given query.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#SSQ_OPTIMIZATION SSQ_OPTIMIZATION}: If {@link
     *         Options#FALSE FALSE}, scalar subqueries will be translated into
     *         joins.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#TTL TTL}: Sets the <a
     *         href="../../../../../../concepts/ttl/" target="_top">TTL</a> of
     *         the intermediate result tables used in query execution.
     *     <li>{@link Options#UPDATE_ON_EXISTING_PK UPDATE_ON_EXISTING_PK}:
     *         Specifies the record collision policy for inserting into or
     *         updating a table with a <a
     *         href="../../../../../../concepts/tables/#primary-keys"
     *         target="_top">primary key</a>. If set to {@link Options#TRUE
     *         TRUE}, any existing table record with primary key values that
     *         match those of a record being inserted or updated will be
     *         replaced by that record. If set to {@link Options#FALSE FALSE},
     *         any such primary key collision will result in the insert/update
     *         being rejected and the error handled as determined by {@link
     *         Options#IGNORE_EXISTING_PK IGNORE_EXISTING_PK}.  If the
     *         specified table does not have a primary key, then this option
     *         has no effect.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}: Replace the collided-into
     *                 record with the record inserted or updated when a
     *                 new/modified record causes a primary key collision with
     *                 an existing record
     *             <li>{@link Options#FALSE FALSE}: Reject the insert or update
     *                 when it results in a primary key collision with an
     *                 existing record
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#VALIDATE_CHANGE_COLUMN VALIDATE_CHANGE_COLUMN}:
     *         When changing a column using alter table, validate the change
     *         before applying it. If {@link Options#TRUE TRUE}, then validate
     *         all values. A value too large (or too long) for the new type
     *         will prevent any change. If {@link Options#FALSE FALSE}, then
     *         when a value is too large or long, it will be truncated.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#CURRENT_SCHEMA CURRENT_SCHEMA}: Use the supplied
     *         value as the <a
     *         href="../../../../../../concepts/schemas/#default-schema"
     *         target="_top">default schema</a> when processing this SQL
     *         command.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public ExecuteSqlRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.statement;

            case 1:
                return this.offset;

            case 2:
                return this.limit;

            case 3:
                return this.encoding;

            case 4:
                return this.requestSchemaStr;

            case 5:
                return this.data;

            case 6:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.statement = (String)value;
                break;

            case 1:
                this.offset = (Long)value;
                break;

            case 2:
                this.limit = (Long)value;
                break;

            case 3:
                this.encoding = (String)value;
                break;

            case 4:
                this.requestSchemaStr = (String)value;
                break;

            case 5:
                this.data = (List<ByteBuffer>)value;
                break;

            case 6:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        ExecuteSqlRequest that = (ExecuteSqlRequest)obj;

        return ( this.statement.equals( that.statement )
                 && ( this.offset == that.offset )
                 && ( this.limit == that.limit )
                 && this.encoding.equals( that.encoding )
                 && this.requestSchemaStr.equals( that.requestSchemaStr )
                 && this.data.equals( that.data )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "statement" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.statement ) );
        builder.append( ", " );
        builder.append( gd.toString( "offset" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.offset ) );
        builder.append( ", " );
        builder.append( gd.toString( "limit" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.limit ) );
        builder.append( ", " );
        builder.append( gd.toString( "encoding" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.encoding ) );
        builder.append( ", " );
        builder.append( gd.toString( "requestSchemaStr" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.requestSchemaStr ) );
        builder.append( ", " );
        builder.append( gd.toString( "data" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.data ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.statement.hashCode();
        hashCode = (31 * hashCode) + ((Long)this.offset).hashCode();
        hashCode = (31 * hashCode) + ((Long)this.limit).hashCode();
        hashCode = (31 * hashCode) + this.encoding.hashCode();
        hashCode = (31 * hashCode) + this.requestSchemaStr.hashCode();
        hashCode = (31 * hashCode) + this.data.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
