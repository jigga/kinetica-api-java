/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

public class ShowContainerRegistryResponse implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("ShowContainerRegistryResponse")
            .namespace("com.gpudb")
            .fields()
                .name("registryName").type().stringType().noDefault()
                .name("registryNames").type().array().items().stringType().noDefault()
                .name("entityIds").type().array().items().intType().noDefault()
                .name("uriList").type().array().items().stringType().noDefault()
                .name("credentialList").type().array().items().stringType().noDefault()
                .name("info").type().map().values().stringType().noDefault()
            .endRecord();

    public static Schema getClassSchema() {
        return schema$;
    }

    public static final class Info {
        public static final String KML_RESPONSE = "kml_response";

        private Info() {  }
    }

    private String registryName;
    private List<String> registryNames;
    private List<Integer> entityIds;
    private List<String> uriList;
    private List<String> credentialList;
    private Map<String, String> info;

    public ShowContainerRegistryResponse() {
    }

    public String getRegistryName() {
        return registryName;
    }

    public ShowContainerRegistryResponse setRegistryName(String registryName) {
        this.registryName = (registryName == null) ? "" : registryName;
        return this;
    }

    public List<String> getRegistryNames() {
        return registryNames;
    }

    public ShowContainerRegistryResponse setRegistryNames(List<String> registryNames) {
        this.registryNames = (registryNames == null) ? new ArrayList<String>() : registryNames;
        return this;
    }

    public List<Integer> getEntityIds() {
        return entityIds;
    }

    public ShowContainerRegistryResponse setEntityIds(List<Integer> entityIds) {
        this.entityIds = (entityIds == null) ? new ArrayList<Integer>() : entityIds;
        return this;
    }

    public List<String> getUriList() {
        return uriList;
    }

    public ShowContainerRegistryResponse setUriList(List<String> uriList) {
        this.uriList = (uriList == null) ? new ArrayList<String>() : uriList;
        return this;
    }

    public List<String> getCredentialList() {
        return credentialList;
    }

    public ShowContainerRegistryResponse setCredentialList(List<String> credentialList) {
        this.credentialList = (credentialList == null) ? new ArrayList<String>() : credentialList;
        return this;
    }

    public Map<String, String> getInfo() {
        return info;
    }

    public ShowContainerRegistryResponse setInfo(Map<String, String> info) {
        this.info = (info == null) ? new LinkedHashMap<String, String>() : info;
        return this;
    }

    @Override
    public Schema getSchema() {
        return schema$;
    }

    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.registryName;

            case 1:
                return this.registryNames;

            case 2:
                return this.entityIds;

            case 3:
                return this.uriList;

            case 4:
                return this.credentialList;

            case 5:
                return this.info;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.registryName = (String)value;
                break;

            case 1:
                this.registryNames = (List<String>)value;
                break;

            case 2:
                this.entityIds = (List<Integer>)value;
                break;

            case 3:
                this.uriList = (List<String>)value;
                break;

            case 4:
                this.credentialList = (List<String>)value;
                break;

            case 5:
                this.info = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        ShowContainerRegistryResponse that = (ShowContainerRegistryResponse)obj;

        return ( this.registryName.equals( that.registryName )
                 && this.registryNames.equals( that.registryNames )
                 && this.entityIds.equals( that.entityIds )
                 && this.uriList.equals( that.uriList )
                 && this.credentialList.equals( that.credentialList )
                 && this.info.equals( that.info ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "registryName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.registryName ) );
        builder.append( ", " );
        builder.append( gd.toString( "registryNames" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.registryNames ) );
        builder.append( ", " );
        builder.append( gd.toString( "entityIds" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.entityIds ) );
        builder.append( ", " );
        builder.append( gd.toString( "uriList" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.uriList ) );
        builder.append( ", " );
        builder.append( gd.toString( "credentialList" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.credentialList ) );
        builder.append( ", " );
        builder.append( gd.toString( "info" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.info ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.registryName.hashCode();
        hashCode = (31 * hashCode) + this.registryNames.hashCode();
        hashCode = (31 * hashCode) + this.entityIds.hashCode();
        hashCode = (31 * hashCode) + this.uriList.hashCode();
        hashCode = (31 * hashCode) + this.credentialList.hashCode();
        hashCode = (31 * hashCode) + this.info.hashCode();
        return hashCode;
    }
}
