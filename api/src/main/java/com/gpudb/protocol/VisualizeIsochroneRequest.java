/*
 *  This file was autogenerated by the Kinetica schema processor.
 *
 *  DO NOT EDIT DIRECTLY.
 */
package com.gpudb.protocol;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 * A set of parameters for {@link
 * com.gpudb.GPUdb#visualizeIsochrone(VisualizeIsochroneRequest)
 * GPUdb.visualizeIsochrone}.
 * <p>
 * Generate an image containing isolines for travel results using an existing
 * graph. Isolines represent curves of equal cost, with cost typically
 * referring to the time or distance assigned as the weights of the underlying
 * graph. See <a href="../../../../../../graph_solver/network_graph_solver/"
 * target="_top">Network Graphs & Solvers</a> for more information on graphs.
 */
public class VisualizeIsochroneRequest implements IndexedRecord {
    private static final Schema schema$ = SchemaBuilder
            .record("VisualizeIsochroneRequest")
            .namespace("com.gpudb")
            .fields()
                .name("graphName").type().stringType().noDefault()
                .name("sourceNode").type().stringType().noDefault()
                .name("maxSolutionRadius").type().doubleType().noDefault()
                .name("weightsOnEdges").type().array().items().stringType().noDefault()
                .name("restrictions").type().array().items().stringType().noDefault()
                .name("numLevels").type().intType().noDefault()
                .name("generateImage").type().booleanType().noDefault()
                .name("levelsTable").type().stringType().noDefault()
                .name("styleOptions").type().map().values().stringType().noDefault()
                .name("solveOptions").type().map().values().stringType().noDefault()
                .name("contourOptions").type().map().values().stringType().noDefault()
                .name("options").type().map().values().stringType().noDefault()
            .endRecord();

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema for the class.
     */
    public static Schema getClassSchema() {
        return schema$;
    }

    /**
     * A set of string constants for the {@link VisualizeIsochroneRequest}
     * parameter {@link #getGenerateImage() generateImage}.
     * <p>
     * If set to {@link GenerateImage#TRUE TRUE}, generates a PNG image of the
     * isochrones in the response.
     */
    public static final class GenerateImage {
        public static final String TRUE = "true";
        public static final String FALSE = "false";

        private GenerateImage() {  }
    }

    /**
     * A set of string constants for the {@link VisualizeIsochroneRequest}
     * parameter {@link #getStyleOptions() styleOptions}.
     * <p>
     * Various style related options of the isochrone image.
     */
    public static final class StyleOptions {
        /**
         * The width of the contour lines in pixels. The default value is '3'.
         * The minimum allowed value is '0'. The maximum allowed value is '20'.
         */
        public static final String LINE_SIZE = "line_size";

        /**
         * Color of generated isolines. All color values must be in the format
         * RRGGBB or AARRGGBB (to specify the alpha value). If alpha is
         * specified and flooded contours are enabled, it will be used for as
         * the transparency of the latter. The default value is 'FF696969'.
         */
        public static final String COLOR = "color";

        /**
         * When {@link #getGenerateImage() generateImage} is set to {@link
         * GenerateImage#TRUE TRUE}, background color of the generated image.
         * All color values must be in the format RRGGBB or AARRGGBB (to
         * specify the alpha value). The default value is '00000000'.
         */
        public static final String BG_COLOR = "bg_color";

        /**
         * When {@link ContourOptions#ADD_LABELS ADD_LABELS} is set to {@link
         * ContourOptions#TRUE TRUE}, color for the labels. All color values
         * must be in the format RRGGBB or AARRGGBB (to specify the alpha
         * value). The default value is 'FF000000'.
         */
        public static final String TEXT_COLOR = "text_color";

        /**
         * Colormap for contours or fill-in regions when applicable. All color
         * values must be in the format RRGGBB or AARRGGBB (to specify the
         * alpha value).
         * Supported values:
         * <ul>
         *     <li>{@link StyleOptions#JET JET}
         *     <li>{@link StyleOptions#ACCENT ACCENT}
         *     <li>{@link StyleOptions#AFMHOT AFMHOT}
         *     <li>{@link StyleOptions#AUTUMN AUTUMN}
         *     <li>{@link StyleOptions#BINARY BINARY}
         *     <li>{@link StyleOptions#BLUES BLUES}
         *     <li>{@link StyleOptions#BONE BONE}
         *     <li>{@link StyleOptions#BRBG BRBG}
         *     <li>{@link StyleOptions#BRG BRG}
         *     <li>{@link StyleOptions#BUGN BUGN}
         *     <li>{@link StyleOptions#BUPU BUPU}
         *     <li>{@link StyleOptions#BWR BWR}
         *     <li>{@link StyleOptions#CMRMAP CMRMAP}
         *     <li>{@link StyleOptions#COOL COOL}
         *     <li>{@link StyleOptions#COOLWARM COOLWARM}
         *     <li>{@link StyleOptions#COPPER COPPER}
         *     <li>{@link StyleOptions#CUBEHELIX CUBEHELIX}
         *     <li>{@link StyleOptions#DARK2 DARK2}
         *     <li>{@link StyleOptions#FLAG FLAG}
         *     <li>{@link StyleOptions#GIST_EARTH GIST_EARTH}
         *     <li>{@link StyleOptions#GIST_GRAY GIST_GRAY}
         *     <li>{@link StyleOptions#GIST_HEAT GIST_HEAT}
         *     <li>{@link StyleOptions#GIST_NCAR GIST_NCAR}
         *     <li>{@link StyleOptions#GIST_RAINBOW GIST_RAINBOW}
         *     <li>{@link StyleOptions#GIST_STERN GIST_STERN}
         *     <li>{@link StyleOptions#GIST_YARG GIST_YARG}
         *     <li>{@link StyleOptions#GNBU GNBU}
         *     <li>{@link StyleOptions#GNUPLOT2 GNUPLOT2}
         *     <li>{@link StyleOptions#GNUPLOT GNUPLOT}
         *     <li>{@link StyleOptions#GRAY GRAY}
         *     <li>{@link StyleOptions#GREENS GREENS}
         *     <li>{@link StyleOptions#GREYS GREYS}
         *     <li>{@link StyleOptions#HOT HOT}
         *     <li>{@link StyleOptions#HSV HSV}
         *     <li>{@link StyleOptions#INFERNO INFERNO}
         *     <li>{@link StyleOptions#MAGMA MAGMA}
         *     <li>{@link StyleOptions#NIPY_SPECTRAL NIPY_SPECTRAL}
         *     <li>{@link StyleOptions#OCEAN OCEAN}
         *     <li>{@link StyleOptions#ORANGES ORANGES}
         *     <li>{@link StyleOptions#ORRD ORRD}
         *     <li>{@link StyleOptions#PAIRED PAIRED}
         *     <li>{@link StyleOptions#PASTEL1 PASTEL1}
         *     <li>{@link StyleOptions#PASTEL2 PASTEL2}
         *     <li>{@link StyleOptions#PINK PINK}
         *     <li>{@link StyleOptions#PIYG PIYG}
         *     <li>{@link StyleOptions#PLASMA PLASMA}
         *     <li>{@link StyleOptions#PRGN PRGN}
         *     <li>{@link StyleOptions#PRISM PRISM}
         *     <li>{@link StyleOptions#PUBU PUBU}
         *     <li>{@link StyleOptions#PUBUGN PUBUGN}
         *     <li>{@link StyleOptions#PUOR PUOR}
         *     <li>{@link StyleOptions#PURD PURD}
         *     <li>{@link StyleOptions#PURPLES PURPLES}
         *     <li>{@link StyleOptions#RAINBOW RAINBOW}
         *     <li>{@link StyleOptions#RDBU RDBU}
         *     <li>{@link StyleOptions#RDGY RDGY}
         *     <li>{@link StyleOptions#RDPU RDPU}
         *     <li>{@link StyleOptions#RDYLBU RDYLBU}
         *     <li>{@link StyleOptions#RDYLGN RDYLGN}
         *     <li>{@link StyleOptions#REDS REDS}
         *     <li>{@link StyleOptions#SEISMIC SEISMIC}
         *     <li>{@link StyleOptions#SET1 SET1}
         *     <li>{@link StyleOptions#SET2 SET2}
         *     <li>{@link StyleOptions#SET3 SET3}
         *     <li>{@link StyleOptions#SPECTRAL SPECTRAL}
         *     <li>{@link StyleOptions#SPRING SPRING}
         *     <li>{@link StyleOptions#SUMMER SUMMER}
         *     <li>{@link StyleOptions#TERRAIN TERRAIN}
         *     <li>{@link StyleOptions#VIRIDIS VIRIDIS}
         *     <li>{@link StyleOptions#WINTER WINTER}
         *     <li>{@link StyleOptions#WISTIA WISTIA}
         *     <li>{@link StyleOptions#YLGN YLGN}
         *     <li>{@link StyleOptions#YLGNBU YLGNBU}
         *     <li>{@link StyleOptions#YLORBR YLORBR}
         *     <li>{@link StyleOptions#YLORRD YLORRD}
         * </ul>
         * The default value is {@link StyleOptions#JET JET}.
         */
        public static final String COLORMAP = "colormap";

        public static final String JET = "jet";
        public static final String ACCENT = "accent";
        public static final String AFMHOT = "afmhot";
        public static final String AUTUMN = "autumn";
        public static final String BINARY = "binary";
        public static final String BLUES = "blues";
        public static final String BONE = "bone";
        public static final String BRBG = "brbg";
        public static final String BRG = "brg";
        public static final String BUGN = "bugn";
        public static final String BUPU = "bupu";
        public static final String BWR = "bwr";
        public static final String CMRMAP = "cmrmap";
        public static final String COOL = "cool";
        public static final String COOLWARM = "coolwarm";
        public static final String COPPER = "copper";
        public static final String CUBEHELIX = "cubehelix";
        public static final String DARK2 = "dark2";
        public static final String FLAG = "flag";
        public static final String GIST_EARTH = "gist_earth";
        public static final String GIST_GRAY = "gist_gray";
        public static final String GIST_HEAT = "gist_heat";
        public static final String GIST_NCAR = "gist_ncar";
        public static final String GIST_RAINBOW = "gist_rainbow";
        public static final String GIST_STERN = "gist_stern";
        public static final String GIST_YARG = "gist_yarg";
        public static final String GNBU = "gnbu";
        public static final String GNUPLOT2 = "gnuplot2";
        public static final String GNUPLOT = "gnuplot";
        public static final String GRAY = "gray";
        public static final String GREENS = "greens";
        public static final String GREYS = "greys";
        public static final String HOT = "hot";
        public static final String HSV = "hsv";
        public static final String INFERNO = "inferno";
        public static final String MAGMA = "magma";
        public static final String NIPY_SPECTRAL = "nipy_spectral";
        public static final String OCEAN = "ocean";
        public static final String ORANGES = "oranges";
        public static final String ORRD = "orrd";
        public static final String PAIRED = "paired";
        public static final String PASTEL1 = "pastel1";
        public static final String PASTEL2 = "pastel2";
        public static final String PINK = "pink";
        public static final String PIYG = "piyg";
        public static final String PLASMA = "plasma";
        public static final String PRGN = "prgn";
        public static final String PRISM = "prism";
        public static final String PUBU = "pubu";
        public static final String PUBUGN = "pubugn";
        public static final String PUOR = "puor";
        public static final String PURD = "purd";
        public static final String PURPLES = "purples";
        public static final String RAINBOW = "rainbow";
        public static final String RDBU = "rdbu";
        public static final String RDGY = "rdgy";
        public static final String RDPU = "rdpu";
        public static final String RDYLBU = "rdylbu";
        public static final String RDYLGN = "rdylgn";
        public static final String REDS = "reds";
        public static final String SEISMIC = "seismic";
        public static final String SET1 = "set1";
        public static final String SET2 = "set2";
        public static final String SET3 = "set3";
        public static final String SPECTRAL = "spectral";
        public static final String SPRING = "spring";
        public static final String SUMMER = "summer";
        public static final String TERRAIN = "terrain";
        public static final String VIRIDIS = "viridis";
        public static final String WINTER = "winter";
        public static final String WISTIA = "wistia";
        public static final String YLGN = "ylgn";
        public static final String YLGNBU = "ylgnbu";
        public static final String YLORBR = "ylorbr";
        public static final String YLORRD = "ylorrd";

        private StyleOptions() {  }
    }

    /**
     * A set of string constants for the {@link VisualizeIsochroneRequest}
     * parameter {@link #getSolveOptions() solveOptions}.
     * <p>
     * Solver specific parameters
     */
    public static final class SolveOptions {
        /**
         * Ignore the restrictions applied to the graph during the creation
         * stage and only use the restrictions specified in this request if set
         * to {@link SolveOptions#TRUE TRUE}.
         * Supported values:
         * <ul>
         *     <li>{@link SolveOptions#TRUE TRUE}
         *     <li>{@link SolveOptions#FALSE FALSE}
         * </ul>
         * The default value is {@link SolveOptions#FALSE FALSE}.
         */
        public static final String REMOVE_PREVIOUS_RESTRICTIONS = "remove_previous_restrictions";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * Value-based restriction comparison. Any node or edge with a
         * 'RESTRICTIONS_VALUECOMPARED' value greater than the {@link
         * SolveOptions#RESTRICTION_THRESHOLD_VALUE
         * RESTRICTION_THRESHOLD_VALUE} will not be included in the solution.
         */
        public static final String RESTRICTION_THRESHOLD_VALUE = "restriction_threshold_value";

        /**
         * When specified, assigns the given value to all the edges in the
         * graph. Note that weights provided in {@link #getWeightsOnEdges()
         * weightsOnEdges} will override this value.
         */
        public static final String UNIFORM_WEIGHTS = "uniform_weights";

        private SolveOptions() {  }
    }

    /**
     * A set of string constants for the {@link VisualizeIsochroneRequest}
     * parameter {@link #getContourOptions() contourOptions}.
     * <p>
     * Solver specific parameters
     */
    public static final class ContourOptions {
        /**
         * Spatial Reference System (i.e.&nbsp;EPSG Code).
         * Supported values:
         * <ul>
         *     <li>{@link ContourOptions#_3857 _3857}
         *     <li>{@link ContourOptions#_102100 _102100}
         *     <li>{@link ContourOptions#_900913 _900913}
         *     <li>{@link ContourOptions#EPSG_4326 EPSG_4326}
         *     <li>{@link ContourOptions#PLATE_CARREE PLATE_CARREE}
         *     <li>{@link ContourOptions#EPSG_900913 EPSG_900913}
         *     <li>{@link ContourOptions#EPSG_102100 EPSG_102100}
         *     <li>{@link ContourOptions#EPSG_3857 EPSG_3857}
         *     <li>{@link ContourOptions#WEB_MERCATOR WEB_MERCATOR}
         * </ul>
         * The default value is {@link ContourOptions#PLATE_CARREE
         * PLATE_CARREE}.
         */
        public static final String PROJECTION = "projection";

        public static final String _3857 = "3857";
        public static final String _102100 = "102100";
        public static final String _900913 = "900913";
        public static final String EPSG_4326 = "EPSG:4326";
        public static final String PLATE_CARREE = "PLATE_CARREE";
        public static final String EPSG_900913 = "EPSG:900913";
        public static final String EPSG_102100 = "EPSG:102100";
        public static final String EPSG_3857 = "EPSG:3857";
        public static final String WEB_MERCATOR = "WEB_MERCATOR";

        /**
         * When {@link #getGenerateImage() generateImage} is set to {@link
         * GenerateImage#TRUE TRUE}, width of the generated image. The default
         * value is '512'.
         */
        public static final String WIDTH = "width";

        /**
         * When {@link #getGenerateImage() generateImage} is set to {@link
         * GenerateImage#TRUE TRUE}, height of the generated image. If the
         * default value is used, the {@link ContourOptions#HEIGHT HEIGHT} is
         * set to the value resulting from multiplying the aspect ratio by the
         * {@link ContourOptions#WIDTH WIDTH}. The default value is '-1'.
         */
        public static final String HEIGHT = "height";

        /**
         * When interpolating the graph solution to generate the isochrone,
         * neighborhood of influence of sample data (in percent of the
         * image/grid). The default value is '20'.
         */
        public static final String SEARCH_RADIUS = "search_radius";

        /**
         * When interpolating the graph solution to generate the isochrone,
         * number of subdivisions along the x axis when building the grid (the
         * y is computed using the aspect ratio of the output image). The
         * default value is '100'.
         */
        public static final String GRID_SIZE = "grid_size";

        /**
         * Color each isoline according to the colormap; otherwise, use the
         * foreground color.
         * Supported values:
         * <ul>
         *     <li>{@link ContourOptions#TRUE TRUE}
         *     <li>{@link ContourOptions#FALSE FALSE}
         * </ul>
         * The default value is {@link ContourOptions#TRUE TRUE}.
         */
        public static final String COLOR_ISOLINES = "color_isolines";

        public static final String TRUE = "true";
        public static final String FALSE = "false";

        /**
         * If set to {@link ContourOptions#TRUE TRUE}, add labels to the
         * isolines.
         * Supported values:
         * <ul>
         *     <li>{@link ContourOptions#TRUE TRUE}
         *     <li>{@link ContourOptions#FALSE FALSE}
         * </ul>
         * The default value is {@link ContourOptions#FALSE FALSE}.
         */
        public static final String ADD_LABELS = "add_labels";

        /**
         * When {@link ContourOptions#ADD_LABELS ADD_LABELS} is set to {@link
         * ContourOptions#TRUE TRUE}, size of the font (in pixels) to use for
         * labels. The default value is '12'.
         */
        public static final String LABELS_FONT_SIZE = "labels_font_size";

        /**
         * When {@link ContourOptions#ADD_LABELS ADD_LABELS} is set to {@link
         * ContourOptions#TRUE TRUE}, font name to be used when adding labels.
         * The default value is 'arial'.
         */
        public static final String LABELS_FONT_FAMILY = "labels_font_family";

        /**
         * When {@link ContourOptions#ADD_LABELS ADD_LABELS} is set to {@link
         * ContourOptions#TRUE TRUE}, a search window is used to rate the local
         * quality of each isoline. Smooth, continuous, long stretches with
         * relatively flat angles are favored. The provided value is multiplied
         * by the {@link ContourOptions#LABELS_FONT_SIZE LABELS_FONT_SIZE} to
         * calculate the final window size. The default value is '4'.
         */
        public static final String LABELS_SEARCH_WINDOW = "labels_search_window";

        /**
         * When {@link ContourOptions#ADD_LABELS ADD_LABELS} is set to {@link
         * ContourOptions#TRUE TRUE}, this value determines the  distance (in
         * multiples of the {@link ContourOptions#LABELS_FONT_SIZE
         * LABELS_FONT_SIZE}) to use when separating labels of different
         * values. The default value is '4'.
         */
        public static final String LABELS_INTRALEVEL_SEPARATION = "labels_intralevel_separation";

        /**
         * When {@link ContourOptions#ADD_LABELS ADD_LABELS} is set to {@link
         * ContourOptions#TRUE TRUE}, this value determines the distance (in
         * percent of the total window size) to use when separating labels of
         * the same value. The default value is '20'.
         */
        public static final String LABELS_INTERLEVEL_SEPARATION = "labels_interlevel_separation";

        /**
         * When {@link ContourOptions#ADD_LABELS ADD_LABELS} is set to {@link
         * ContourOptions#TRUE TRUE}, maximum angle (in degrees) from the
         * vertical to use when adding labels. The default value is '60'.
         */
        public static final String LABELS_MAX_ANGLE = "labels_max_angle";

        private ContourOptions() {  }
    }

    /**
     * A set of string constants for the {@link VisualizeIsochroneRequest}
     * parameter {@link #getOptions() options}.
     * <p>
     * Additional parameters
     */
    public static final class Options {
        /**
         * Name of the table to host intermediate solve results, in
         * [schema_name.]table_name format, using standard <a
         * href="../../../../../../concepts/tables/#table-name-resolution"
         * target="_top">name resolution rules</a> and meeting <a
         * href="../../../../../../concepts/tables/#table-naming-criteria"
         * target="_top">table naming criteria</a>.  This table will contain
         * the position and cost for each vertex in the graph. If the default
         * value is used, a temporary table is created and deleted once the
         * solution is calculated. The default value is ''.
         */
        public static final String SOLVE_TABLE = "solve_table";

        /**
         * If set to {@link Options#TRUE TRUE}, replicate the {@link
         * Options#SOLVE_TABLE SOLVE_TABLE}.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}
         *     <li>{@link Options#FALSE FALSE}
         * </ul>
         * The default value is {@link Options#TRUE TRUE}.
         */
        public static final String IS_REPLICATED = "is_replicated";

        /**
         * uses the solvers scheduled for 'shortest_path' and
         * 'inverse_shortest_path' based on solve_direction
         */
        public static final String TRUE = "true";

        /**
         * uses the solvers 'priority_queue' and 'inverse_priority_queue' based
         * on solve_direction
         */
        public static final String FALSE = "false";

        /**
         * Lower bound for the x values. If not provided, it will be computed
         * from the bounds of the input data.
         */
        public static final String DATA_MIN_X = "data_min_x";

        /**
         * Upper bound for the x values. If not provided, it will be computed
         * from the bounds of the input data.
         */
        public static final String DATA_MAX_X = "data_max_x";

        /**
         * Lower bound for the y values. If not provided, it will be computed
         * from the bounds of the input data.
         */
        public static final String DATA_MIN_Y = "data_min_y";

        /**
         * Upper bound for the y values. If not provided, it will be computed
         * from the bounds of the input data.
         */
        public static final String DATA_MAX_Y = "data_max_y";

        /**
         * Factor to qualify the concavity of the isochrone curves. The lower
         * the value, the more convex (with '0' being completely convex and '1'
         * being the most concave). The default value is '0.5'. The minimum
         * allowed value is '0'. The maximum allowed value is '1'.
         */
        public static final String CONCAVITY_LEVEL = "concavity_level";

        /**
         * sets the solver methods explicitly if true.
         * Supported values:
         * <ul>
         *     <li>{@link Options#TRUE TRUE}: uses the solvers scheduled for
         *         'shortest_path' and 'inverse_shortest_path' based on
         *         solve_direction
         *     <li>{@link Options#FALSE FALSE}: uses the solvers
         *         'priority_queue' and 'inverse_priority_queue' based on
         *         solve_direction
         * </ul>
         * The default value is {@link Options#FALSE FALSE}.
         */
        public static final String USE_PRIORITY_QUEUE_SOLVERS = "use_priority_queue_solvers";

        /**
         * Specify whether we are going to the source node, or starting from
         * it.
         * Supported values:
         * <ul>
         *     <li>{@link Options#FROM_SOURCE FROM_SOURCE}: Shortest path to
         *         get to the source (inverse Dijkstra)
         *     <li>{@link Options#TO_SOURCE TO_SOURCE}: Shortest path to source
         *         (Dijkstra)
         * </ul>
         * The default value is {@link Options#FROM_SOURCE FROM_SOURCE}.
         */
        public static final String SOLVE_DIRECTION = "solve_direction";

        /**
         * Shortest path to get to the source (inverse Dijkstra)
         */
        public static final String FROM_SOURCE = "from_source";

        /**
         * Shortest path to source (Dijkstra)
         */
        public static final String TO_SOURCE = "to_source";

        private Options() {  }
    }

    private String graphName;
    private String sourceNode;
    private double maxSolutionRadius;
    private List<String> weightsOnEdges;
    private List<String> restrictions;
    private int numLevels;
    private boolean generateImage;
    private String levelsTable;
    private Map<String, String> styleOptions;
    private Map<String, String> solveOptions;
    private Map<String, String> contourOptions;
    private Map<String, String> options;

    /**
     * Constructs a VisualizeIsochroneRequest object with default parameters.
     */
    public VisualizeIsochroneRequest() {
        graphName = "";
        sourceNode = "";
        weightsOnEdges = new ArrayList<>();
        restrictions = new ArrayList<>();
        levelsTable = "";
        styleOptions = new LinkedHashMap<>();
        solveOptions = new LinkedHashMap<>();
        contourOptions = new LinkedHashMap<>();
        options = new LinkedHashMap<>();
    }

    /**
     * Constructs a VisualizeIsochroneRequest object with the specified
     * parameters.
     *
     * @param graphName  Name of the graph on which the isochrone is to be
     *                   computed.
     * @param sourceNode  Starting vertex on the underlying graph from/to which
     *                    the isochrones are created.
     * @param maxSolutionRadius  Extent of the search radius around {@code
     *                           sourceNode}. Set to '-1.0' for unrestricted
     *                           search radius. The default value is -1.0.
     * @param weightsOnEdges  Additional weights to apply to the edges of an
     *                        existing graph. Weights must be specified using
     *                        <a
     *                        href="../../../../../../graph_solver/network_graph_solver/#identifiers"
     *                        target="_top">identifiers</a>; identifiers are
     *                        grouped as <a
     *                        href="../../../../../../graph_solver/network_graph_solver/#id-combos"
     *                        target="_top">combinations</a>. Identifiers can
     *                        be used with existing column names, e.g.,
     *                        'table.column AS WEIGHTS_EDGE_ID', or
     *                        expressions, e.g., 'ST_LENGTH(wkt) AS
     *                        WEIGHTS_VALUESPECIFIED'. Any provided weights
     *                        will be added (in the case of
     *                        'WEIGHTS_VALUESPECIFIED') to or multiplied with
     *                        (in the case of 'WEIGHTS_FACTORSPECIFIED') the
     *                        existing weight(s). The default value is an empty
     *                        {@link List}.
     * @param restrictions  Additional restrictions to apply to the nodes/edges
     *                      of an existing graph. Restrictions must be
     *                      specified using <a
     *                      href="../../../../../../graph_solver/network_graph_solver/#identifiers"
     *                      target="_top">identifiers</a>; identifiers are
     *                      grouped as <a
     *                      href="../../../../../../graph_solver/network_graph_solver/#id-combos"
     *                      target="_top">combinations</a>. Identifiers can be
     *                      used with existing column names, e.g.,
     *                      'table.column AS RESTRICTIONS_EDGE_ID', or
     *                      expressions, e.g., 'column/2 AS
     *                      RESTRICTIONS_VALUECOMPARED'. If {@link
     *                      SolveOptions#REMOVE_PREVIOUS_RESTRICTIONS
     *                      REMOVE_PREVIOUS_RESTRICTIONS} is set to {@link
     *                      SolveOptions#TRUE TRUE}, any provided restrictions
     *                      will replace the existing restrictions. If {@link
     *                      SolveOptions#REMOVE_PREVIOUS_RESTRICTIONS
     *                      REMOVE_PREVIOUS_RESTRICTIONS} is set to {@link
     *                      SolveOptions#FALSE FALSE}, any provided
     *                      restrictions will be added (in the case of
     *                      'RESTRICTIONS_VALUECOMPARED') to or replaced (in
     *                      the case of 'RESTRICTIONS_ONOFFCOMPARED'). The
     *                      default value is an empty {@link List}.
     * @param numLevels  Number of equally-separated isochrones to compute. The
     *                   default value is 1.
     * @param generateImage  If set to {@link GenerateImage#TRUE TRUE},
     *                       generates a PNG image of the isochrones in the
     *                       response.
     *                       Supported values:
     *                       <ul>
     *                           <li>{@link GenerateImage#TRUE TRUE}
     *                           <li>{@link GenerateImage#FALSE FALSE}
     *                       </ul>
     *                       The default value is {@link GenerateImage#TRUE
     *                       TRUE}.
     * @param levelsTable  Name of the table to output the isochrones to, in
     *                     [schema_name.]table_name format, using standard <a
     *                     href="../../../../../../concepts/tables/#table-name-resolution"
     *                     target="_top">name resolution rules</a> and meeting
     *                     <a
     *                     href="../../../../../../concepts/tables/#table-naming-criteria"
     *                     target="_top">table naming criteria</a>.  The table
     *                     will contain levels and their corresponding WKT
     *                     geometry. If no value is provided, the table is not
     *                     generated. The default value is ''.
     * @param styleOptions  Various style related options of the isochrone
     *                      image.
     *                      <ul>
     *                          <li>{@link StyleOptions#LINE_SIZE LINE_SIZE}:
     *                              The width of the contour lines in pixels.
     *                              The default value is '3'. The minimum
     *                              allowed value is '0'. The maximum allowed
     *                              value is '20'.
     *                          <li>{@link StyleOptions#COLOR COLOR}: Color of
     *                              generated isolines. All color values must
     *                              be in the format RRGGBB or AARRGGBB (to
     *                              specify the alpha value). If alpha is
     *                              specified and flooded contours are enabled,
     *                              it will be used for as the transparency of
     *                              the latter. The default value is
     *                              'FF696969'.
     *                          <li>{@link StyleOptions#BG_COLOR BG_COLOR}:
     *                              When {@code generateImage} is set to {@link
     *                              GenerateImage#TRUE TRUE}, background color
     *                              of the generated image. All color values
     *                              must be in the format RRGGBB or AARRGGBB
     *                              (to specify the alpha value). The default
     *                              value is '00000000'.
     *                          <li>{@link StyleOptions#TEXT_COLOR TEXT_COLOR}:
     *                              When {@link ContourOptions#ADD_LABELS
     *                              ADD_LABELS} is set to {@link
     *                              ContourOptions#TRUE TRUE}, color for the
     *                              labels. All color values must be in the
     *                              format RRGGBB or AARRGGBB (to specify the
     *                              alpha value). The default value is
     *                              'FF000000'.
     *                          <li>{@link StyleOptions#COLORMAP COLORMAP}:
     *                              Colormap for contours or fill-in regions
     *                              when applicable. All color values must be
     *                              in the format RRGGBB or AARRGGBB (to
     *                              specify the alpha value).
     *                              Supported values:
     *                              <ul>
     *                                  <li>{@link StyleOptions#JET JET}
     *                                  <li>{@link StyleOptions#ACCENT ACCENT}
     *                                  <li>{@link StyleOptions#AFMHOT AFMHOT}
     *                                  <li>{@link StyleOptions#AUTUMN AUTUMN}
     *                                  <li>{@link StyleOptions#BINARY BINARY}
     *                                  <li>{@link StyleOptions#BLUES BLUES}
     *                                  <li>{@link StyleOptions#BONE BONE}
     *                                  <li>{@link StyleOptions#BRBG BRBG}
     *                                  <li>{@link StyleOptions#BRG BRG}
     *                                  <li>{@link StyleOptions#BUGN BUGN}
     *                                  <li>{@link StyleOptions#BUPU BUPU}
     *                                  <li>{@link StyleOptions#BWR BWR}
     *                                  <li>{@link StyleOptions#CMRMAP CMRMAP}
     *                                  <li>{@link StyleOptions#COOL COOL}
     *                                  <li>{@link StyleOptions#COOLWARM
     *                                      COOLWARM}
     *                                  <li>{@link StyleOptions#COPPER COPPER}
     *                                  <li>{@link StyleOptions#CUBEHELIX
     *                                      CUBEHELIX}
     *                                  <li>{@link StyleOptions#DARK2 DARK2}
     *                                  <li>{@link StyleOptions#FLAG FLAG}
     *                                  <li>{@link StyleOptions#GIST_EARTH
     *                                      GIST_EARTH}
     *                                  <li>{@link StyleOptions#GIST_GRAY
     *                                      GIST_GRAY}
     *                                  <li>{@link StyleOptions#GIST_HEAT
     *                                      GIST_HEAT}
     *                                  <li>{@link StyleOptions#GIST_NCAR
     *                                      GIST_NCAR}
     *                                  <li>{@link StyleOptions#GIST_RAINBOW
     *                                      GIST_RAINBOW}
     *                                  <li>{@link StyleOptions#GIST_STERN
     *                                      GIST_STERN}
     *                                  <li>{@link StyleOptions#GIST_YARG
     *                                      GIST_YARG}
     *                                  <li>{@link StyleOptions#GNBU GNBU}
     *                                  <li>{@link StyleOptions#GNUPLOT2
     *                                      GNUPLOT2}
     *                                  <li>{@link StyleOptions#GNUPLOT
     *                                      GNUPLOT}
     *                                  <li>{@link StyleOptions#GRAY GRAY}
     *                                  <li>{@link StyleOptions#GREENS GREENS}
     *                                  <li>{@link StyleOptions#GREYS GREYS}
     *                                  <li>{@link StyleOptions#HOT HOT}
     *                                  <li>{@link StyleOptions#HSV HSV}
     *                                  <li>{@link StyleOptions#INFERNO
     *                                      INFERNO}
     *                                  <li>{@link StyleOptions#MAGMA MAGMA}
     *                                  <li>{@link StyleOptions#NIPY_SPECTRAL
     *                                      NIPY_SPECTRAL}
     *                                  <li>{@link StyleOptions#OCEAN OCEAN}
     *                                  <li>{@link StyleOptions#ORANGES
     *                                      ORANGES}
     *                                  <li>{@link StyleOptions#ORRD ORRD}
     *                                  <li>{@link StyleOptions#PAIRED PAIRED}
     *                                  <li>{@link StyleOptions#PASTEL1
     *                                      PASTEL1}
     *                                  <li>{@link StyleOptions#PASTEL2
     *                                      PASTEL2}
     *                                  <li>{@link StyleOptions#PINK PINK}
     *                                  <li>{@link StyleOptions#PIYG PIYG}
     *                                  <li>{@link StyleOptions#PLASMA PLASMA}
     *                                  <li>{@link StyleOptions#PRGN PRGN}
     *                                  <li>{@link StyleOptions#PRISM PRISM}
     *                                  <li>{@link StyleOptions#PUBU PUBU}
     *                                  <li>{@link StyleOptions#PUBUGN PUBUGN}
     *                                  <li>{@link StyleOptions#PUOR PUOR}
     *                                  <li>{@link StyleOptions#PURD PURD}
     *                                  <li>{@link StyleOptions#PURPLES
     *                                      PURPLES}
     *                                  <li>{@link StyleOptions#RAINBOW
     *                                      RAINBOW}
     *                                  <li>{@link StyleOptions#RDBU RDBU}
     *                                  <li>{@link StyleOptions#RDGY RDGY}
     *                                  <li>{@link StyleOptions#RDPU RDPU}
     *                                  <li>{@link StyleOptions#RDYLBU RDYLBU}
     *                                  <li>{@link StyleOptions#RDYLGN RDYLGN}
     *                                  <li>{@link StyleOptions#REDS REDS}
     *                                  <li>{@link StyleOptions#SEISMIC
     *                                      SEISMIC}
     *                                  <li>{@link StyleOptions#SET1 SET1}
     *                                  <li>{@link StyleOptions#SET2 SET2}
     *                                  <li>{@link StyleOptions#SET3 SET3}
     *                                  <li>{@link StyleOptions#SPECTRAL
     *                                      SPECTRAL}
     *                                  <li>{@link StyleOptions#SPRING SPRING}
     *                                  <li>{@link StyleOptions#SUMMER SUMMER}
     *                                  <li>{@link StyleOptions#TERRAIN
     *                                      TERRAIN}
     *                                  <li>{@link StyleOptions#VIRIDIS
     *                                      VIRIDIS}
     *                                  <li>{@link StyleOptions#WINTER WINTER}
     *                                  <li>{@link StyleOptions#WISTIA WISTIA}
     *                                  <li>{@link StyleOptions#YLGN YLGN}
     *                                  <li>{@link StyleOptions#YLGNBU YLGNBU}
     *                                  <li>{@link StyleOptions#YLORBR YLORBR}
     *                                  <li>{@link StyleOptions#YLORRD YLORRD}
     *                              </ul>
     *                              The default value is {@link
     *                              StyleOptions#JET JET}.
     *                      </ul>
     * @param solveOptions  Solver specific parameters.
     *                      <ul>
     *                          <li>{@link
     *                              SolveOptions#REMOVE_PREVIOUS_RESTRICTIONS
     *                              REMOVE_PREVIOUS_RESTRICTIONS}: Ignore the
     *                              restrictions applied to the graph during
     *                              the creation stage and only use the
     *                              restrictions specified in this request if
     *                              set to {@link SolveOptions#TRUE TRUE}.
     *                              Supported values:
     *                              <ul>
     *                                  <li>{@link SolveOptions#TRUE TRUE}
     *                                  <li>{@link SolveOptions#FALSE FALSE}
     *                              </ul>
     *                              The default value is {@link
     *                              SolveOptions#FALSE FALSE}.
     *                          <li>{@link
     *                              SolveOptions#RESTRICTION_THRESHOLD_VALUE
     *                              RESTRICTION_THRESHOLD_VALUE}: Value-based
     *                              restriction comparison. Any node or edge
     *                              with a 'RESTRICTIONS_VALUECOMPARED' value
     *                              greater than the {@link
     *                              SolveOptions#RESTRICTION_THRESHOLD_VALUE
     *                              RESTRICTION_THRESHOLD_VALUE} will not be
     *                              included in the solution.
     *                          <li>{@link SolveOptions#UNIFORM_WEIGHTS
     *                              UNIFORM_WEIGHTS}: When specified, assigns
     *                              the given value to all the edges in the
     *                              graph. Note that weights provided in {@code
     *                              weightsOnEdges} will override this value.
     *                      </ul>
     *                      The default value is an empty {@link Map}.
     * @param contourOptions  Solver specific parameters.
     *                        <ul>
     *                            <li>{@link ContourOptions#PROJECTION
     *                                PROJECTION}: Spatial Reference System
     *                                (i.e. EPSG Code).
     *                                Supported values:
     *                                <ul>
     *                                    <li>{@link ContourOptions#_3857
     *                                        _3857}
     *                                    <li>{@link ContourOptions#_102100
     *                                        _102100}
     *                                    <li>{@link ContourOptions#_900913
     *                                        _900913}
     *                                    <li>{@link ContourOptions#EPSG_4326
     *                                        EPSG_4326}
     *                                    <li>{@link
     *                                        ContourOptions#PLATE_CARREE
     *                                        PLATE_CARREE}
     *                                    <li>{@link ContourOptions#EPSG_900913
     *                                        EPSG_900913}
     *                                    <li>{@link ContourOptions#EPSG_102100
     *                                        EPSG_102100}
     *                                    <li>{@link ContourOptions#EPSG_3857
     *                                        EPSG_3857}
     *                                    <li>{@link
     *                                        ContourOptions#WEB_MERCATOR
     *                                        WEB_MERCATOR}
     *                                </ul>
     *                                The default value is {@link
     *                                ContourOptions#PLATE_CARREE
     *                                PLATE_CARREE}.
     *                            <li>{@link ContourOptions#WIDTH WIDTH}: When
     *                                {@code generateImage} is set to {@link
     *                                GenerateImage#TRUE TRUE}, width of the
     *                                generated image. The default value is
     *                                '512'.
     *                            <li>{@link ContourOptions#HEIGHT HEIGHT}:
     *                                When {@code generateImage} is set to
     *                                {@link GenerateImage#TRUE TRUE}, height
     *                                of the generated image. If the default
     *                                value is used, the {@link
     *                                ContourOptions#HEIGHT HEIGHT} is set to
     *                                the value resulting from multiplying the
     *                                aspect ratio by the {@link
     *                                ContourOptions#WIDTH WIDTH}. The default
     *                                value is '-1'.
     *                            <li>{@link ContourOptions#SEARCH_RADIUS
     *                                SEARCH_RADIUS}: When interpolating the
     *                                graph solution to generate the isochrone,
     *                                neighborhood of influence of sample data
     *                                (in percent of the image/grid). The
     *                                default value is '20'.
     *                            <li>{@link ContourOptions#GRID_SIZE
     *                                GRID_SIZE}: When interpolating the graph
     *                                solution to generate the isochrone,
     *                                number of subdivisions along the x axis
     *                                when building the grid (the y is computed
     *                                using the aspect ratio of the output
     *                                image). The default value is '100'.
     *                            <li>{@link ContourOptions#COLOR_ISOLINES
     *                                COLOR_ISOLINES}: Color each isoline
     *                                according to the colormap; otherwise, use
     *                                the foreground color.
     *                                Supported values:
     *                                <ul>
     *                                    <li>{@link ContourOptions#TRUE TRUE}
     *                                    <li>{@link ContourOptions#FALSE
     *                                        FALSE}
     *                                </ul>
     *                                The default value is {@link
     *                                ContourOptions#TRUE TRUE}.
     *                            <li>{@link ContourOptions#ADD_LABELS
     *                                ADD_LABELS}: If set to {@link
     *                                ContourOptions#TRUE TRUE}, add labels to
     *                                the isolines.
     *                                Supported values:
     *                                <ul>
     *                                    <li>{@link ContourOptions#TRUE TRUE}
     *                                    <li>{@link ContourOptions#FALSE
     *                                        FALSE}
     *                                </ul>
     *                                The default value is {@link
     *                                ContourOptions#FALSE FALSE}.
     *                            <li>{@link ContourOptions#LABELS_FONT_SIZE
     *                                LABELS_FONT_SIZE}: When {@link
     *                                ContourOptions#ADD_LABELS ADD_LABELS} is
     *                                set to {@link ContourOptions#TRUE TRUE},
     *                                size of the font (in pixels) to use for
     *                                labels. The default value is '12'.
     *                            <li>{@link ContourOptions#LABELS_FONT_FAMILY
     *                                LABELS_FONT_FAMILY}: When {@link
     *                                ContourOptions#ADD_LABELS ADD_LABELS} is
     *                                set to {@link ContourOptions#TRUE TRUE},
     *                                font name to be used when adding labels.
     *                                The default value is 'arial'.
     *                            <li>{@link
     *                                ContourOptions#LABELS_SEARCH_WINDOW
     *                                LABELS_SEARCH_WINDOW}: When {@link
     *                                ContourOptions#ADD_LABELS ADD_LABELS} is
     *                                set to {@link ContourOptions#TRUE TRUE},
     *                                a search window is used to rate the local
     *                                quality of each isoline. Smooth,
     *                                continuous, long stretches with
     *                                relatively flat angles are favored. The
     *                                provided value is multiplied by the
     *                                {@link ContourOptions#LABELS_FONT_SIZE
     *                                LABELS_FONT_SIZE} to calculate the final
     *                                window size. The default value is '4'.
     *                            <li>{@link
     *                                ContourOptions#LABELS_INTRALEVEL_SEPARATION
     *                                LABELS_INTRALEVEL_SEPARATION}: When
     *                                {@link ContourOptions#ADD_LABELS
     *                                ADD_LABELS} is set to {@link
     *                                ContourOptions#TRUE TRUE}, this value
     *                                determines the  distance (in multiples of
     *                                the {@link
     *                                ContourOptions#LABELS_FONT_SIZE
     *                                LABELS_FONT_SIZE}) to use when separating
     *                                labels of different values. The default
     *                                value is '4'.
     *                            <li>{@link
     *                                ContourOptions#LABELS_INTERLEVEL_SEPARATION
     *                                LABELS_INTERLEVEL_SEPARATION}: When
     *                                {@link ContourOptions#ADD_LABELS
     *                                ADD_LABELS} is set to {@link
     *                                ContourOptions#TRUE TRUE}, this value
     *                                determines the distance (in percent of
     *                                the total window size) to use when
     *                                separating labels of the same value. The
     *                                default value is '20'.
     *                            <li>{@link ContourOptions#LABELS_MAX_ANGLE
     *                                LABELS_MAX_ANGLE}: When {@link
     *                                ContourOptions#ADD_LABELS ADD_LABELS} is
     *                                set to {@link ContourOptions#TRUE TRUE},
     *                                maximum angle (in degrees) from the
     *                                vertical to use when adding labels. The
     *                                default value is '60'.
     *                        </ul>
     *                        The default value is an empty {@link Map}.
     * @param options  Additional parameters.
     *                 <ul>
     *                     <li>{@link Options#SOLVE_TABLE SOLVE_TABLE}: Name of
     *                         the table to host intermediate solve results, in
     *                         [schema_name.]table_name format, using standard
     *                         <a
     *                         href="../../../../../../concepts/tables/#table-name-resolution"
     *                         target="_top">name resolution rules</a> and
     *                         meeting <a
     *                         href="../../../../../../concepts/tables/#table-naming-criteria"
     *                         target="_top">table naming criteria</a>.  This
     *                         table will contain the position and cost for
     *                         each vertex in the graph. If the default value
     *                         is used, a temporary table is created and
     *                         deleted once the solution is calculated. The
     *                         default value is ''.
     *                     <li>{@link Options#IS_REPLICATED IS_REPLICATED}: If
     *                         set to {@link Options#TRUE TRUE}, replicate the
     *                         {@link Options#SOLVE_TABLE SOLVE_TABLE}.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}
     *                             <li>{@link Options#FALSE FALSE}
     *                         </ul>
     *                         The default value is {@link Options#TRUE TRUE}.
     *                     <li>{@link Options#DATA_MIN_X DATA_MIN_X}: Lower
     *                         bound for the x values. If not provided, it will
     *                         be computed from the bounds of the input data.
     *                     <li>{@link Options#DATA_MAX_X DATA_MAX_X}: Upper
     *                         bound for the x values. If not provided, it will
     *                         be computed from the bounds of the input data.
     *                     <li>{@link Options#DATA_MIN_Y DATA_MIN_Y}: Lower
     *                         bound for the y values. If not provided, it will
     *                         be computed from the bounds of the input data.
     *                     <li>{@link Options#DATA_MAX_Y DATA_MAX_Y}: Upper
     *                         bound for the y values. If not provided, it will
     *                         be computed from the bounds of the input data.
     *                     <li>{@link Options#CONCAVITY_LEVEL CONCAVITY_LEVEL}:
     *                         Factor to qualify the concavity of the isochrone
     *                         curves. The lower the value, the more convex
     *                         (with '0' being completely convex and '1' being
     *                         the most concave). The default value is '0.5'.
     *                         The minimum allowed value is '0'. The maximum
     *                         allowed value is '1'.
     *                     <li>{@link Options#USE_PRIORITY_QUEUE_SOLVERS
     *                         USE_PRIORITY_QUEUE_SOLVERS}: sets the solver
     *                         methods explicitly if true.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#TRUE TRUE}: uses the
     *                                 solvers scheduled for 'shortest_path'
     *                                 and 'inverse_shortest_path' based on
     *                                 solve_direction
     *                             <li>{@link Options#FALSE FALSE}: uses the
     *                                 solvers 'priority_queue' and
     *                                 'inverse_priority_queue' based on
     *                                 solve_direction
     *                         </ul>
     *                         The default value is {@link Options#FALSE
     *                         FALSE}.
     *                     <li>{@link Options#SOLVE_DIRECTION SOLVE_DIRECTION}:
     *                         Specify whether we are going to the source node,
     *                         or starting from it.
     *                         Supported values:
     *                         <ul>
     *                             <li>{@link Options#FROM_SOURCE FROM_SOURCE}:
     *                                 Shortest path to get to the source
     *                                 (inverse Dijkstra)
     *                             <li>{@link Options#TO_SOURCE TO_SOURCE}:
     *                                 Shortest path to source (Dijkstra)
     *                         </ul>
     *                         The default value is {@link Options#FROM_SOURCE
     *                         FROM_SOURCE}.
     *                 </ul>
     *                 The default value is an empty {@link Map}.
     */
    public VisualizeIsochroneRequest(String graphName, String sourceNode, double maxSolutionRadius, List<String> weightsOnEdges, List<String> restrictions, int numLevels, boolean generateImage, String levelsTable, Map<String, String> styleOptions, Map<String, String> solveOptions, Map<String, String> contourOptions, Map<String, String> options) {
        this.graphName = (graphName == null) ? "" : graphName;
        this.sourceNode = (sourceNode == null) ? "" : sourceNode;
        this.maxSolutionRadius = maxSolutionRadius;
        this.weightsOnEdges = (weightsOnEdges == null) ? new ArrayList<String>() : weightsOnEdges;
        this.restrictions = (restrictions == null) ? new ArrayList<String>() : restrictions;
        this.numLevels = numLevels;
        this.generateImage = generateImage;
        this.levelsTable = (levelsTable == null) ? "" : levelsTable;
        this.styleOptions = (styleOptions == null) ? new LinkedHashMap<String, String>() : styleOptions;
        this.solveOptions = (solveOptions == null) ? new LinkedHashMap<String, String>() : solveOptions;
        this.contourOptions = (contourOptions == null) ? new LinkedHashMap<String, String>() : contourOptions;
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
    }

    /**
     * Name of the graph on which the isochrone is to be computed.
     *
     * @return The current value of {@code graphName}.
     */
    public String getGraphName() {
        return graphName;
    }

    /**
     * Name of the graph on which the isochrone is to be computed.
     *
     * @param graphName  The new value for {@code graphName}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public VisualizeIsochroneRequest setGraphName(String graphName) {
        this.graphName = (graphName == null) ? "" : graphName;
        return this;
    }

    /**
     * Starting vertex on the underlying graph from/to which the isochrones are
     * created.
     *
     * @return The current value of {@code sourceNode}.
     */
    public String getSourceNode() {
        return sourceNode;
    }

    /**
     * Starting vertex on the underlying graph from/to which the isochrones are
     * created.
     *
     * @param sourceNode  The new value for {@code sourceNode}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public VisualizeIsochroneRequest setSourceNode(String sourceNode) {
        this.sourceNode = (sourceNode == null) ? "" : sourceNode;
        return this;
    }

    /**
     * Extent of the search radius around {@link #getSourceNode() sourceNode}.
     * Set to '-1.0' for unrestricted search radius. The default value is -1.0.
     *
     * @return The current value of {@code maxSolutionRadius}.
     */
    public double getMaxSolutionRadius() {
        return maxSolutionRadius;
    }

    /**
     * Extent of the search radius around {@link #getSourceNode() sourceNode}.
     * Set to '-1.0' for unrestricted search radius. The default value is -1.0.
     *
     * @param maxSolutionRadius  The new value for {@code maxSolutionRadius}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public VisualizeIsochroneRequest setMaxSolutionRadius(double maxSolutionRadius) {
        this.maxSolutionRadius = maxSolutionRadius;
        return this;
    }

    /**
     * Additional weights to apply to the edges of an existing graph. Weights
     * must be specified using <a
     * href="../../../../../../graph_solver/network_graph_solver/#identifiers"
     * target="_top">identifiers</a>; identifiers are grouped as <a
     * href="../../../../../../graph_solver/network_graph_solver/#id-combos"
     * target="_top">combinations</a>. Identifiers can be used with existing
     * column names, e.g., 'table.column AS WEIGHTS_EDGE_ID', or expressions,
     * e.g., 'ST_LENGTH(wkt) AS WEIGHTS_VALUESPECIFIED'. Any provided weights
     * will be added (in the case of 'WEIGHTS_VALUESPECIFIED') to or multiplied
     * with (in the case of 'WEIGHTS_FACTORSPECIFIED') the existing weight(s).
     * The default value is an empty {@link List}.
     *
     * @return The current value of {@code weightsOnEdges}.
     */
    public List<String> getWeightsOnEdges() {
        return weightsOnEdges;
    }

    /**
     * Additional weights to apply to the edges of an existing graph. Weights
     * must be specified using <a
     * href="../../../../../../graph_solver/network_graph_solver/#identifiers"
     * target="_top">identifiers</a>; identifiers are grouped as <a
     * href="../../../../../../graph_solver/network_graph_solver/#id-combos"
     * target="_top">combinations</a>. Identifiers can be used with existing
     * column names, e.g., 'table.column AS WEIGHTS_EDGE_ID', or expressions,
     * e.g., 'ST_LENGTH(wkt) AS WEIGHTS_VALUESPECIFIED'. Any provided weights
     * will be added (in the case of 'WEIGHTS_VALUESPECIFIED') to or multiplied
     * with (in the case of 'WEIGHTS_FACTORSPECIFIED') the existing weight(s).
     * The default value is an empty {@link List}.
     *
     * @param weightsOnEdges  The new value for {@code weightsOnEdges}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public VisualizeIsochroneRequest setWeightsOnEdges(List<String> weightsOnEdges) {
        this.weightsOnEdges = (weightsOnEdges == null) ? new ArrayList<String>() : weightsOnEdges;
        return this;
    }

    /**
     * Additional restrictions to apply to the nodes/edges of an existing
     * graph. Restrictions must be specified using <a
     * href="../../../../../../graph_solver/network_graph_solver/#identifiers"
     * target="_top">identifiers</a>; identifiers are grouped as <a
     * href="../../../../../../graph_solver/network_graph_solver/#id-combos"
     * target="_top">combinations</a>. Identifiers can be used with existing
     * column names, e.g., 'table.column AS RESTRICTIONS_EDGE_ID', or
     * expressions, e.g., 'column/2 AS RESTRICTIONS_VALUECOMPARED'. If {@link
     * SolveOptions#REMOVE_PREVIOUS_RESTRICTIONS REMOVE_PREVIOUS_RESTRICTIONS}
     * is set to {@link SolveOptions#TRUE TRUE}, any provided restrictions will
     * replace the existing restrictions. If {@link
     * SolveOptions#REMOVE_PREVIOUS_RESTRICTIONS REMOVE_PREVIOUS_RESTRICTIONS}
     * is set to {@link SolveOptions#FALSE FALSE}, any provided restrictions
     * will be added (in the case of 'RESTRICTIONS_VALUECOMPARED') to or
     * replaced (in the case of 'RESTRICTIONS_ONOFFCOMPARED'). The default
     * value is an empty {@link List}.
     *
     * @return The current value of {@code restrictions}.
     */
    public List<String> getRestrictions() {
        return restrictions;
    }

    /**
     * Additional restrictions to apply to the nodes/edges of an existing
     * graph. Restrictions must be specified using <a
     * href="../../../../../../graph_solver/network_graph_solver/#identifiers"
     * target="_top">identifiers</a>; identifiers are grouped as <a
     * href="../../../../../../graph_solver/network_graph_solver/#id-combos"
     * target="_top">combinations</a>. Identifiers can be used with existing
     * column names, e.g., 'table.column AS RESTRICTIONS_EDGE_ID', or
     * expressions, e.g., 'column/2 AS RESTRICTIONS_VALUECOMPARED'. If {@link
     * SolveOptions#REMOVE_PREVIOUS_RESTRICTIONS REMOVE_PREVIOUS_RESTRICTIONS}
     * is set to {@link SolveOptions#TRUE TRUE}, any provided restrictions will
     * replace the existing restrictions. If {@link
     * SolveOptions#REMOVE_PREVIOUS_RESTRICTIONS REMOVE_PREVIOUS_RESTRICTIONS}
     * is set to {@link SolveOptions#FALSE FALSE}, any provided restrictions
     * will be added (in the case of 'RESTRICTIONS_VALUECOMPARED') to or
     * replaced (in the case of 'RESTRICTIONS_ONOFFCOMPARED'). The default
     * value is an empty {@link List}.
     *
     * @param restrictions  The new value for {@code restrictions}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public VisualizeIsochroneRequest setRestrictions(List<String> restrictions) {
        this.restrictions = (restrictions == null) ? new ArrayList<String>() : restrictions;
        return this;
    }

    /**
     * Number of equally-separated isochrones to compute. The default value is
     * 1.
     *
     * @return The current value of {@code numLevels}.
     */
    public int getNumLevels() {
        return numLevels;
    }

    /**
     * Number of equally-separated isochrones to compute. The default value is
     * 1.
     *
     * @param numLevels  The new value for {@code numLevels}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public VisualizeIsochroneRequest setNumLevels(int numLevels) {
        this.numLevels = numLevels;
        return this;
    }

    /**
     * If set to {@link GenerateImage#TRUE TRUE}, generates a PNG image of the
     * isochrones in the response.
     * Supported values:
     * <ul>
     *     <li>{@link GenerateImage#TRUE TRUE}
     *     <li>{@link GenerateImage#FALSE FALSE}
     * </ul>
     * The default value is {@link GenerateImage#TRUE TRUE}.
     *
     * @return The current value of {@code generateImage}.
     */
    public boolean getGenerateImage() {
        return generateImage;
    }

    /**
     * If set to {@link GenerateImage#TRUE TRUE}, generates a PNG image of the
     * isochrones in the response.
     * Supported values:
     * <ul>
     *     <li>{@link GenerateImage#TRUE TRUE}
     *     <li>{@link GenerateImage#FALSE FALSE}
     * </ul>
     * The default value is {@link GenerateImage#TRUE TRUE}.
     *
     * @param generateImage  The new value for {@code generateImage}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public VisualizeIsochroneRequest setGenerateImage(boolean generateImage) {
        this.generateImage = generateImage;
        return this;
    }

    /**
     * Name of the table to output the isochrones to, in
     * [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a> and meeting <a
     * href="../../../../../../concepts/tables/#table-naming-criteria"
     * target="_top">table naming criteria</a>.  The table will contain levels
     * and their corresponding WKT geometry. If no value is provided, the table
     * is not generated. The default value is ''.
     *
     * @return The current value of {@code levelsTable}.
     */
    public String getLevelsTable() {
        return levelsTable;
    }

    /**
     * Name of the table to output the isochrones to, in
     * [schema_name.]table_name format, using standard <a
     * href="../../../../../../concepts/tables/#table-name-resolution"
     * target="_top">name resolution rules</a> and meeting <a
     * href="../../../../../../concepts/tables/#table-naming-criteria"
     * target="_top">table naming criteria</a>.  The table will contain levels
     * and their corresponding WKT geometry. If no value is provided, the table
     * is not generated. The default value is ''.
     *
     * @param levelsTable  The new value for {@code levelsTable}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public VisualizeIsochroneRequest setLevelsTable(String levelsTable) {
        this.levelsTable = (levelsTable == null) ? "" : levelsTable;
        return this;
    }

    /**
     * Various style related options of the isochrone image.
     * <ul>
     *     <li>{@link StyleOptions#LINE_SIZE LINE_SIZE}: The width of the
     *         contour lines in pixels. The default value is '3'. The minimum
     *         allowed value is '0'. The maximum allowed value is '20'.
     *     <li>{@link StyleOptions#COLOR COLOR}: Color of generated isolines.
     *         All color values must be in the format RRGGBB or AARRGGBB (to
     *         specify the alpha value). If alpha is specified and flooded
     *         contours are enabled, it will be used for as the transparency of
     *         the latter. The default value is 'FF696969'.
     *     <li>{@link StyleOptions#BG_COLOR BG_COLOR}: When {@link
     *         #getGenerateImage() generateImage} is set to {@link
     *         GenerateImage#TRUE TRUE}, background color of the generated
     *         image. All color values must be in the format RRGGBB or AARRGGBB
     *         (to specify the alpha value). The default value is '00000000'.
     *     <li>{@link StyleOptions#TEXT_COLOR TEXT_COLOR}: When {@link
     *         ContourOptions#ADD_LABELS ADD_LABELS} is set to {@link
     *         ContourOptions#TRUE TRUE}, color for the labels. All color
     *         values must be in the format RRGGBB or AARRGGBB (to specify the
     *         alpha value). The default value is 'FF000000'.
     *     <li>{@link StyleOptions#COLORMAP COLORMAP}: Colormap for contours or
     *         fill-in regions when applicable. All color values must be in the
     *         format RRGGBB or AARRGGBB (to specify the alpha value).
     *         Supported values:
     *         <ul>
     *             <li>{@link StyleOptions#JET JET}
     *             <li>{@link StyleOptions#ACCENT ACCENT}
     *             <li>{@link StyleOptions#AFMHOT AFMHOT}
     *             <li>{@link StyleOptions#AUTUMN AUTUMN}
     *             <li>{@link StyleOptions#BINARY BINARY}
     *             <li>{@link StyleOptions#BLUES BLUES}
     *             <li>{@link StyleOptions#BONE BONE}
     *             <li>{@link StyleOptions#BRBG BRBG}
     *             <li>{@link StyleOptions#BRG BRG}
     *             <li>{@link StyleOptions#BUGN BUGN}
     *             <li>{@link StyleOptions#BUPU BUPU}
     *             <li>{@link StyleOptions#BWR BWR}
     *             <li>{@link StyleOptions#CMRMAP CMRMAP}
     *             <li>{@link StyleOptions#COOL COOL}
     *             <li>{@link StyleOptions#COOLWARM COOLWARM}
     *             <li>{@link StyleOptions#COPPER COPPER}
     *             <li>{@link StyleOptions#CUBEHELIX CUBEHELIX}
     *             <li>{@link StyleOptions#DARK2 DARK2}
     *             <li>{@link StyleOptions#FLAG FLAG}
     *             <li>{@link StyleOptions#GIST_EARTH GIST_EARTH}
     *             <li>{@link StyleOptions#GIST_GRAY GIST_GRAY}
     *             <li>{@link StyleOptions#GIST_HEAT GIST_HEAT}
     *             <li>{@link StyleOptions#GIST_NCAR GIST_NCAR}
     *             <li>{@link StyleOptions#GIST_RAINBOW GIST_RAINBOW}
     *             <li>{@link StyleOptions#GIST_STERN GIST_STERN}
     *             <li>{@link StyleOptions#GIST_YARG GIST_YARG}
     *             <li>{@link StyleOptions#GNBU GNBU}
     *             <li>{@link StyleOptions#GNUPLOT2 GNUPLOT2}
     *             <li>{@link StyleOptions#GNUPLOT GNUPLOT}
     *             <li>{@link StyleOptions#GRAY GRAY}
     *             <li>{@link StyleOptions#GREENS GREENS}
     *             <li>{@link StyleOptions#GREYS GREYS}
     *             <li>{@link StyleOptions#HOT HOT}
     *             <li>{@link StyleOptions#HSV HSV}
     *             <li>{@link StyleOptions#INFERNO INFERNO}
     *             <li>{@link StyleOptions#MAGMA MAGMA}
     *             <li>{@link StyleOptions#NIPY_SPECTRAL NIPY_SPECTRAL}
     *             <li>{@link StyleOptions#OCEAN OCEAN}
     *             <li>{@link StyleOptions#ORANGES ORANGES}
     *             <li>{@link StyleOptions#ORRD ORRD}
     *             <li>{@link StyleOptions#PAIRED PAIRED}
     *             <li>{@link StyleOptions#PASTEL1 PASTEL1}
     *             <li>{@link StyleOptions#PASTEL2 PASTEL2}
     *             <li>{@link StyleOptions#PINK PINK}
     *             <li>{@link StyleOptions#PIYG PIYG}
     *             <li>{@link StyleOptions#PLASMA PLASMA}
     *             <li>{@link StyleOptions#PRGN PRGN}
     *             <li>{@link StyleOptions#PRISM PRISM}
     *             <li>{@link StyleOptions#PUBU PUBU}
     *             <li>{@link StyleOptions#PUBUGN PUBUGN}
     *             <li>{@link StyleOptions#PUOR PUOR}
     *             <li>{@link StyleOptions#PURD PURD}
     *             <li>{@link StyleOptions#PURPLES PURPLES}
     *             <li>{@link StyleOptions#RAINBOW RAINBOW}
     *             <li>{@link StyleOptions#RDBU RDBU}
     *             <li>{@link StyleOptions#RDGY RDGY}
     *             <li>{@link StyleOptions#RDPU RDPU}
     *             <li>{@link StyleOptions#RDYLBU RDYLBU}
     *             <li>{@link StyleOptions#RDYLGN RDYLGN}
     *             <li>{@link StyleOptions#REDS REDS}
     *             <li>{@link StyleOptions#SEISMIC SEISMIC}
     *             <li>{@link StyleOptions#SET1 SET1}
     *             <li>{@link StyleOptions#SET2 SET2}
     *             <li>{@link StyleOptions#SET3 SET3}
     *             <li>{@link StyleOptions#SPECTRAL SPECTRAL}
     *             <li>{@link StyleOptions#SPRING SPRING}
     *             <li>{@link StyleOptions#SUMMER SUMMER}
     *             <li>{@link StyleOptions#TERRAIN TERRAIN}
     *             <li>{@link StyleOptions#VIRIDIS VIRIDIS}
     *             <li>{@link StyleOptions#WINTER WINTER}
     *             <li>{@link StyleOptions#WISTIA WISTIA}
     *             <li>{@link StyleOptions#YLGN YLGN}
     *             <li>{@link StyleOptions#YLGNBU YLGNBU}
     *             <li>{@link StyleOptions#YLORBR YLORBR}
     *             <li>{@link StyleOptions#YLORRD YLORRD}
     *         </ul>
     *         The default value is {@link StyleOptions#JET JET}.
     * </ul>
     *
     * @return The current value of {@code styleOptions}.
     */
    public Map<String, String> getStyleOptions() {
        return styleOptions;
    }

    /**
     * Various style related options of the isochrone image.
     * <ul>
     *     <li>{@link StyleOptions#LINE_SIZE LINE_SIZE}: The width of the
     *         contour lines in pixels. The default value is '3'. The minimum
     *         allowed value is '0'. The maximum allowed value is '20'.
     *     <li>{@link StyleOptions#COLOR COLOR}: Color of generated isolines.
     *         All color values must be in the format RRGGBB or AARRGGBB (to
     *         specify the alpha value). If alpha is specified and flooded
     *         contours are enabled, it will be used for as the transparency of
     *         the latter. The default value is 'FF696969'.
     *     <li>{@link StyleOptions#BG_COLOR BG_COLOR}: When {@link
     *         #getGenerateImage() generateImage} is set to {@link
     *         GenerateImage#TRUE TRUE}, background color of the generated
     *         image. All color values must be in the format RRGGBB or AARRGGBB
     *         (to specify the alpha value). The default value is '00000000'.
     *     <li>{@link StyleOptions#TEXT_COLOR TEXT_COLOR}: When {@link
     *         ContourOptions#ADD_LABELS ADD_LABELS} is set to {@link
     *         ContourOptions#TRUE TRUE}, color for the labels. All color
     *         values must be in the format RRGGBB or AARRGGBB (to specify the
     *         alpha value). The default value is 'FF000000'.
     *     <li>{@link StyleOptions#COLORMAP COLORMAP}: Colormap for contours or
     *         fill-in regions when applicable. All color values must be in the
     *         format RRGGBB or AARRGGBB (to specify the alpha value).
     *         Supported values:
     *         <ul>
     *             <li>{@link StyleOptions#JET JET}
     *             <li>{@link StyleOptions#ACCENT ACCENT}
     *             <li>{@link StyleOptions#AFMHOT AFMHOT}
     *             <li>{@link StyleOptions#AUTUMN AUTUMN}
     *             <li>{@link StyleOptions#BINARY BINARY}
     *             <li>{@link StyleOptions#BLUES BLUES}
     *             <li>{@link StyleOptions#BONE BONE}
     *             <li>{@link StyleOptions#BRBG BRBG}
     *             <li>{@link StyleOptions#BRG BRG}
     *             <li>{@link StyleOptions#BUGN BUGN}
     *             <li>{@link StyleOptions#BUPU BUPU}
     *             <li>{@link StyleOptions#BWR BWR}
     *             <li>{@link StyleOptions#CMRMAP CMRMAP}
     *             <li>{@link StyleOptions#COOL COOL}
     *             <li>{@link StyleOptions#COOLWARM COOLWARM}
     *             <li>{@link StyleOptions#COPPER COPPER}
     *             <li>{@link StyleOptions#CUBEHELIX CUBEHELIX}
     *             <li>{@link StyleOptions#DARK2 DARK2}
     *             <li>{@link StyleOptions#FLAG FLAG}
     *             <li>{@link StyleOptions#GIST_EARTH GIST_EARTH}
     *             <li>{@link StyleOptions#GIST_GRAY GIST_GRAY}
     *             <li>{@link StyleOptions#GIST_HEAT GIST_HEAT}
     *             <li>{@link StyleOptions#GIST_NCAR GIST_NCAR}
     *             <li>{@link StyleOptions#GIST_RAINBOW GIST_RAINBOW}
     *             <li>{@link StyleOptions#GIST_STERN GIST_STERN}
     *             <li>{@link StyleOptions#GIST_YARG GIST_YARG}
     *             <li>{@link StyleOptions#GNBU GNBU}
     *             <li>{@link StyleOptions#GNUPLOT2 GNUPLOT2}
     *             <li>{@link StyleOptions#GNUPLOT GNUPLOT}
     *             <li>{@link StyleOptions#GRAY GRAY}
     *             <li>{@link StyleOptions#GREENS GREENS}
     *             <li>{@link StyleOptions#GREYS GREYS}
     *             <li>{@link StyleOptions#HOT HOT}
     *             <li>{@link StyleOptions#HSV HSV}
     *             <li>{@link StyleOptions#INFERNO INFERNO}
     *             <li>{@link StyleOptions#MAGMA MAGMA}
     *             <li>{@link StyleOptions#NIPY_SPECTRAL NIPY_SPECTRAL}
     *             <li>{@link StyleOptions#OCEAN OCEAN}
     *             <li>{@link StyleOptions#ORANGES ORANGES}
     *             <li>{@link StyleOptions#ORRD ORRD}
     *             <li>{@link StyleOptions#PAIRED PAIRED}
     *             <li>{@link StyleOptions#PASTEL1 PASTEL1}
     *             <li>{@link StyleOptions#PASTEL2 PASTEL2}
     *             <li>{@link StyleOptions#PINK PINK}
     *             <li>{@link StyleOptions#PIYG PIYG}
     *             <li>{@link StyleOptions#PLASMA PLASMA}
     *             <li>{@link StyleOptions#PRGN PRGN}
     *             <li>{@link StyleOptions#PRISM PRISM}
     *             <li>{@link StyleOptions#PUBU PUBU}
     *             <li>{@link StyleOptions#PUBUGN PUBUGN}
     *             <li>{@link StyleOptions#PUOR PUOR}
     *             <li>{@link StyleOptions#PURD PURD}
     *             <li>{@link StyleOptions#PURPLES PURPLES}
     *             <li>{@link StyleOptions#RAINBOW RAINBOW}
     *             <li>{@link StyleOptions#RDBU RDBU}
     *             <li>{@link StyleOptions#RDGY RDGY}
     *             <li>{@link StyleOptions#RDPU RDPU}
     *             <li>{@link StyleOptions#RDYLBU RDYLBU}
     *             <li>{@link StyleOptions#RDYLGN RDYLGN}
     *             <li>{@link StyleOptions#REDS REDS}
     *             <li>{@link StyleOptions#SEISMIC SEISMIC}
     *             <li>{@link StyleOptions#SET1 SET1}
     *             <li>{@link StyleOptions#SET2 SET2}
     *             <li>{@link StyleOptions#SET3 SET3}
     *             <li>{@link StyleOptions#SPECTRAL SPECTRAL}
     *             <li>{@link StyleOptions#SPRING SPRING}
     *             <li>{@link StyleOptions#SUMMER SUMMER}
     *             <li>{@link StyleOptions#TERRAIN TERRAIN}
     *             <li>{@link StyleOptions#VIRIDIS VIRIDIS}
     *             <li>{@link StyleOptions#WINTER WINTER}
     *             <li>{@link StyleOptions#WISTIA WISTIA}
     *             <li>{@link StyleOptions#YLGN YLGN}
     *             <li>{@link StyleOptions#YLGNBU YLGNBU}
     *             <li>{@link StyleOptions#YLORBR YLORBR}
     *             <li>{@link StyleOptions#YLORRD YLORRD}
     *         </ul>
     *         The default value is {@link StyleOptions#JET JET}.
     * </ul>
     *
     * @param styleOptions  The new value for {@code styleOptions}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public VisualizeIsochroneRequest setStyleOptions(Map<String, String> styleOptions) {
        this.styleOptions = (styleOptions == null) ? new LinkedHashMap<String, String>() : styleOptions;
        return this;
    }

    /**
     * Solver specific parameters.
     * <ul>
     *     <li>{@link SolveOptions#REMOVE_PREVIOUS_RESTRICTIONS
     *         REMOVE_PREVIOUS_RESTRICTIONS}: Ignore the restrictions applied
     *         to the graph during the creation stage and only use the
     *         restrictions specified in this request if set to {@link
     *         SolveOptions#TRUE TRUE}.
     *         Supported values:
     *         <ul>
     *             <li>{@link SolveOptions#TRUE TRUE}
     *             <li>{@link SolveOptions#FALSE FALSE}
     *         </ul>
     *         The default value is {@link SolveOptions#FALSE FALSE}.
     *     <li>{@link SolveOptions#RESTRICTION_THRESHOLD_VALUE
     *         RESTRICTION_THRESHOLD_VALUE}: Value-based restriction
     *         comparison. Any node or edge with a 'RESTRICTIONS_VALUECOMPARED'
     *         value greater than the {@link
     *         SolveOptions#RESTRICTION_THRESHOLD_VALUE
     *         RESTRICTION_THRESHOLD_VALUE} will not be included in the
     *         solution.
     *     <li>{@link SolveOptions#UNIFORM_WEIGHTS UNIFORM_WEIGHTS}: When
     *         specified, assigns the given value to all the edges in the
     *         graph. Note that weights provided in {@link #getWeightsOnEdges()
     *         weightsOnEdges} will override this value.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code solveOptions}.
     */
    public Map<String, String> getSolveOptions() {
        return solveOptions;
    }

    /**
     * Solver specific parameters.
     * <ul>
     *     <li>{@link SolveOptions#REMOVE_PREVIOUS_RESTRICTIONS
     *         REMOVE_PREVIOUS_RESTRICTIONS}: Ignore the restrictions applied
     *         to the graph during the creation stage and only use the
     *         restrictions specified in this request if set to {@link
     *         SolveOptions#TRUE TRUE}.
     *         Supported values:
     *         <ul>
     *             <li>{@link SolveOptions#TRUE TRUE}
     *             <li>{@link SolveOptions#FALSE FALSE}
     *         </ul>
     *         The default value is {@link SolveOptions#FALSE FALSE}.
     *     <li>{@link SolveOptions#RESTRICTION_THRESHOLD_VALUE
     *         RESTRICTION_THRESHOLD_VALUE}: Value-based restriction
     *         comparison. Any node or edge with a 'RESTRICTIONS_VALUECOMPARED'
     *         value greater than the {@link
     *         SolveOptions#RESTRICTION_THRESHOLD_VALUE
     *         RESTRICTION_THRESHOLD_VALUE} will not be included in the
     *         solution.
     *     <li>{@link SolveOptions#UNIFORM_WEIGHTS UNIFORM_WEIGHTS}: When
     *         specified, assigns the given value to all the edges in the
     *         graph. Note that weights provided in {@link #getWeightsOnEdges()
     *         weightsOnEdges} will override this value.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param solveOptions  The new value for {@code solveOptions}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public VisualizeIsochroneRequest setSolveOptions(Map<String, String> solveOptions) {
        this.solveOptions = (solveOptions == null) ? new LinkedHashMap<String, String>() : solveOptions;
        return this;
    }

    /**
     * Solver specific parameters.
     * <ul>
     *     <li>{@link ContourOptions#PROJECTION PROJECTION}: Spatial Reference
     *         System (i.e. EPSG Code).
     *         Supported values:
     *         <ul>
     *             <li>{@link ContourOptions#_3857 _3857}
     *             <li>{@link ContourOptions#_102100 _102100}
     *             <li>{@link ContourOptions#_900913 _900913}
     *             <li>{@link ContourOptions#EPSG_4326 EPSG_4326}
     *             <li>{@link ContourOptions#PLATE_CARREE PLATE_CARREE}
     *             <li>{@link ContourOptions#EPSG_900913 EPSG_900913}
     *             <li>{@link ContourOptions#EPSG_102100 EPSG_102100}
     *             <li>{@link ContourOptions#EPSG_3857 EPSG_3857}
     *             <li>{@link ContourOptions#WEB_MERCATOR WEB_MERCATOR}
     *         </ul>
     *         The default value is {@link ContourOptions#PLATE_CARREE
     *         PLATE_CARREE}.
     *     <li>{@link ContourOptions#WIDTH WIDTH}: When {@link
     *         #getGenerateImage() generateImage} is set to {@link
     *         GenerateImage#TRUE TRUE}, width of the generated image. The
     *         default value is '512'.
     *     <li>{@link ContourOptions#HEIGHT HEIGHT}: When {@link
     *         #getGenerateImage() generateImage} is set to {@link
     *         GenerateImage#TRUE TRUE}, height of the generated image. If the
     *         default value is used, the {@link ContourOptions#HEIGHT HEIGHT}
     *         is set to the value resulting from multiplying the aspect ratio
     *         by the {@link ContourOptions#WIDTH WIDTH}. The default value is
     *         '-1'.
     *     <li>{@link ContourOptions#SEARCH_RADIUS SEARCH_RADIUS}: When
     *         interpolating the graph solution to generate the isochrone,
     *         neighborhood of influence of sample data (in percent of the
     *         image/grid). The default value is '20'.
     *     <li>{@link ContourOptions#GRID_SIZE GRID_SIZE}: When interpolating
     *         the graph solution to generate the isochrone, number of
     *         subdivisions along the x axis when building the grid (the y is
     *         computed using the aspect ratio of the output image). The
     *         default value is '100'.
     *     <li>{@link ContourOptions#COLOR_ISOLINES COLOR_ISOLINES}: Color each
     *         isoline according to the colormap; otherwise, use the foreground
     *         color.
     *         Supported values:
     *         <ul>
     *             <li>{@link ContourOptions#TRUE TRUE}
     *             <li>{@link ContourOptions#FALSE FALSE}
     *         </ul>
     *         The default value is {@link ContourOptions#TRUE TRUE}.
     *     <li>{@link ContourOptions#ADD_LABELS ADD_LABELS}: If set to {@link
     *         ContourOptions#TRUE TRUE}, add labels to the isolines.
     *         Supported values:
     *         <ul>
     *             <li>{@link ContourOptions#TRUE TRUE}
     *             <li>{@link ContourOptions#FALSE FALSE}
     *         </ul>
     *         The default value is {@link ContourOptions#FALSE FALSE}.
     *     <li>{@link ContourOptions#LABELS_FONT_SIZE LABELS_FONT_SIZE}: When
     *         {@link ContourOptions#ADD_LABELS ADD_LABELS} is set to {@link
     *         ContourOptions#TRUE TRUE}, size of the font (in pixels) to use
     *         for labels. The default value is '12'.
     *     <li>{@link ContourOptions#LABELS_FONT_FAMILY LABELS_FONT_FAMILY}:
     *         When {@link ContourOptions#ADD_LABELS ADD_LABELS} is set to
     *         {@link ContourOptions#TRUE TRUE}, font name to be used when
     *         adding labels. The default value is 'arial'.
     *     <li>{@link ContourOptions#LABELS_SEARCH_WINDOW
     *         LABELS_SEARCH_WINDOW}: When {@link ContourOptions#ADD_LABELS
     *         ADD_LABELS} is set to {@link ContourOptions#TRUE TRUE}, a search
     *         window is used to rate the local quality of each isoline.
     *         Smooth, continuous, long stretches with relatively flat angles
     *         are favored. The provided value is multiplied by the {@link
     *         ContourOptions#LABELS_FONT_SIZE LABELS_FONT_SIZE} to calculate
     *         the final window size. The default value is '4'.
     *     <li>{@link ContourOptions#LABELS_INTRALEVEL_SEPARATION
     *         LABELS_INTRALEVEL_SEPARATION}: When {@link
     *         ContourOptions#ADD_LABELS ADD_LABELS} is set to {@link
     *         ContourOptions#TRUE TRUE}, this value determines the  distance
     *         (in multiples of the {@link ContourOptions#LABELS_FONT_SIZE
     *         LABELS_FONT_SIZE}) to use when separating labels of different
     *         values. The default value is '4'.
     *     <li>{@link ContourOptions#LABELS_INTERLEVEL_SEPARATION
     *         LABELS_INTERLEVEL_SEPARATION}: When {@link
     *         ContourOptions#ADD_LABELS ADD_LABELS} is set to {@link
     *         ContourOptions#TRUE TRUE}, this value determines the distance
     *         (in percent of the total window size) to use when separating
     *         labels of the same value. The default value is '20'.
     *     <li>{@link ContourOptions#LABELS_MAX_ANGLE LABELS_MAX_ANGLE}: When
     *         {@link ContourOptions#ADD_LABELS ADD_LABELS} is set to {@link
     *         ContourOptions#TRUE TRUE}, maximum angle (in degrees) from the
     *         vertical to use when adding labels. The default value is '60'.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code contourOptions}.
     */
    public Map<String, String> getContourOptions() {
        return contourOptions;
    }

    /**
     * Solver specific parameters.
     * <ul>
     *     <li>{@link ContourOptions#PROJECTION PROJECTION}: Spatial Reference
     *         System (i.e. EPSG Code).
     *         Supported values:
     *         <ul>
     *             <li>{@link ContourOptions#_3857 _3857}
     *             <li>{@link ContourOptions#_102100 _102100}
     *             <li>{@link ContourOptions#_900913 _900913}
     *             <li>{@link ContourOptions#EPSG_4326 EPSG_4326}
     *             <li>{@link ContourOptions#PLATE_CARREE PLATE_CARREE}
     *             <li>{@link ContourOptions#EPSG_900913 EPSG_900913}
     *             <li>{@link ContourOptions#EPSG_102100 EPSG_102100}
     *             <li>{@link ContourOptions#EPSG_3857 EPSG_3857}
     *             <li>{@link ContourOptions#WEB_MERCATOR WEB_MERCATOR}
     *         </ul>
     *         The default value is {@link ContourOptions#PLATE_CARREE
     *         PLATE_CARREE}.
     *     <li>{@link ContourOptions#WIDTH WIDTH}: When {@link
     *         #getGenerateImage() generateImage} is set to {@link
     *         GenerateImage#TRUE TRUE}, width of the generated image. The
     *         default value is '512'.
     *     <li>{@link ContourOptions#HEIGHT HEIGHT}: When {@link
     *         #getGenerateImage() generateImage} is set to {@link
     *         GenerateImage#TRUE TRUE}, height of the generated image. If the
     *         default value is used, the {@link ContourOptions#HEIGHT HEIGHT}
     *         is set to the value resulting from multiplying the aspect ratio
     *         by the {@link ContourOptions#WIDTH WIDTH}. The default value is
     *         '-1'.
     *     <li>{@link ContourOptions#SEARCH_RADIUS SEARCH_RADIUS}: When
     *         interpolating the graph solution to generate the isochrone,
     *         neighborhood of influence of sample data (in percent of the
     *         image/grid). The default value is '20'.
     *     <li>{@link ContourOptions#GRID_SIZE GRID_SIZE}: When interpolating
     *         the graph solution to generate the isochrone, number of
     *         subdivisions along the x axis when building the grid (the y is
     *         computed using the aspect ratio of the output image). The
     *         default value is '100'.
     *     <li>{@link ContourOptions#COLOR_ISOLINES COLOR_ISOLINES}: Color each
     *         isoline according to the colormap; otherwise, use the foreground
     *         color.
     *         Supported values:
     *         <ul>
     *             <li>{@link ContourOptions#TRUE TRUE}
     *             <li>{@link ContourOptions#FALSE FALSE}
     *         </ul>
     *         The default value is {@link ContourOptions#TRUE TRUE}.
     *     <li>{@link ContourOptions#ADD_LABELS ADD_LABELS}: If set to {@link
     *         ContourOptions#TRUE TRUE}, add labels to the isolines.
     *         Supported values:
     *         <ul>
     *             <li>{@link ContourOptions#TRUE TRUE}
     *             <li>{@link ContourOptions#FALSE FALSE}
     *         </ul>
     *         The default value is {@link ContourOptions#FALSE FALSE}.
     *     <li>{@link ContourOptions#LABELS_FONT_SIZE LABELS_FONT_SIZE}: When
     *         {@link ContourOptions#ADD_LABELS ADD_LABELS} is set to {@link
     *         ContourOptions#TRUE TRUE}, size of the font (in pixels) to use
     *         for labels. The default value is '12'.
     *     <li>{@link ContourOptions#LABELS_FONT_FAMILY LABELS_FONT_FAMILY}:
     *         When {@link ContourOptions#ADD_LABELS ADD_LABELS} is set to
     *         {@link ContourOptions#TRUE TRUE}, font name to be used when
     *         adding labels. The default value is 'arial'.
     *     <li>{@link ContourOptions#LABELS_SEARCH_WINDOW
     *         LABELS_SEARCH_WINDOW}: When {@link ContourOptions#ADD_LABELS
     *         ADD_LABELS} is set to {@link ContourOptions#TRUE TRUE}, a search
     *         window is used to rate the local quality of each isoline.
     *         Smooth, continuous, long stretches with relatively flat angles
     *         are favored. The provided value is multiplied by the {@link
     *         ContourOptions#LABELS_FONT_SIZE LABELS_FONT_SIZE} to calculate
     *         the final window size. The default value is '4'.
     *     <li>{@link ContourOptions#LABELS_INTRALEVEL_SEPARATION
     *         LABELS_INTRALEVEL_SEPARATION}: When {@link
     *         ContourOptions#ADD_LABELS ADD_LABELS} is set to {@link
     *         ContourOptions#TRUE TRUE}, this value determines the  distance
     *         (in multiples of the {@link ContourOptions#LABELS_FONT_SIZE
     *         LABELS_FONT_SIZE}) to use when separating labels of different
     *         values. The default value is '4'.
     *     <li>{@link ContourOptions#LABELS_INTERLEVEL_SEPARATION
     *         LABELS_INTERLEVEL_SEPARATION}: When {@link
     *         ContourOptions#ADD_LABELS ADD_LABELS} is set to {@link
     *         ContourOptions#TRUE TRUE}, this value determines the distance
     *         (in percent of the total window size) to use when separating
     *         labels of the same value. The default value is '20'.
     *     <li>{@link ContourOptions#LABELS_MAX_ANGLE LABELS_MAX_ANGLE}: When
     *         {@link ContourOptions#ADD_LABELS ADD_LABELS} is set to {@link
     *         ContourOptions#TRUE TRUE}, maximum angle (in degrees) from the
     *         vertical to use when adding labels. The default value is '60'.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param contourOptions  The new value for {@code contourOptions}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public VisualizeIsochroneRequest setContourOptions(Map<String, String> contourOptions) {
        this.contourOptions = (contourOptions == null) ? new LinkedHashMap<String, String>() : contourOptions;
        return this;
    }

    /**
     * Additional parameters.
     * <ul>
     *     <li>{@link Options#SOLVE_TABLE SOLVE_TABLE}: Name of the table to
     *         host intermediate solve results, in [schema_name.]table_name
     *         format, using standard <a
     *         href="../../../../../../concepts/tables/#table-name-resolution"
     *         target="_top">name resolution rules</a> and meeting <a
     *         href="../../../../../../concepts/tables/#table-naming-criteria"
     *         target="_top">table naming criteria</a>.  This table will
     *         contain the position and cost for each vertex in the graph. If
     *         the default value is used, a temporary table is created and
     *         deleted once the solution is calculated. The default value is
     *         ''.
     *     <li>{@link Options#IS_REPLICATED IS_REPLICATED}: If set to {@link
     *         Options#TRUE TRUE}, replicate the {@link Options#SOLVE_TABLE
     *         SOLVE_TABLE}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#DATA_MIN_X DATA_MIN_X}: Lower bound for the x
     *         values. If not provided, it will be computed from the bounds of
     *         the input data.
     *     <li>{@link Options#DATA_MAX_X DATA_MAX_X}: Upper bound for the x
     *         values. If not provided, it will be computed from the bounds of
     *         the input data.
     *     <li>{@link Options#DATA_MIN_Y DATA_MIN_Y}: Lower bound for the y
     *         values. If not provided, it will be computed from the bounds of
     *         the input data.
     *     <li>{@link Options#DATA_MAX_Y DATA_MAX_Y}: Upper bound for the y
     *         values. If not provided, it will be computed from the bounds of
     *         the input data.
     *     <li>{@link Options#CONCAVITY_LEVEL CONCAVITY_LEVEL}: Factor to
     *         qualify the concavity of the isochrone curves. The lower the
     *         value, the more convex (with '0' being completely convex and '1'
     *         being the most concave). The default value is '0.5'. The minimum
     *         allowed value is '0'. The maximum allowed value is '1'.
     *     <li>{@link Options#USE_PRIORITY_QUEUE_SOLVERS
     *         USE_PRIORITY_QUEUE_SOLVERS}: sets the solver methods explicitly
     *         if true.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}: uses the solvers scheduled
     *                 for 'shortest_path' and 'inverse_shortest_path' based on
     *                 solve_direction
     *             <li>{@link Options#FALSE FALSE}: uses the solvers
     *                 'priority_queue' and 'inverse_priority_queue' based on
     *                 solve_direction
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#SOLVE_DIRECTION SOLVE_DIRECTION}: Specify whether
     *         we are going to the source node, or starting from it.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#FROM_SOURCE FROM_SOURCE}: Shortest path
     *                 to get to the source (inverse Dijkstra)
     *             <li>{@link Options#TO_SOURCE TO_SOURCE}: Shortest path to
     *                 source (Dijkstra)
     *         </ul>
     *         The default value is {@link Options#FROM_SOURCE FROM_SOURCE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @return The current value of {@code options}.
     */
    public Map<String, String> getOptions() {
        return options;
    }

    /**
     * Additional parameters.
     * <ul>
     *     <li>{@link Options#SOLVE_TABLE SOLVE_TABLE}: Name of the table to
     *         host intermediate solve results, in [schema_name.]table_name
     *         format, using standard <a
     *         href="../../../../../../concepts/tables/#table-name-resolution"
     *         target="_top">name resolution rules</a> and meeting <a
     *         href="../../../../../../concepts/tables/#table-naming-criteria"
     *         target="_top">table naming criteria</a>.  This table will
     *         contain the position and cost for each vertex in the graph. If
     *         the default value is used, a temporary table is created and
     *         deleted once the solution is calculated. The default value is
     *         ''.
     *     <li>{@link Options#IS_REPLICATED IS_REPLICATED}: If set to {@link
     *         Options#TRUE TRUE}, replicate the {@link Options#SOLVE_TABLE
     *         SOLVE_TABLE}.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}
     *             <li>{@link Options#FALSE FALSE}
     *         </ul>
     *         The default value is {@link Options#TRUE TRUE}.
     *     <li>{@link Options#DATA_MIN_X DATA_MIN_X}: Lower bound for the x
     *         values. If not provided, it will be computed from the bounds of
     *         the input data.
     *     <li>{@link Options#DATA_MAX_X DATA_MAX_X}: Upper bound for the x
     *         values. If not provided, it will be computed from the bounds of
     *         the input data.
     *     <li>{@link Options#DATA_MIN_Y DATA_MIN_Y}: Lower bound for the y
     *         values. If not provided, it will be computed from the bounds of
     *         the input data.
     *     <li>{@link Options#DATA_MAX_Y DATA_MAX_Y}: Upper bound for the y
     *         values. If not provided, it will be computed from the bounds of
     *         the input data.
     *     <li>{@link Options#CONCAVITY_LEVEL CONCAVITY_LEVEL}: Factor to
     *         qualify the concavity of the isochrone curves. The lower the
     *         value, the more convex (with '0' being completely convex and '1'
     *         being the most concave). The default value is '0.5'. The minimum
     *         allowed value is '0'. The maximum allowed value is '1'.
     *     <li>{@link Options#USE_PRIORITY_QUEUE_SOLVERS
     *         USE_PRIORITY_QUEUE_SOLVERS}: sets the solver methods explicitly
     *         if true.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#TRUE TRUE}: uses the solvers scheduled
     *                 for 'shortest_path' and 'inverse_shortest_path' based on
     *                 solve_direction
     *             <li>{@link Options#FALSE FALSE}: uses the solvers
     *                 'priority_queue' and 'inverse_priority_queue' based on
     *                 solve_direction
     *         </ul>
     *         The default value is {@link Options#FALSE FALSE}.
     *     <li>{@link Options#SOLVE_DIRECTION SOLVE_DIRECTION}: Specify whether
     *         we are going to the source node, or starting from it.
     *         Supported values:
     *         <ul>
     *             <li>{@link Options#FROM_SOURCE FROM_SOURCE}: Shortest path
     *                 to get to the source (inverse Dijkstra)
     *             <li>{@link Options#TO_SOURCE TO_SOURCE}: Shortest path to
     *                 source (Dijkstra)
     *         </ul>
     *         The default value is {@link Options#FROM_SOURCE FROM_SOURCE}.
     * </ul>
     * The default value is an empty {@link Map}.
     *
     * @param options  The new value for {@code options}.
     *
     * @return {@code this} to mimic the builder pattern.
     */
    public VisualizeIsochroneRequest setOptions(Map<String, String> options) {
        this.options = (options == null) ? new LinkedHashMap<String, String>() : options;
        return this;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @return The schema object describing this class.
     */
    @Override
    public Schema getSchema() {
        return schema$;
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to get
     *
     * @return value of the field with the given index.
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    public Object get(int index) {
        switch (index) {
            case 0:
                return this.graphName;

            case 1:
                return this.sourceNode;

            case 2:
                return this.maxSolutionRadius;

            case 3:
                return this.weightsOnEdges;

            case 4:
                return this.restrictions;

            case 5:
                return this.numLevels;

            case 6:
                return this.generateImage;

            case 7:
                return this.levelsTable;

            case 8:
                return this.styleOptions;

            case 9:
                return this.solveOptions;

            case 10:
                return this.contourOptions;

            case 11:
                return this.options;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    /**
     * This method supports the Avro framework and is not intended to be called
     * directly by the user.
     *
     * @param index  the position of the field to set
     * @param value  the value to set
     *
     * @throws IndexOutOfBoundsException
     */
    @Override
    @SuppressWarnings("unchecked")
    public void put(int index, Object value) {
        switch (index) {
            case 0:
                this.graphName = (String)value;
                break;

            case 1:
                this.sourceNode = (String)value;
                break;

            case 2:
                this.maxSolutionRadius = (Double)value;
                break;

            case 3:
                this.weightsOnEdges = (List<String>)value;
                break;

            case 4:
                this.restrictions = (List<String>)value;
                break;

            case 5:
                this.numLevels = (Integer)value;
                break;

            case 6:
                this.generateImage = (Boolean)value;
                break;

            case 7:
                this.levelsTable = (String)value;
                break;

            case 8:
                this.styleOptions = (Map<String, String>)value;
                break;

            case 9:
                this.solveOptions = (Map<String, String>)value;
                break;

            case 10:
                this.contourOptions = (Map<String, String>)value;
                break;

            case 11:
                this.options = (Map<String, String>)value;
                break;

            default:
                throw new IndexOutOfBoundsException("Invalid index specified.");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if( obj == this ) {
            return true;
        }

        if( (obj == null) || (obj.getClass() != this.getClass()) ) {
            return false;
        }

        VisualizeIsochroneRequest that = (VisualizeIsochroneRequest)obj;

        return ( this.graphName.equals( that.graphName )
                 && this.sourceNode.equals( that.sourceNode )
                 && ( (Double)this.maxSolutionRadius ).equals( (Double)that.maxSolutionRadius )
                 && this.weightsOnEdges.equals( that.weightsOnEdges )
                 && this.restrictions.equals( that.restrictions )
                 && ( this.numLevels == that.numLevels )
                 && ( this.generateImage == that.generateImage )
                 && this.levelsTable.equals( that.levelsTable )
                 && this.styleOptions.equals( that.styleOptions )
                 && this.solveOptions.equals( that.solveOptions )
                 && this.contourOptions.equals( that.contourOptions )
                 && this.options.equals( that.options ) );
    }

    @Override
    public String toString() {
        GenericData gd = GenericData.get();
        StringBuilder builder = new StringBuilder();
        builder.append( "{" );
        builder.append( gd.toString( "graphName" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.graphName ) );
        builder.append( ", " );
        builder.append( gd.toString( "sourceNode" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.sourceNode ) );
        builder.append( ", " );
        builder.append( gd.toString( "maxSolutionRadius" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.maxSolutionRadius ) );
        builder.append( ", " );
        builder.append( gd.toString( "weightsOnEdges" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.weightsOnEdges ) );
        builder.append( ", " );
        builder.append( gd.toString( "restrictions" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.restrictions ) );
        builder.append( ", " );
        builder.append( gd.toString( "numLevels" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.numLevels ) );
        builder.append( ", " );
        builder.append( gd.toString( "generateImage" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.generateImage ) );
        builder.append( ", " );
        builder.append( gd.toString( "levelsTable" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.levelsTable ) );
        builder.append( ", " );
        builder.append( gd.toString( "styleOptions" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.styleOptions ) );
        builder.append( ", " );
        builder.append( gd.toString( "solveOptions" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.solveOptions ) );
        builder.append( ", " );
        builder.append( gd.toString( "contourOptions" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.contourOptions ) );
        builder.append( ", " );
        builder.append( gd.toString( "options" ) );
        builder.append( ": " );
        builder.append( gd.toString( this.options ) );
        builder.append( "}" );

        return builder.toString();
    }

    @Override
    public int hashCode() {
        int hashCode = 1;
        hashCode = (31 * hashCode) + this.graphName.hashCode();
        hashCode = (31 * hashCode) + this.sourceNode.hashCode();
        hashCode = (31 * hashCode) + ((Double)this.maxSolutionRadius).hashCode();
        hashCode = (31 * hashCode) + this.weightsOnEdges.hashCode();
        hashCode = (31 * hashCode) + this.restrictions.hashCode();
        hashCode = (31 * hashCode) + this.numLevels;
        hashCode = (31 * hashCode) + ((Boolean)this.generateImage).hashCode();
        hashCode = (31 * hashCode) + this.levelsTable.hashCode();
        hashCode = (31 * hashCode) + this.styleOptions.hashCode();
        hashCode = (31 * hashCode) + this.solveOptions.hashCode();
        hashCode = (31 * hashCode) + this.contourOptions.hashCode();
        hashCode = (31 * hashCode) + this.options.hashCode();
        return hashCode;
    }
}
